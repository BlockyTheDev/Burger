{
    "achievements": {},
    "biomes": {
        "biome": {}
    },
    "blocks": {
        "block": {}
    },
    "entities": {
        "dataserializers": {
            "Particle": [
                null,
                {
                    "class": "lr$15",
                    "field": "i",
                    "id": 14,
                    "instructions": [
                        {
                            "field": "((ef)value).b().e()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "args": "packetbuffer",
                            "field": "(ef)value",
                            "method": "a(Lfp;)V",
                            "name": "a",
                            "operation": "interfacecall",
                            "target": "ef",
                            "type": "interface"
                        }
                    ],
                    "name": "Particle",
                    "type": "ef"
                }
            ]
        },
        "entity": {
            "area_effect_cloud": [
                {
                    "class": "wh",
                    "id": 3,
                    "metadata": [
                        {
                            "class": "wj",
                            "entity": "~abstract_entity"
                        },
                        {
                            "class": "wh",
                            "data": [
                                {
                                    "default": 0.5,
                                    "field": "a",
                                    "index": 6,
                                    "serializer": "Float",
                                    "serializer_id": 2
                                },
                                {
                                    "default": 0,
                                    "field": "b",
                                    "index": 7,
                                    "serializer": "VarInt",
                                    "serializer_id": 1
                                },
                                {
                                    "default": false,
                                    "field": "c",
                                    "index": 8,
                                    "serializer": "Boolean",
                                    "serializer_id": 6
                                },
                                {
                                    "field": "d",
                                    "index": 9,
                                    "serializer": "VarInt",
                                    "serializer_id": 1
                                },
                                {
                                    "default": 0,
                                    "field": "e",
                                    "index": 10,
                                    "serializer": "VarInt",
                                    "serializer_id": 1
                                },
                                {
                                    "default": 0,
                                    "field": "f",
                                    "index": 11,
                                    "serializer": "VarInt",
                                    "serializer_id": 1
                                }
                            ]
                        }
                    ],
                    "name": "area_effect_cloud",
                    "old_name": "AreaEffectCloud"
                },
                {
                    "class": "xi",
                    "id": 3,
                    "metadata": [
                        {
                            "class": "xk",
                            "entity": "~abstract_entity"
                        },
                        {
                            "class": "xi",
                            "data": [
                                {
                                    "default": 0.5,
                                    "field": "b",
                                    "index": 6,
                                    "serializer": "Float",
                                    "serializer_id": 2
                                },
                                {
                                    "default": 0,
                                    "field": "c",
                                    "index": 7,
                                    "serializer": "VarInt",
                                    "serializer_id": 1
                                },
                                {
                                    "default": false,
                                    "field": "d",
                                    "index": 8,
                                    "serializer": "Boolean",
                                    "serializer_id": 6
                                },
                                {
                                    "field": "e",
                                    "index": 9,
                                    "serializer": "Particle",
                                    "serializer_id": 14
                                }
                            ]
                        }
                    ],
                    "name": "area_effect_cloud",
                    "old_name": "AreaEffectCloud"
                }
            ]
        },
        "object": {}
    },
    "items": {
        "item": {}
    },
    "language": {
        "commands": {
            "advancement.criterionNotFound": [
                "The advancement '%1$s' does not contain the criterion '%2$s'",
                "The advancement %1$s does not contain the criterion '%2$s'"
            ],
            "advancement.grant.criterion.failed": [
                "Couldn't grant the criterion '%3$s' of advancement '%1$s' to %2$s because they already have it",
                null
            ],
            "advancement.grant.criterion.success": [
                "Granted the criterion '%3$s' of advancement '%1$s' to %2$s",
                null
            ],
            "advancement.grant.criterion.to.many.failure": [
                null,
                "Couldn't grant criterion '%s' of advancement %s to %s players as they already have it"
            ],
            "advancement.grant.criterion.to.many.success": [
                null,
                "Granted criterion '%s' of advancement %s to %s players"
            ],
            "advancement.grant.criterion.to.one.failure": [
                null,
                "Couldn't grant criterion '%s' of advancement %s to %s as they already have it"
            ],
            "advancement.grant.criterion.to.one.success": [
                null,
                "Granted criterion '%s' of advancement %s to %s"
            ],
            "advancement.grant.everything.failed": [
                "Couldn't grant any advancements to %1$s because they already have them all",
                null
            ],
            "advancement.grant.everything.success": [
                "Granted every advancement (%2$s total granted) to %1$s",
                null
            ],
            "advancement.grant.everything.usage": [
                "/advancement grant <player> everything",
                null
            ],
            "advancement.grant.from.failed": [
                "Couldn't grant the advancement '%1$s' or its descendants to %2$s because they already have them all",
                null
            ],
            "advancement.grant.from.success": [
                "Granted '%1$s' and all descendants (%3$s total granted) to %2$s",
                null
            ],
            "advancement.grant.from.usage": [
                "/advancement grant <player> from <advancement>",
                null
            ],
            "advancement.grant.many.to.many.failure": [
                null,
                "Couldn't grant %s advancements to %s players as they already have them"
            ],
            "advancement.grant.many.to.many.success": [
                null,
                "Granted %s advancements to %s players"
            ],
            "advancement.grant.many.to.one.failure": [
                null,
                "Couldn't grant %s advancements to %s as they already have them"
            ],
            "advancement.grant.many.to.one.success": [
                null,
                "Granted %s advancements to %s"
            ],
            "advancement.grant.one.to.many.failure": [
                null,
                "Couldn't grant advancement %s to %s players as they already have it"
            ],
            "advancement.grant.one.to.many.success": [
                null,
                "Granted the advancement %s to %s players"
            ],
            "advancement.grant.one.to.one.failure": [
                null,
                "Couldn't grant advancement %s to %s as they already have it"
            ],
            "advancement.grant.one.to.one.success": [
                null,
                "Granted the advancement %s to %s"
            ],
            "advancement.grant.only.failed": [
                "Couldn't grant the advancement '%1$s' to %2$s because they already have it",
                null
            ],
            "advancement.grant.only.success": [
                "Granted the entire advancement '%1$s' to %2$s",
                null
            ],
            "advancement.grant.only.usage": [
                "/advancement grant <player> only <advancement> [criterion]",
                null
            ],
            "advancement.grant.through.failed": [
                "Couldn't grant the advancement '%1$s', its ancestors or its descendants to %2$s because they already have them all",
                null
            ],
            "advancement.grant.through.success": [
                "Granted '%1$s', all ancestors and all descendants (%3$s total granted) to %2$s",
                null
            ],
            "advancement.grant.through.usage": [
                "/advancement grant <player> through <advancement>",
                null
            ],
            "advancement.grant.until.failed": [
                "Couldn't grant the advancement '%1$s' or its ancestors to %2$s because they already have them all",
                null
            ],
            "advancement.grant.until.success": [
                "Granted '%1$s' and all ancestors (%3$s total granted) to %2$s",
                null
            ],
            "advancement.grant.until.usage": [
                "/advancement grant <player> until <advancement>",
                null
            ],
            "advancement.grant.usage": [
                "/advancement grant <player> <only|until|from|through|everything>",
                null
            ],
            "advancement.revoke.criterion.failed": [
                "Couldn't revoke the criterion '%3$s' of advancement '%1$s' from %2$s because they haven't started it",
                null
            ],
            "advancement.revoke.criterion.success": [
                "Revoked the criterion '%3$s' of advancement '%1$s' from %2$s",
                null
            ],
            "advancement.revoke.criterion.to.many.failure": [
                null,
                "Couldn't revoke criterion '%s' of advancement %s from %s players as they don't have it"
            ],
            "advancement.revoke.criterion.to.many.success": [
                null,
                "Revoked criterion '%s' of advancement %s from %s players"
            ],
            "advancement.revoke.criterion.to.one.failure": [
                null,
                "Couldn't revoke criterion '%s' of advancement %s from %s as they don't have it"
            ],
            "advancement.revoke.criterion.to.one.success": [
                null,
                "Revoked criterion '%s' of advancement %s from %s"
            ],
            "advancement.revoke.everything.failed": [
                "Couldn't revoke any advancements to %1$s because they haven't started any",
                null
            ],
            "advancement.revoke.everything.success": [
                "Revoked every advancement (%2$s total revoked) from %1$s",
                null
            ],
            "advancement.revoke.everything.usage": [
                "/advancement revoke <player> everything",
                null
            ],
            "advancement.revoke.from.failed": [
                "Couldn't revoke the advancement '%1$s' or its descendants from %2$s because they haven't started any",
                null
            ],
            "advancement.revoke.from.success": [
                "Revoked '%1$s' and all descendants (%3$s total revoked) from %2$s",
                null
            ],
            "advancement.revoke.from.usage": [
                "/advancement revoke <player> from <advancement>",
                null
            ],
            "advancement.revoke.many.to.many.failure": [
                null,
                "Couldn't revoke %s advancements from %s players as they don't have them"
            ],
            "advancement.revoke.many.to.many.success": [
                null,
                "Revoked %s advancements from %s players"
            ],
            "advancement.revoke.many.to.one.failure": [
                null,
                "Couldn't revoke %s advancements from %s as they don't have them"
            ],
            "advancement.revoke.many.to.one.success": [
                null,
                "Revoked %s advancements from %s"
            ],
            "advancement.revoke.one.to.many.failure": [
                null,
                "Couldn't revoke advancement %s from %s players as they don't have it"
            ],
            "advancement.revoke.one.to.many.success": [
                null,
                "Revoked the advancement %s from %s players"
            ],
            "advancement.revoke.one.to.one.failure": [
                null,
                "Couldn't revoke advancement %s from %s as they don't have it"
            ],
            "advancement.revoke.one.to.one.success": [
                null,
                "Revoked the advancement %s from %s"
            ],
            "advancement.revoke.only.failed": [
                "Couldn't revoke the advancement '%1$s' from %2$s because they haven't started it",
                null
            ],
            "advancement.revoke.only.success": [
                "Revoked the entire advancement '%1$s' from %2$s",
                null
            ],
            "advancement.revoke.only.usage": [
                "/advancement revoke <player> only <advancement> [criterion]",
                null
            ],
            "advancement.revoke.through.failed": [
                "Couldn't revoke the advancement '%1$s', its ancestors or its descendants from %2$s because they haven't started any",
                null
            ],
            "advancement.revoke.through.success": [
                "Revoked '%1$s', all ancestors and all descendants (%3$s total revoked) from %2$s",
                null
            ],
            "advancement.revoke.through.usage": [
                "/advancement revoke <player> through <advancement>",
                null
            ],
            "advancement.revoke.until.failed": [
                "Couldn't revoke the advancement '%1$s' or its ancestors from %2$s because they haven't started any",
                null
            ],
            "advancement.revoke.until.success": [
                "Revoked '%1$s' and all ancestors (%3$s total revoked) from %2$s",
                null
            ],
            "advancement.revoke.until.usage": [
                "/advancement revoke <player> until <advancement>",
                null
            ],
            "advancement.revoke.usage": [
                "/advancement revoke <player> <only|until|from|through|everything>",
                null
            ],
            "advancement.test.advancement.notDone": [
                "Player %1$s has not completed advancement '%2$s'",
                null
            ],
            "advancement.test.advancement.success": [
                "Player %1$s has completed advancement '%2$s'",
                null
            ],
            "advancement.test.criterion.notDone": [
                "Player %1$s has not completed criterion '%3$s' of advancement '%2$s'",
                null
            ],
            "advancement.test.criterion.success": [
                "Player %1$s has completed criterion '%3$s' of advancement '%2$s'",
                null
            ],
            "advancement.test.usage": [
                "/advancement test <player> <advancement> [criterion]",
                null
            ],
            "advancement.usage": [
                "/advancement <grant|revoke|test> <player>",
                null
            ],
            "ban.failed": [
                "Could not ban player %s",
                null
            ],
            "ban.success": [
                "Banned player %s",
                "Banned %s: %s"
            ],
            "ban.usage": [
                "/ban <name> [reason ...]",
                null
            ],
            "banip.info": [
                null,
                "This ban affects %s players: %s"
            ],
            "banip.invalid": [
                "You have entered an invalid IP address or a player that is not online",
                null
            ],
            "banip.success": [
                "Banned IP address %s",
                "Banned IP %s: %s"
            ],
            "banip.success.players": [
                "Banned IP address %s belonging to %s",
                null
            ],
            "banip.usage": [
                "/ban-ip <address|name> [reason ...]",
                null
            ],
            "banlist.entry": [
                null,
                "%s was banned by %s: %s"
            ],
            "banlist.ips": [
                "There are %s total banned IP addresses:",
                null
            ],
            "banlist.list": [
                null,
                "There are %s bans:"
            ],
            "banlist.none": [
                null,
                "There are no bans"
            ],
            "banlist.players": [
                "There are %s total banned players:",
                null
            ],
            "banlist.usage": [
                "/banlist [ips|players]",
                null
            ],
            "blockdata.failed": [
                "The data tag did not change: %s",
                null
            ],
            "blockdata.notValid": [
                "The target block is not a data holder block",
                null
            ],
            "blockdata.outOfWorld": [
                "Cannot change block outside of the world",
                null
            ],
            "blockdata.query": [
                null,
                "Block %s, %s, %s has block data: %s"
            ],
            "blockdata.success": [
                "Block data updated to: %s",
                "Block %s, %s, %s has been changed to block data: %s"
            ],
            "blockdata.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "blockdata.usage": [
                "/blockdata <x> <y> <z> <dataTag>",
                null
            ],
            "chunkinfo.compiled": [
                "Chunk is compiled.",
                null
            ],
            "chunkinfo.data": [
                "First 64 vertices are: %s",
                null
            ],
            "chunkinfo.empty": [
                "Chunk is empty.",
                null
            ],
            "chunkinfo.hasLayers": [
                "Chunk has layers: %s",
                null
            ],
            "chunkinfo.hasNoRenderableLayers": [
                "Chunk has no renderable layers.",
                null
            ],
            "chunkinfo.isEmpty": [
                "Chunk has empty layers: %s",
                null
            ],
            "chunkinfo.location": [
                "Chunk location: (%s, %s, %s)",
                null
            ],
            "chunkinfo.noChunk": [
                "No chunk found at chunk position %s, %s, %s",
                null
            ],
            "chunkinfo.notCompiled": [
                "Chunk is not compiled.",
                null
            ],
            "chunkinfo.notEmpty": [
                "Chunk is not empty.",
                null
            ],
            "chunkinfo.usage": [
                "/chunkinfo [<x> <y> <z>]",
                null
            ],
            "chunkinfo.vertices": [
                "%s layer's buffer contains %s vertices",
                null
            ],
            "clear.failure": [
                "Could not clear the inventory of %s, no items to remove",
                null
            ],
            "clear.success": [
                "Cleared the inventory of %s, removing %s items",
                null
            ],
            "clear.success.multiple": [
                null,
                "Removed %s items from %s players"
            ],
            "clear.success.single": [
                null,
                "Removed %s items from player %s"
            ],
            "clear.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "clear.test.multiple": [
                null,
                "Found %s matching items on %s players"
            ],
            "clear.test.single": [
                null,
                "Found %s matching items on player %s"
            ],
            "clear.testing": [
                "%s has %s items that match the criteria",
                null
            ],
            "clear.usage": [
                "/clear [player] [item] [data] [maxCount] [dataTag]",
                null
            ],
            "clone.failed": [
                "No blocks cloned",
                null
            ],
            "clone.noOverlap": [
                "Source and destination can not overlap",
                null
            ],
            "clone.outOfWorld": [
                "Cannot access blocks outside of the world",
                null
            ],
            "clone.success": [
                "%s blocks cloned",
                "Successfully cloned %s blocks"
            ],
            "clone.tooManyBlocks": [
                "Too many blocks in the specified area (%s > %s)",
                null
            ],
            "clone.usage": [
                "/clone <x1> <y1> <z1> <x2> <y2> <z2> <x> <y> <z> [maskMode] [cloneMode]",
                null
            ],
            "compare.failed": [
                "Source and destination are not identical",
                null
            ],
            "compare.outOfWorld": [
                "Cannot access blocks outside of the world",
                null
            ],
            "compare.success": [
                "%s blocks compared",
                null
            ],
            "compare.tooManyBlocks": [
                "Too many blocks in the specified area (%s > %s)",
                null
            ],
            "compare.usage": [
                "/testforblocks <x1> <y1> <z1> <x2> <y2> <z2> <x> <y> <z> [mode]",
                null
            ],
            "debug.notStarted": [
                "Can't stop profiling when we haven't started yet!",
                null
            ],
            "debug.start": [
                "Started debug profiling",
                null
            ],
            "debug.started": [
                null,
                "Started debug profiling"
            ],
            "debug.stop": [
                "Stopped debug profiling after %s seconds (%s ticks)",
                null
            ],
            "debug.stopped": [
                null,
                "Stopped debug profiling after %s seconds and %s ticks (%s ticks per second)"
            ],
            "debug.usage": [
                "/debug <start|stop>",
                null
            ],
            "defaultgamemode.success": [
                "The world's default game mode is now %s",
                "The default game mode is now %s"
            ],
            "defaultgamemode.usage": [
                "/defaultgamemode <mode>",
                null
            ],
            "deop.failed": [
                "Could not de-op %s",
                null
            ],
            "deop.success": [
                "De-opped %s",
                "Made %s no longer a server operator"
            ],
            "deop.usage": [
                "/deop <player>",
                null
            ],
            "difficulty.query": [
                null,
                "The difficulty is %s"
            ],
            "difficulty.success": [
                "Set game difficulty to %s",
                "The difficulty has been set to %s"
            ],
            "difficulty.usage": [
                "/difficulty <new difficulty>",
                null
            ],
            "downfall.success": [
                "Toggled downfall",
                null
            ],
            "downfall.usage": [
                "/toggledownfall",
                null
            ],
            "effect.clear.everything.success.multiple": [
                null,
                "Removed every effect from %s targets"
            ],
            "effect.clear.everything.success.single": [
                null,
                "Removed every effect from %s"
            ],
            "effect.clear.specific.success.multiple": [
                null,
                "Removed effect %s from %s targets"
            ],
            "effect.clear.specific.success.single": [
                null,
                "Removed effect %s from %s"
            ],
            "effect.failure.notActive": [
                "Couldn't take %1$s from %2$s as they do not have the effect",
                null
            ],
            "effect.failure.notActive.all": [
                "Couldn't take any effects from %s as they do not have any",
                null
            ],
            "effect.give.success.multiple": [
                null,
                "Applied effect %s to %s targets"
            ],
            "effect.give.success.single": [
                null,
                "Applied effect %s to %s"
            ],
            "effect.notFound": [
                "There is no such mob effect with ID %s",
                null
            ],
            "effect.success": [
                "Given %1$s (ID %2$s) * %3$s to %4$s for %5$s seconds",
                null
            ],
            "effect.success.removed": [
                "Took %1$s from %2$s",
                null
            ],
            "effect.success.removed.all": [
                "Took all effects from %s",
                null
            ],
            "effect.usage": [
                "/effect <player> <effect> [seconds] [amplifier] [hideParticles] OR /effect <player> clear",
                null
            ],
            "enchant.cantCombine": [
                "%1$s can't be combined with %2$s",
                null
            ],
            "enchant.cantEnchant": [
                "The selected enchantment can't be added to the target item",
                null
            ],
            "enchant.noItem": [
                "The target doesn't hold an item",
                null
            ],
            "enchant.notFound": [
                "There is no such enchantment with ID %s",
                null
            ],
            "enchant.success": [
                "Enchanting succeeded",
                null
            ],
            "enchant.usage": [
                "/enchant <player> <enchantment ID> [level]",
                null
            ],
            "entitydata.failed": [
                "The data tag did not change: %s",
                null
            ],
            "entitydata.noPlayers": [
                "%s is a player and cannot be changed",
                null
            ],
            "entitydata.query": [
                null,
                "Entity %s has entity data: %s"
            ],
            "entitydata.success": [
                "Entity data updated to: %s",
                "Entity %s has been changed to entity data: %s"
            ],
            "entitydata.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "entitydata.usage": [
                "/entitydata <entity> <dataTag>",
                null
            ],
            "execute.allInvocationsFailed": [
                "All invocations failed: '%s'",
                null
            ],
            "execute.failed": [
                "Failed to execute '%s' as %s",
                null
            ],
            "execute.usage": [
                "/execute <entity> <x> <y> <z> <command> OR /execute <entity> <x> <y> <z> detect <x> <y> <z> <block> <dataValue|-1|state|*> <command>",
                null
            ],
            "experience.add.levels.success.multiple": [
                null,
                "Gave %s experience levels to %s players"
            ],
            "experience.add.levels.success.single": [
                null,
                "Gave %s experience levels to %s"
            ],
            "experience.add.points.success.multiple": [
                null,
                "Gave %s experience points to %s players"
            ],
            "experience.add.points.success.single": [
                null,
                "Gave %s experience points to %s"
            ],
            "experience.query.levels": [
                null,
                "%s has %s experience levels"
            ],
            "experience.query.points": [
                null,
                "%s has %s experience points"
            ],
            "experience.set.levels.success.multiple": [
                null,
                "Set %s experience levels on %s players"
            ],
            "experience.set.levels.success.single": [
                null,
                "Set %s experience levels on %s"
            ],
            "experience.set.points.success.multiple": [
                null,
                "Set %s experience points on %s players"
            ],
            "experience.set.points.success.single": [
                null,
                "Set %s experience points on %s"
            ],
            "fill.failed": [
                "No blocks filled",
                null
            ],
            "fill.outOfWorld": [
                "Cannot place blocks outside of the world",
                null
            ],
            "fill.success": [
                "%s blocks filled",
                "Successfully filled %s blocks"
            ],
            "fill.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "fill.tooManyBlocks": [
                "Too many blocks in the specified area (%s > %s)",
                null
            ],
            "fill.usage": [
                "/fill <x1> <y1> <z1> <x2> <y2> <z2> <block> [dataValue|state] [oldBlockHandling] [dataTag]",
                null
            ],
            "function.skipped": [
                "Skipped execution of function '%1$s'",
                null
            ],
            "function.success": [
                "Executed %2$s command(s) from function '%1$s'",
                "Executed %s commands from function '%s'"
            ],
            "function.unknown": [
                "Unknown function '%s'",
                null
            ],
            "function.usage": [
                "/function <name> [if <selector>|unless <selector>]",
                null
            ],
            "gamemode.success.other": [
                "Set %s's game mode to %s",
                null
            ],
            "gamemode.success.self": [
                "Set own game mode to %s",
                null
            ],
            "gamemode.usage": [
                "/gamemode <mode> [player]",
                null
            ],
            "gamerule.nopermission": [
                "Only server owners can change '%s'",
                null
            ],
            "gamerule.norule": [
                "No game rule called '%s' is available",
                null
            ],
            "gamerule.query": [
                null,
                "Gamerule %s is currently set to: %s"
            ],
            "gamerule.set": [
                null,
                "Gamerule %s is now set to: %s"
            ],
            "gamerule.success": [
                "Game rule %s has been updated to %s",
                null
            ],
            "gamerule.usage": [
                "/gamerule <rule name> [value]",
                null
            ],
            "generic.blockstate.invalid": [
                "'%s' is not a state for block %s",
                null
            ],
            "generic.boolean.invalid": [
                "'%s' is not true or false",
                null
            ],
            "generic.entity.invalidType": [
                "Entity type '%s' is invalid",
                null
            ],
            "generic.entity.invalidUuid": [
                "The entity UUID '%s' is in an invalid format",
                null
            ],
            "generic.entity.notFound": [
                "Entity '%s' cannot be found",
                null
            ],
            "generic.exception": [
                "An unknown error occurred while attempting to perform this command",
                null
            ],
            "generic.notFound": [
                "Unknown command. Try /help for a list of commands",
                null
            ],
            "generic.num.invalid": [
                "'%s' is not a valid number",
                null
            ],
            "generic.num.tooBig": [
                "The number you have entered (%s) is too big, it must be at most %s",
                null
            ],
            "generic.num.tooSmall": [
                "The number you have entered (%s) is too small, it must be at least %s",
                null
            ],
            "generic.parameter.invalid": [
                "'%s' is not a valid parameter",
                null
            ],
            "generic.permission": [
                "You do not have permission to use this command",
                null
            ],
            "generic.player.notFound": [
                "Player '%s' cannot be found",
                null
            ],
            "generic.player.unspecified": [
                "You must specify which player you wish to perform this action on.",
                null
            ],
            "generic.selector.notFound": [
                "Selector '%s' found nothing",
                null
            ],
            "generic.selector_argument": [
                "Invalid selector argument: '%s'",
                null
            ],
            "generic.syntax": [
                "Invalid command syntax",
                null
            ],
            "generic.usage": [
                "Usage: %s",
                null
            ],
            "give.block.notFound": [
                "There is no such block with name %s",
                null
            ],
            "give.item.notFound": [
                "There is no such item with name %s",
                null
            ],
            "give.success": [
                "Given %s * %s to %s",
                null
            ],
            "give.success.multiple": [
                null,
                "Gave %s %s to %s players"
            ],
            "give.success.single": [
                null,
                "Gave %s %s to %s"
            ],
            "give.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "give.usage": [
                "/give <player> <item> [amount] [data] [dataTag]",
                null
            ],
            "help.footer": [
                "Tip: Use the <tab> key while typing a command to auto-complete the command or its arguments",
                null
            ],
            "help.header": [
                "--- Showing help page %s of %s (/help <page>) ---",
                null
            ],
            "help.usage": [
                "/help [page|command name]",
                null
            ],
            "kick.success": [
                "Kicked %s from the game",
                "Kicked %s: %s"
            ],
            "kick.success.reason": [
                "Kicked %s from the game: '%s'",
                null
            ],
            "kick.usage": [
                "/kick <player> [reason ...]",
                null
            ],
            "kill.success.multiple": [
                null,
                "Killed %s entities"
            ],
            "kill.success.single": [
                null,
                "Killed %s"
            ],
            "kill.successful": [
                "Killed %s",
                null
            ],
            "kill.usage": [
                "/kill [player|entity]",
                null
            ],
            "list.players": [
                null,
                "There are %s of a max %s players online: %s"
            ],
            "locate.failure": [
                "Unable to locate any %s feature",
                null
            ],
            "locate.success": [
                "Located %s at %s (y?) %s",
                "The nearest %s is at %s %s %s (%s blocks away)"
            ],
            "locate.usage": [
                "/locate <feature>",
                null
            ],
            "me.usage": [
                "/me <action ...>",
                null
            ],
            "message.sameTarget": [
                "You can't send a private message to yourself!",
                null
            ],
            "message.usage": [
                "/tell <player> <private message ...>",
                null
            ],
            "op.failed": [
                "Could not op %s",
                null
            ],
            "op.success": [
                "Opped %s",
                "Made %s a server operator"
            ],
            "op.usage": [
                "/op <player>",
                null
            ],
            "pardon.success": [
                null,
                "Unbanned %s"
            ],
            "pardonip.success": [
                null,
                "Unbanned IP %s"
            ],
            "particle.invalidParam": [
                "Invalid param given (%s)",
                null
            ],
            "particle.notFound": [
                "Unknown effect name (%s)",
                null
            ],
            "particle.success": [
                "Playing effect %s for %s times",
                "Displaying particle %s"
            ],
            "particle.usage": [
                "/particle <name> <x> <y> <z> <xd> <yd> <zd> <speed> [count] [mode] [player] [params]",
                null
            ],
            "players.list": [
                "There are %s/%s players online:",
                null
            ],
            "players.usage": [
                "/list",
                null
            ],
            "playsound.playerTooFar": [
                "Player %s is too far away to hear the sound",
                null
            ],
            "playsound.success": [
                "Played sound '%s' to %s",
                null
            ],
            "playsound.success.multiple": [
                null,
                "Played sound %s to %s players"
            ],
            "playsound.success.single": [
                null,
                "Played sound %s to %s"
            ],
            "playsound.unknownSoundSource": [
                "Source %s is unknown",
                null
            ],
            "playsound.usage": [
                "/playsound <sound> <source> <player> [x] [y] [z] [volume] [pitch] [minimumVolume]",
                null
            ],
            "publish.success": [
                null,
                "Multiplayer game is now hosted on port %s"
            ],
            "publish.usage": [
                "/publish",
                null
            ],
            "recipe.alreadyHave": [
                "Player %s already has a recipe for %s",
                null
            ],
            "recipe.dontHave": [
                "Player %s doesn't have the recipe for %s",
                null
            ],
            "recipe.give.success.all": [
                "Successfully given all recipes to %s",
                null
            ],
            "recipe.give.success.multiple": [
                null,
                "Unlocked %s recipes for %s players"
            ],
            "recipe.give.success.one": [
                "Successfully given %s the recipe for %s",
                null
            ],
            "recipe.give.success.single": [
                null,
                "Unlocked %s recipes for %s"
            ],
            "recipe.take.success.all": [
                "Successfully taken all recipes from %s",
                null
            ],
            "recipe.take.success.multiple": [
                null,
                "Took %s recipes from %s players"
            ],
            "recipe.take.success.one": [
                "Successfully removed the recipe for %s from %s",
                null
            ],
            "recipe.take.success.single": [
                null,
                "Took %s recipes from %s"
            ],
            "recipe.unknownrecipe": [
                "%s is an unknown recipe",
                null
            ],
            "recipe.unsupported": [
                "%s is an unsupported recipe",
                null
            ],
            "recipe.usage": [
                "/recipe <give|take> [player] <name|*>",
                null
            ],
            "reload.success": [
                "Successfully reloaded loot tables, advancements and functions",
                "Reloading!"
            ],
            "reload.usage": [
                "/reload",
                null
            ],
            "replaceitem.block.success": [
                null,
                "Replaced a slot at %s, %s, %s with %s"
            ],
            "replaceitem.block.usage": [
                "/replaceitem block <x> <y> <z> <slot> <item> [amount] [data] [dataTag]",
                null
            ],
            "replaceitem.entity.success.multiple": [
                null,
                "Replaced a slot on %s entities with %s"
            ],
            "replaceitem.entity.success.single": [
                null,
                "Replaced a slot on %s with %s"
            ],
            "replaceitem.entity.usage": [
                "/replaceitem entity <selector> <slot> <item> [amount] [data] [dataTag]",
                null
            ],
            "replaceitem.failed": [
                "Could not replace slot %s with %s * %s",
                null
            ],
            "replaceitem.noContainer": [
                "Block at %s, %s, %s is not a container",
                null
            ],
            "replaceitem.success": [
                "Replaced slot %s with %s * %s",
                null
            ],
            "replaceitem.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "replaceitem.usage": [
                "/replaceitem <entity|block> ...",
                null
            ],
            "save-off.alreadyOff": [
                "Saving is already turned off",
                null
            ],
            "save-off.usage": [
                "/save-off",
                null
            ],
            "save-on.alreadyOn": [
                "Saving is already turned on",
                null
            ],
            "save-on.usage": [
                "/save-on",
                null
            ],
            "save.disabled": [
                "Turned off world auto-saving",
                "Automatic saving is now disabled"
            ],
            "save.enabled": [
                "Turned on world auto-saving",
                "Automatic saving is now enabled"
            ],
            "save.failed": [
                "Saving failed: %s",
                null
            ],
            "save.flushEnd": [
                "Flushing completed",
                null
            ],
            "save.flushStart": [
                "Flushing all saves...",
                null
            ],
            "save.saving": [
                null,
                "Saving the game (this may take a moment!)"
            ],
            "save.start": [
                "Saving...",
                null
            ],
            "save.success": [
                "Saved the world",
                "Saved the game"
            ],
            "save.usage": [
                "/save-all [flush]",
                null
            ],
            "say.usage": [
                "/say <message ...>",
                null
            ],
            "scoreboard.allMatchesFailed": [
                "All matches failed",
                null
            ],
            "scoreboard.noMultiWildcard": [
                "Only one user wildcard allowed",
                null
            ],
            "scoreboard.objectiveNotFound": [
                "No objective was found by the name '%s'",
                null
            ],
            "scoreboard.objectiveReadOnly": [
                "The objective '%s' is read-only and cannot be set",
                null
            ],
            "scoreboard.objectives.add.alreadyExists": [
                "An objective with the name '%s' already exists",
                null
            ],
            "scoreboard.objectives.add.displayTooLong": [
                "The display name '%s' is too long for an objective, it can be at most %s characters long",
                null
            ],
            "scoreboard.objectives.add.success": [
                "Added new objective '%s' successfully",
                "Created new objective %s"
            ],
            "scoreboard.objectives.add.tooLong": [
                "The name '%s' is too long for an objective, it can be at most %s characters long",
                null
            ],
            "scoreboard.objectives.add.usage": [
                "/scoreboard objectives add <name> <criteriaType> [display name ...]",
                null
            ],
            "scoreboard.objectives.add.wrongType": [
                "Invalid objective criteria type '%s'",
                null
            ],
            "scoreboard.objectives.display.cleared": [
                null,
                "Cleared any objectives in display slot %s"
            ],
            "scoreboard.objectives.display.set": [
                null,
                "Set display slot %s to show objective %s"
            ],
            "scoreboard.objectives.list.count": [
                "Showing %s objective(s) on scoreboard:",
                null
            ],
            "scoreboard.objectives.list.empty": [
                "There are no objectives on the scoreboard",
                "There are no tracked objectives"
            ],
            "scoreboard.objectives.list.entry": [
                "- %s: displays as '%s' and is type '%s'",
                null
            ],
            "scoreboard.objectives.list.success": [
                null,
                "There are %s objectives: %s"
            ],
            "scoreboard.objectives.remove.success": [
                "Removed objective '%s' successfully",
                "Removed objective %s"
            ],
            "scoreboard.objectives.remove.usage": [
                "/scoreboard objectives remove <name>",
                null
            ],
            "scoreboard.objectives.setdisplay.invalidSlot": [
                "No such display slot '%s'",
                null
            ],
            "scoreboard.objectives.setdisplay.successCleared": [
                "Cleared objective display slot '%s'",
                null
            ],
            "scoreboard.objectives.setdisplay.successSet": [
                "Set the display objective in slot '%s' to '%s'",
                null
            ],
            "scoreboard.objectives.setdisplay.usage": [
                "/scoreboard objectives setdisplay <slot> [objective]",
                null
            ],
            "scoreboard.objectives.usage": [
                "/scoreboard objectives <list|add|remove|setdisplay> ...",
                null
            ],
            "scoreboard.players.add.success.multiple": [
                null,
                "Added %s to %s for %s entities"
            ],
            "scoreboard.players.add.success.single": [
                null,
                "Added %s to %s for %s (now %s)"
            ],
            "scoreboard.players.add.usage": [
                "/scoreboard players add <player> <objective> <count> [dataTag]",
                null
            ],
            "scoreboard.players.enable.noTrigger": [
                "Objective %s is not a trigger",
                null
            ],
            "scoreboard.players.enable.success": [
                "Enabled trigger %s for %s",
                null
            ],
            "scoreboard.players.enable.success.multiple": [
                null,
                "Enabled trigger %s for %s entities"
            ],
            "scoreboard.players.enable.success.single": [
                null,
                "Enabled trigger %s for %s"
            ],
            "scoreboard.players.enable.usage": [
                "/scoreboard players enable <player> <trigger>",
                null
            ],
            "scoreboard.players.get.success": [
                null,
                "%s has %s %s"
            ],
            "scoreboard.players.list.count": [
                "Showing %s tracked players on the scoreboard:",
                null
            ],
            "scoreboard.players.list.empty": [
                "There are no tracked players on the scoreboard",
                "There are no tracked entities"
            ],
            "scoreboard.players.list.entity.empty": [
                null,
                "%s has no scores to show"
            ],
            "scoreboard.players.list.entity.entry": [
                null,
                "%s: %s"
            ],
            "scoreboard.players.list.entity.success": [
                null,
                "%s has %s scores:"
            ],
            "scoreboard.players.list.player.count": [
                "Showing %s tracked objective(s) for %s:",
                null
            ],
            "scoreboard.players.list.player.empty": [
                "Player %s has no scores recorded",
                null
            ],
            "scoreboard.players.list.player.entry": [
                "- %2$s: %1$s (%3$s)",
                null
            ],
            "scoreboard.players.list.success": [
                null,
                "There are %s tracked entities: %s"
            ],
            "scoreboard.players.list.usage": [
                "/scoreboard players list [name]",
                null
            ],
            "scoreboard.players.name.tooLong": [
                "The name '%s' is too long for a player, it can be at most %s characters long",
                null
            ],
            "scoreboard.players.operation.invalidOperation": [
                "Invalid operation %s",
                null
            ],
            "scoreboard.players.operation.notFound": [
                "No %s score for %s found",
                null
            ],
            "scoreboard.players.operation.success": [
                "Operation applied successfully",
                null
            ],
            "scoreboard.players.operation.success.multiple": [
                null,
                "Updated %s for %s entities"
            ],
            "scoreboard.players.operation.success.single": [
                null,
                "Set %s for %s to %s"
            ],
            "scoreboard.players.operation.usage": [
                "/scoreboard players operation <targetName> <targetObjective> <operation> <selector> <objective>",
                null
            ],
            "scoreboard.players.remove.success.multiple": [
                null,
                "Removed %s from %s for %s entities"
            ],
            "scoreboard.players.remove.success.single": [
                null,
                "Removed %s from %s for %s (now %s)"
            ],
            "scoreboard.players.remove.usage": [
                "/scoreboard players remove <player> <objective> <count> [dataTag]",
                null
            ],
            "scoreboard.players.reset.all.multiple": [
                null,
                "Reset all scores for %s entities"
            ],
            "scoreboard.players.reset.all.single": [
                null,
                "Reset all scores for %s"
            ],
            "scoreboard.players.reset.specific.multiple": [
                null,
                "Reset %s for %s entities"
            ],
            "scoreboard.players.reset.specific.single": [
                null,
                "Reset %s for %s"
            ],
            "scoreboard.players.reset.success": [
                "Reset scores of player %s",
                null
            ],
            "scoreboard.players.reset.usage": [
                "/scoreboard players reset <player> [objective]",
                null
            ],
            "scoreboard.players.resetscore.success": [
                "Reset score %s of player %s",
                null
            ],
            "scoreboard.players.set.success": [
                "Set score of %s for player %s to %s",
                null
            ],
            "scoreboard.players.set.success.multiple": [
                null,
                "Set %s for %s entities to %s"
            ],
            "scoreboard.players.set.success.single": [
                null,
                "Set %s for %s to %s"
            ],
            "scoreboard.players.set.tagError": [
                "Could not parse dataTag, reason: %s",
                null
            ],
            "scoreboard.players.set.tagMismatch": [
                "The dataTag does not match for %s",
                null
            ],
            "scoreboard.players.set.usage": [
                "/scoreboard players set <player> <objective> <score> [dataTag]",
                null
            ],
            "scoreboard.players.tag.list": [
                "Tags on entity %s are:",
                null
            ],
            "scoreboard.players.tag.notFound": [
                "Entity didn't have the %s tag",
                null
            ],
            "scoreboard.players.tag.success.add": [
                "Tag %s added",
                null
            ],
            "scoreboard.players.tag.success.remove": [
                "Tag %s removed",
                null
            ],
            "scoreboard.players.tag.tagError": [
                "Players tag command failed, reason: %s",
                null
            ],
            "scoreboard.players.tag.tagMismatch": [
                "The dataTag does not match for %s",
                null
            ],
            "scoreboard.players.tag.tooMany": [
                "Can't add more than %s tags to an entity",
                null
            ],
            "scoreboard.players.tag.usage": [
                "/scoreboard players tag <player> <add|remove|list> <tagName> [dataTag]",
                null
            ],
            "scoreboard.players.test.failed": [
                "Score %s is NOT in range %s to %s",
                null
            ],
            "scoreboard.players.test.notFound": [
                "No %s score for %s found",
                null
            ],
            "scoreboard.players.test.success": [
                "Score %s is in range %s to %s",
                null
            ],
            "scoreboard.players.test.usage": [
                "/scoreboard players test <player> <objective> <min> [max]",
                null
            ],
            "scoreboard.players.usage": [
                "/scoreboard players <set|add|remove|reset|list|enable|test|operation|tag> ...",
                null
            ],
            "scoreboard.teamNotFound": [
                "No team was found by the name '%s'",
                null
            ],
            "scoreboard.teams.add.alreadyExists": [
                "A team with the name '%s' already exists",
                null
            ],
            "scoreboard.teams.add.displayTooLong": [
                "The display name '%s' is too long for a team, it can be at most %s characters long",
                null
            ],
            "scoreboard.teams.add.success": [
                "Added new team '%s' successfully",
                null
            ],
            "scoreboard.teams.add.tooLong": [
                "The name '%s' is too long for a team, it can be at most %s characters long",
                null
            ],
            "scoreboard.teams.add.usage": [
                "/scoreboard teams add <name> [display name ...]",
                null
            ],
            "scoreboard.teams.empty.alreadyEmpty": [
                "Team %s is already empty, cannot remove nonexistant players",
                null
            ],
            "scoreboard.teams.empty.success": [
                "Removed all %s player(s) from team %s",
                null
            ],
            "scoreboard.teams.empty.usage": [
                "/scoreboard teams empty <team>",
                null
            ],
            "scoreboard.teams.join.failure": [
                "Could not add %s player(s) to team %s: %s",
                null
            ],
            "scoreboard.teams.join.success": [
                "Added %s player(s) to team %s: %s",
                null
            ],
            "scoreboard.teams.join.usage": [
                "/scoreboard teams join <team> [player]",
                null
            ],
            "scoreboard.teams.leave.failure": [
                "Could not remove %s player(s) from their teams: %s",
                null
            ],
            "scoreboard.teams.leave.noTeam": [
                "You are not in a team",
                null
            ],
            "scoreboard.teams.leave.success": [
                "Removed %s player(s) from their teams: %s",
                null
            ],
            "scoreboard.teams.leave.usage": [
                "/scoreboard teams leave [player]",
                null
            ],
            "scoreboard.teams.list.count": [
                "Showing %s teams on the scoreboard:",
                null
            ],
            "scoreboard.teams.list.empty": [
                "There are no teams registered on the scoreboard",
                null
            ],
            "scoreboard.teams.list.entry": [
                "- %1$s: '%2$s' has %3$s players",
                null
            ],
            "scoreboard.teams.list.player.count": [
                "Showing %s player(s) in team %s:",
                null
            ],
            "scoreboard.teams.list.player.empty": [
                "Team %s has no players",
                null
            ],
            "scoreboard.teams.list.player.entry": [
                "- %2$s: %1$s (%3$s)",
                null
            ],
            "scoreboard.teams.list.usage": [
                "/scoreboard teams list [name]",
                null
            ],
            "scoreboard.teams.option.noValue": [
                "Valid values for option %s are: %s",
                null
            ],
            "scoreboard.teams.option.success": [
                "Set option %s for team %s to %s",
                null
            ],
            "scoreboard.teams.option.usage": [
                "/scoreboard teams option <team> <friendlyfire|color|seeFriendlyInvisibles|nametagVisibility|deathMessageVisibility|collisionRule> <value>",
                null
            ],
            "scoreboard.teams.remove.success": [
                "Removed team %s",
                null
            ],
            "scoreboard.teams.remove.usage": [
                "/scoreboard teams remove <name>",
                null
            ],
            "scoreboard.teams.usage": [
                "/scoreboard teams <list|add|remove|empty|join|leave|option> ...",
                null
            ],
            "scoreboard.usage": [
                "/scoreboard <objectives|players|teams> ...",
                null
            ],
            "seed.usage": [
                "/seed",
                null
            ],
            "setblock.failed": [
                "Unable to place block",
                null
            ],
            "setblock.noChange": [
                "The block couldn't be placed",
                null
            ],
            "setblock.notFound": [
                "There is no such block with ID/name %s",
                null
            ],
            "setblock.outOfWorld": [
                "Cannot place block outside of the world",
                null
            ],
            "setblock.success": [
                "Block placed",
                "Changed the block at %s, %s, %s"
            ],
            "setblock.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "setblock.usage": [
                "/setblock <x> <y> <z> <block> [dataValue|state] [oldBlockHandling] [dataTag]",
                null
            ],
            "setidletimeout.success": [
                "Successfully set the idle timeout to %s minutes.",
                "The player idle timeout is now %s seconds"
            ],
            "setidletimeout.usage": [
                "/setidletimeout <minutes>",
                null
            ],
            "setworldspawn.success": [
                "Set the world spawn point to (%s, %s, %s)",
                "Set the world spawn point to %s, %s, %s"
            ],
            "setworldspawn.usage": [
                "/setworldspawn [<x> <y> <z>]",
                null
            ],
            "spawnpoint.success": [
                "Set %s's spawn point to (%s, %s, %s)",
                null
            ],
            "spawnpoint.success.multiple": [
                null,
                "Set spawn point to %s, %s, %s for %s players"
            ],
            "spawnpoint.success.single": [
                null,
                "Set spawn point to %s, %s, %s for %s"
            ],
            "spawnpoint.usage": [
                "/spawnpoint [player] [<x> <y> <z>]",
                null
            ],
            "spreadplayers.failure.players": [
                "Could not spread %s player(s) around %s, %s (too many players for space - try using spread of at most %s)",
                null
            ],
            "spreadplayers.failure.teams": [
                "Could not spread %s team(s) around %s, %s (too many players for space - try using spread of at most %s)",
                null
            ],
            "spreadplayers.info.players": [
                "(Average distance between players is %s blocks apart after %s iterations)",
                null
            ],
            "spreadplayers.info.teams": [
                "(Average distance between teams is %s blocks apart after %s iterations)",
                null
            ],
            "spreadplayers.noop": [
                "No players found to spread",
                null
            ],
            "spreadplayers.spreading.players": [
                "Spreading %s player(s) %s blocks around %s, %s (min %s blocks apart)",
                null
            ],
            "spreadplayers.spreading.teams": [
                "Spreading %s team(s) %s blocks around %s, %s (min %s blocks apart)",
                null
            ],
            "spreadplayers.success.entities": [
                null,
                "Spread %s players around %s, %s with an average distance of %s blocks apart"
            ],
            "spreadplayers.success.players": [
                "Successfully spread %s player(s) around %s, %s",
                null
            ],
            "spreadplayers.success.teams": [
                "Successfully spread %s team(s) around %s, %s",
                "Spread %s teams around %s, %s with an average distance of %s blocks apart"
            ],
            "spreadplayers.usage": [
                "/spreadplayers <x> <z> <spreadDistance> <maxRange> <respectTeams true|false> <player ...>",
                null
            ],
            "stats.block.clear.usage": [
                "/stats block <x> <y> <z> clear <stat>",
                null
            ],
            "stats.block.set.usage": [
                "/stats block <x> <y> <z> set <stat> <selector> <objective>",
                null
            ],
            "stats.block.usage": [
                "/stats block <x> <y> <z> <mode> ...",
                null
            ],
            "stats.cleared": [
                "Cleared %s stats",
                null
            ],
            "stats.entity.clear.usage": [
                "/stats entity <selector> clear <stat>",
                null
            ],
            "stats.entity.set.usage": [
                "/stats entity <selector> set <stat> <selector> <objective>",
                null
            ],
            "stats.entity.usage": [
                "/stats entity <selector> <mode> ...",
                null
            ],
            "stats.failed": [
                "Invalid parameters",
                null
            ],
            "stats.noCompatibleBlock": [
                "Block at %s, %s, %s can not track stats",
                null
            ],
            "stats.success": [
                "Storing %s stats in %s on %s",
                null
            ],
            "stats.usage": [
                "/stats <entity|block> ...",
                null
            ],
            "stop.start": [
                "Stopping the server",
                null
            ],
            "stop.stopping": [
                null,
                "Stopping the server"
            ],
            "stop.usage": [
                "/stop",
                null
            ],
            "stopsound.success.all": [
                "Stopped all sounds for %s",
                null
            ],
            "stopsound.success.individualSound": [
                "Stopped sound '%s' with source '%s' for %s",
                null
            ],
            "stopsound.success.soundSource": [
                "Stopped source '%s' for %s",
                null
            ],
            "stopsound.success.source.any": [
                null,
                "Stopped all '%s' sounds"
            ],
            "stopsound.success.source.sound": [
                null,
                "Stopped sound '%s' on source '%s'"
            ],
            "stopsound.success.sourceless.any": [
                null,
                "Stopped all sounds"
            ],
            "stopsound.success.sourceless.sound": [
                null,
                "Stopped sound '%s'"
            ],
            "stopsound.unknownSoundSource": [
                "Source %s is unknown",
                null
            ],
            "stopsound.usage": [
                "/stopsound <player> [source] [sound]",
                null
            ],
            "summon.failed": [
                "Unable to summon object",
                null
            ],
            "summon.outOfWorld": [
                "Cannot summon the object out of the world",
                null
            ],
            "summon.success": [
                "Object successfully summoned",
                "Summoned new %s"
            ],
            "summon.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "summon.usage": [
                "/summon <entityname> [x] [y] [z] [dataTag]",
                null
            ],
            "tag.add.success.multiple": [
                null,
                "Added tag '%s' to %s entities"
            ],
            "tag.add.success.single": [
                null,
                "Added tag '%s' to %s"
            ],
            "tag.list.multiple.empty": [
                null,
                "There are no tags on the %s entities"
            ],
            "tag.list.multiple.success": [
                null,
                "The %s entities have %s total tags: %s"
            ],
            "tag.list.single.empty": [
                null,
                "%s has no tags"
            ],
            "tag.list.single.success": [
                null,
                "%s has %s tags: %s"
            ],
            "tag.remove.success.multiple": [
                null,
                "Removed tag '%s' from %s entities"
            ],
            "tag.remove.success.single": [
                null,
                "Removed tag '%s' from %s"
            ],
            "team.add.success": [
                null,
                "Created team %s"
            ],
            "team.empty.success": [
                null,
                "Removed %s members from team %s"
            ],
            "team.join.success.multiple": [
                null,
                "Added %s members to team %s"
            ],
            "team.join.success.single": [
                null,
                "Added %s to team %s"
            ],
            "team.leave.success.multiple": [
                null,
                "Removed %s members from any team"
            ],
            "team.leave.success.single": [
                null,
                "Removed %s from any team"
            ],
            "team.list.members.empty": [
                null,
                "There are no members on team %s"
            ],
            "team.list.members.success": [
                null,
                "Team %s has %s members: %s"
            ],
            "team.list.teams.empty": [
                null,
                "There are no teams"
            ],
            "team.list.teams.success": [
                null,
                "There are %s teams: %s"
            ],
            "team.option.collisionRule.success": [
                null,
                "Collision rule for team %s is now \"%s\""
            ],
            "team.option.color.success": [
                null,
                "Updated the color for team %s to %s"
            ],
            "team.option.deathMessageVisibility.success": [
                null,
                "Death message visibility for team %s is now \"%s\""
            ],
            "team.option.friendlyfire.disabled": [
                null,
                "Disabled friendly fire for team %s"
            ],
            "team.option.friendlyfire.enabled": [
                null,
                "Enabled friendly fire for team %s"
            ],
            "team.option.nametagVisibility.success": [
                null,
                "Nametag visibility for team %s is now \"%s\""
            ],
            "team.option.seeFriendlyInvisibles.disabled": [
                null,
                "Team %s can no longer see invisible teammates"
            ],
            "team.option.seeFriendlyInvisibles.enabled": [
                null,
                "Team %s can now see invisible teammates"
            ],
            "team.remove.success": [
                null,
                "Removed team %s"
            ],
            "teleport.success.coordinates": [
                "Teleported %s to %s, %s, %s",
                null
            ],
            "teleport.success.entity.multiple": [
                null,
                "Teleported %s to %s, %s, %s"
            ],
            "teleport.success.entity.single": [
                null,
                "Teleported %s to %s"
            ],
            "teleport.success.location.multiple": [
                null,
                "Teleported %s entities to %s, %s, %s"
            ],
            "teleport.success.location.single": [
                null,
                "Teleported %s entities to %s"
            ],
            "teleport.usage": [
                "/teleport <entity> <x> <y> <z> [<y-rot> <x-rot>]",
                null
            ],
            "tellraw.jsonException": [
                "Invalid json: %s",
                null
            ],
            "tellraw.usage": [
                "/tellraw <player> <raw json message>",
                null
            ],
            "testfor.failure": [
                "%s did not match the required data structure",
                null
            ],
            "testfor.success": [
                "Found %s",
                null
            ],
            "testfor.tagError": [
                "Data tag parsing failed: %s",
                null
            ],
            "testfor.usage": [
                "/testfor <player> [dataTag]",
                null
            ],
            "testforblock.failed.data": [
                "The block at %s, %s, %s had the data value of %s (expected: %s)",
                null
            ],
            "testforblock.failed.nbt": [
                "The block at %s, %s, %s did not have the required NBT keys",
                null
            ],
            "testforblock.failed.tile": [
                "The block at %s, %s, %s is %s (expected: %s)",
                null
            ],
            "testforblock.failed.tileEntity": [
                "The block at %s, %s, %s is not a block entity and cannot support tag matching",
                null
            ],
            "testforblock.outOfWorld": [
                "Cannot test for block outside of the world",
                null
            ],
            "testforblock.success": [
                "Successfully found the block at %s, %s, %s",
                null
            ],
            "testforblock.usage": [
                "/testforblock <x> <y> <z> <block> [dataValue|-1|state|*] [dataTag]",
                null
            ],
            "time.added": [
                "Added %s to the time",
                null
            ],
            "time.query": [
                "Time is %s",
                "The time is %s"
            ],
            "time.usage": [
                "/time <set|add|query> <value>",
                null
            ],
            "title.cleared.multiple": [
                null,
                "Cleared titles for %s players"
            ],
            "title.cleared.single": [
                null,
                "Cleared titles for %s"
            ],
            "title.reset.multiple": [
                null,
                "Reset title options for %s players"
            ],
            "title.reset.single": [
                null,
                "Reset title options for %s"
            ],
            "title.show.actionbar.multiple": [
                null,
                "Showing new actionbar title for %s players"
            ],
            "title.show.actionbar.single": [
                null,
                "Showing new actionbar title for %s"
            ],
            "title.show.subtitle.multiple": [
                null,
                "Showing new subtitle for %s players"
            ],
            "title.show.subtitle.single": [
                null,
                "Showing new subtitle for %s"
            ],
            "title.show.title.multiple": [
                null,
                "Showing new title for %s players"
            ],
            "title.show.title.single": [
                null,
                "Showing new title for %s"
            ],
            "title.success": [
                "Title command successfully executed",
                null
            ],
            "title.times.multiple": [
                null,
                "Changed title display times for %s players"
            ],
            "title.times.single": [
                null,
                "Changed title display times for %s"
            ],
            "title.usage": [
                "/title <player> title|subtitle|actionbar|clear|reset|times ...",
                null
            ],
            "title.usage.clear": [
                "/title <player> clear|reset",
                null
            ],
            "title.usage.times": [
                "/title <player> times <fadeIn> <stay> <fadeOut>",
                null
            ],
            "title.usage.title": [
                "/title <player> title|subtitle|actionbar <raw json title>",
                null
            ],
            "tp.notSameDimension": [
                "Unable to teleport because players are not in the same dimension",
                null
            ],
            "tp.success": [
                "Teleported %s to %s",
                null
            ],
            "tp.success.coordinates": [
                "Teleported %s to %s, %s, %s",
                null
            ],
            "tp.usage": [
                "/tp [target player] <destination player> OR /tp [target player] <x> <y> <z> [<yaw> <pitch>]",
                null
            ],
            "trigger.disabled": [
                "Trigger %s is not enabled",
                null
            ],
            "trigger.invalidMode": [
                "Invalid trigger mode %s",
                null
            ],
            "trigger.invalidObjective": [
                "Invalid trigger name %s",
                null
            ],
            "trigger.invalidPlayer": [
                "Only players can use the /trigger command",
                null
            ],
            "trigger.success": [
                "Trigger %s changed with %s %s",
                null
            ],
            "trigger.usage": [
                "/trigger <objective> <add|set> <value>",
                null
            ],
            "unban.failed": [
                "Could not unban player %s",
                null
            ],
            "unban.success": [
                "Unbanned player %s",
                null
            ],
            "unban.usage": [
                "/pardon <name>",
                null
            ],
            "unbanip.invalid": [
                "You have entered an invalid IP address",
                null
            ],
            "unbanip.success": [
                "Unbanned IP address %s",
                null
            ],
            "unbanip.usage": [
                "/pardon-ip <address>",
                null
            ],
            "weather.clear": [
                "Changing to clear weather",
                null
            ],
            "weather.rain": [
                "Changing to rainy weather",
                null
            ],
            "weather.set.clear": [
                null,
                "Set the weather to clear"
            ],
            "weather.set.rain": [
                null,
                "Set the weather to rain"
            ],
            "weather.set.thunder": [
                null,
                "Set the weather to rain & thunder"
            ],
            "weather.thunder": [
                "Changing to rain and thunder",
                null
            ],
            "weather.usage": [
                "/weather <clear|rain|thunder> [duration in seconds]",
                null
            ],
            "whitelist.add.failed": [
                "Could not add %s to the whitelist",
                null
            ],
            "whitelist.add.usage": [
                "/whitelist add <player>",
                null
            ],
            "whitelist.disabled": [
                "Turned off the whitelist",
                "Whitelist is now turned off."
            ],
            "whitelist.enabled": [
                "Turned on the whitelist",
                "Whitelist is now turned on."
            ],
            "whitelist.list": [
                "There are %s (out of %s seen) whitelisted players:",
                "There are %s whitelisted players: %s"
            ],
            "whitelist.none": [
                null,
                "There are no whitelisted players"
            ],
            "whitelist.remove.failed": [
                "Could not remove %s from the whitelist",
                null
            ],
            "whitelist.remove.usage": [
                "/whitelist remove <player>",
                null
            ],
            "whitelist.usage": [
                "/whitelist <on|off|list|add|remove|reload>",
                null
            ],
            "worldborder.add.usage": [
                "/worldborder add <sizeInBlocks> [timeInSeconds]",
                null
            ],
            "worldborder.center.success": [
                "Set world border center to %s, %s",
                "Set the center of the world border to %s, %s"
            ],
            "worldborder.center.usage": [
                "/worldborder center <x> <z>",
                null
            ],
            "worldborder.damage.amount.success": [
                "Set world border damage amount to %s per block (from %s per block)",
                "Set the world border damage time to %s seconds"
            ],
            "worldborder.damage.amount.usage": [
                "/worldborder damage amount <damagePerBlock>",
                null
            ],
            "worldborder.damage.buffer.success": [
                "Set world border damage buffer to %s blocks (from %s blocks)",
                "Set the world border damage buffer to %s blocks"
            ],
            "worldborder.damage.buffer.usage": [
                "/worldborder damage buffer <sizeInBlocks>",
                null
            ],
            "worldborder.damage.usage": [
                "/worldborder damage <buffer|amount> ...",
                null
            ],
            "worldborder.get": [
                null,
                "The world border is currently %s blocks wide"
            ],
            "worldborder.get.success": [
                "World border is currently %s blocks wide",
                null
            ],
            "worldborder.set.grow": [
                null,
                "Growing the world border to %s blocks wide over %s seconds"
            ],
            "worldborder.set.immediate": [
                null,
                "Set the world border to %s blocks wide"
            ],
            "worldborder.set.shrink": [
                null,
                "Shrinking the world border to %s blocks wide over %s seconds"
            ],
            "worldborder.set.success": [
                "Set world border to %s blocks wide (from %s blocks)",
                null
            ],
            "worldborder.set.usage": [
                "/worldborder set <sizeInBlocks> [timeInSeconds]",
                null
            ],
            "worldborder.setSlowly.grow.success": [
                "Growing world border to %s blocks wide (up from %s blocks) over %s seconds",
                null
            ],
            "worldborder.setSlowly.shrink.success": [
                "Shrinking world border to %s blocks wide (down from %s blocks) over %s seconds",
                null
            ],
            "worldborder.usage": [
                "/worldborder <set|center|damage|warning|get|add> ...",
                null
            ],
            "worldborder.warning.distance.success": [
                "Set world border warning to %s blocks away (from %s blocks)",
                "Set the world border warning distance to %s blocks"
            ],
            "worldborder.warning.distance.usage": [
                "/worldborder warning distance <distance>",
                null
            ],
            "worldborder.warning.time.success": [
                "Set world border warning to %s seconds away (from %s seconds)",
                "Set the world border warning time to %s seconds"
            ],
            "worldborder.warning.time.usage": [
                "/worldborder warning time <seconds>",
                null
            ],
            "worldborder.warning.usage": [
                "/worldborder warning <time|distance> ...",
                null
            ],
            "xp.failure.widthdrawXp": [
                "Cannot give player negative experience points",
                null
            ],
            "xp.success": [
                "Given %s experience to %s",
                null
            ],
            "xp.success.levels": [
                "Given %s levels to %s",
                null
            ],
            "xp.success.negative.levels": [
                "Taken %s levels from %s",
                null
            ],
            "xp.usage": [
                "/xp <amount> [player] OR /xp <amount>L [player]",
                null
            ]
        },
        "key": {
            "apostrophe": [
                "'",
                null
            ],
            "backslash": [
                "\\",
                null
            ],
            "backspace": [
                "Backspace",
                null
            ],
            "caps.lock": [
                "Caps Lock",
                null
            ],
            "comma": [
                ",",
                null
            ],
            "delete": [
                "Delete",
                null
            ],
            "down": [
                "Down Arrow",
                null
            ],
            "end": [
                "End",
                null
            ],
            "enter": [
                "Enter",
                null
            ],
            "equal": [
                "=",
                null
            ],
            "escape": [
                "Escape",
                null
            ],
            "f1": [
                "F1",
                null
            ],
            "f10": [
                "F10",
                null
            ],
            "f11": [
                "F11",
                null
            ],
            "f12": [
                "F12",
                null
            ],
            "f13": [
                "F13",
                null
            ],
            "f14": [
                "F14",
                null
            ],
            "f15": [
                "F15",
                null
            ],
            "f16": [
                "F16",
                null
            ],
            "f17": [
                "F17",
                null
            ],
            "f18": [
                "F18",
                null
            ],
            "f19": [
                "F19",
                null
            ],
            "f2": [
                "F2",
                null
            ],
            "f20": [
                "F20",
                null
            ],
            "f21": [
                "F21",
                null
            ],
            "f22": [
                "F22",
                null
            ],
            "f23": [
                "F23",
                null
            ],
            "f24": [
                "F24",
                null
            ],
            "f25": [
                "F25",
                null
            ],
            "f3": [
                "F3",
                null
            ],
            "f4": [
                "F4",
                null
            ],
            "f5": [
                "F5",
                null
            ],
            "f6": [
                "F6",
                null
            ],
            "f7": [
                "F7",
                null
            ],
            "f8": [
                "F8",
                null
            ],
            "f9": [
                "F9",
                null
            ],
            "grave.accent": [
                "`",
                null
            ],
            "home": [
                "Home",
                null
            ],
            "insert": [
                "Insert",
                null
            ],
            "keyboard.apostrophe": [
                null,
                "'"
            ],
            "keyboard.backslash": [
                null,
                "\\"
            ],
            "keyboard.backspace": [
                null,
                "Backspace"
            ],
            "keyboard.caps.lock": [
                null,
                "Caps Lock"
            ],
            "keyboard.comma": [
                null,
                ","
            ],
            "keyboard.delete": [
                null,
                "Delete"
            ],
            "keyboard.down": [
                null,
                "Down Arrow"
            ],
            "keyboard.end": [
                null,
                "End"
            ],
            "keyboard.enter": [
                null,
                "Enter"
            ],
            "keyboard.equal": [
                null,
                "="
            ],
            "keyboard.escape": [
                null,
                "Escape"
            ],
            "keyboard.f1": [
                null,
                "F1"
            ],
            "keyboard.f10": [
                null,
                "F10"
            ],
            "keyboard.f11": [
                null,
                "F11"
            ],
            "keyboard.f12": [
                null,
                "F12"
            ],
            "keyboard.f13": [
                null,
                "F13"
            ],
            "keyboard.f14": [
                null,
                "F14"
            ],
            "keyboard.f15": [
                null,
                "F15"
            ],
            "keyboard.f16": [
                null,
                "F16"
            ],
            "keyboard.f17": [
                null,
                "F17"
            ],
            "keyboard.f18": [
                null,
                "F18"
            ],
            "keyboard.f19": [
                null,
                "F19"
            ],
            "keyboard.f2": [
                null,
                "F2"
            ],
            "keyboard.f20": [
                null,
                "F20"
            ],
            "keyboard.f21": [
                null,
                "F21"
            ],
            "keyboard.f22": [
                null,
                "F22"
            ],
            "keyboard.f23": [
                null,
                "F23"
            ],
            "keyboard.f24": [
                null,
                "F24"
            ],
            "keyboard.f25": [
                null,
                "F25"
            ],
            "keyboard.f3": [
                null,
                "F3"
            ],
            "keyboard.f4": [
                null,
                "F4"
            ],
            "keyboard.f5": [
                null,
                "F5"
            ],
            "keyboard.f6": [
                null,
                "F6"
            ],
            "keyboard.f7": [
                null,
                "F7"
            ],
            "keyboard.f8": [
                null,
                "F8"
            ],
            "keyboard.f9": [
                null,
                "F9"
            ],
            "keyboard.grave.accent": [
                null,
                "`"
            ],
            "keyboard.home": [
                null,
                "Home"
            ],
            "keyboard.insert": [
                null,
                "Insert"
            ],
            "keyboard.keypad.0": [
                null,
                "Keypad 0"
            ],
            "keyboard.keypad.1": [
                null,
                "Keypad 1"
            ],
            "keyboard.keypad.2": [
                null,
                "Keypad 2"
            ],
            "keyboard.keypad.3": [
                null,
                "Keypad 3"
            ],
            "keyboard.keypad.4": [
                null,
                "Keypad 4"
            ],
            "keyboard.keypad.5": [
                null,
                "Keypad 5"
            ],
            "keyboard.keypad.6": [
                null,
                "Keypad 6"
            ],
            "keyboard.keypad.7": [
                null,
                "Keypad 7"
            ],
            "keyboard.keypad.8": [
                null,
                "Keypad 8"
            ],
            "keyboard.keypad.9": [
                null,
                "Keypad 9"
            ],
            "keyboard.keypad.add": [
                null,
                "Keypad +"
            ],
            "keyboard.keypad.decimal": [
                null,
                "Keypad Decimal"
            ],
            "keyboard.keypad.divide": [
                null,
                "Keypad /"
            ],
            "keyboard.keypad.enter": [
                null,
                "Keypad Enter"
            ],
            "keyboard.keypad.equal": [
                null,
                "Keypad ="
            ],
            "keyboard.keypad.multiply": [
                null,
                "Keypad *"
            ],
            "keyboard.keypad.subtract": [
                null,
                "Keypad -"
            ],
            "keyboard.left": [
                null,
                "Left Arrow"
            ],
            "keyboard.left.alt": [
                null,
                "Left Alt"
            ],
            "keyboard.left.bracket": [
                null,
                "["
            ],
            "keyboard.left.control": [
                null,
                "Left Control"
            ],
            "keyboard.left.shift": [
                null,
                "Left Shift"
            ],
            "keyboard.left.win": [
                null,
                "Left Win"
            ],
            "keyboard.menu": [
                null,
                "Menu"
            ],
            "keyboard.minus": [
                null,
                "-"
            ],
            "keyboard.num.lock": [
                null,
                "Num Lock"
            ],
            "keyboard.page.down": [
                null,
                "Page Down"
            ],
            "keyboard.page.up": [
                null,
                "Page Up"
            ],
            "keyboard.pause": [
                null,
                "Pause"
            ],
            "keyboard.period": [
                null,
                "."
            ],
            "keyboard.print.screen": [
                null,
                "Print Screen"
            ],
            "keyboard.right": [
                null,
                "Right Arrow"
            ],
            "keyboard.right.alt": [
                null,
                "Right Alt"
            ],
            "keyboard.right.bracket": [
                null,
                "]"
            ],
            "keyboard.right.control": [
                null,
                "Right Control"
            ],
            "keyboard.right.shift": [
                null,
                "Right Shift"
            ],
            "keyboard.right.win": [
                null,
                "Right Win"
            ],
            "keyboard.scroll.lock": [
                null,
                "Scroll Lock"
            ],
            "keyboard.semicolon": [
                null,
                ";"
            ],
            "keyboard.slash": [
                null,
                "/"
            ],
            "keyboard.space": [
                null,
                "Space"
            ],
            "keyboard.tab": [
                null,
                "Tab"
            ],
            "keyboard.unknown": [
                null,
                "Not bound"
            ],
            "keyboard.up": [
                null,
                "Up Arrow"
            ],
            "keyboard.world.1": [
                null,
                "World 1"
            ],
            "keyboard.world.2": [
                null,
                "World 2"
            ],
            "keypad.0": [
                "Keypad 0",
                null
            ],
            "keypad.1": [
                "Keypad 1",
                null
            ],
            "keypad.2": [
                "Keypad 2",
                null
            ],
            "keypad.3": [
                "Keypad 3",
                null
            ],
            "keypad.4": [
                "Keypad 4",
                null
            ],
            "keypad.5": [
                "Keypad 5",
                null
            ],
            "keypad.6": [
                "Keypad 6",
                null
            ],
            "keypad.7": [
                "Keypad 7",
                null
            ],
            "keypad.8": [
                "Keypad 8",
                null
            ],
            "keypad.9": [
                "Keypad 9",
                null
            ],
            "keypad.add": [
                "Keypad +",
                null
            ],
            "keypad.decimal": [
                "Keypad Decimal",
                null
            ],
            "keypad.divide": [
                "Keypad /",
                null
            ],
            "keypad.enter": [
                "Keypad Enter",
                null
            ],
            "keypad.equal": [
                "Keypad =",
                null
            ],
            "keypad.multiply": [
                "Keypad *",
                null
            ],
            "keypad.subtract": [
                "Keypad -",
                null
            ],
            "left": [
                "Left Arrow",
                "Strafe Left"
            ],
            "left.alt": [
                "Left Alt",
                null
            ],
            "left.bracket": [
                "[",
                null
            ],
            "left.control": [
                "Left Control",
                null
            ],
            "left.shift": [
                "Left Shift",
                null
            ],
            "left.win": [
                "Left Win",
                null
            ],
            "menu": [
                "Menu",
                null
            ],
            "minus": [
                "-",
                null
            ],
            "num.lock": [
                "Num Lock",
                null
            ],
            "page.down": [
                "Page Down",
                null
            ],
            "page.up": [
                "Page Up",
                null
            ],
            "pause": [
                "Pause",
                null
            ],
            "period": [
                ".",
                null
            ],
            "print.screen": [
                "Print Screen",
                null
            ],
            "right": [
                "Right Arrow",
                "Strafe Right"
            ],
            "right.alt": [
                "Right Alt",
                null
            ],
            "right.bracket": [
                "]",
                null
            ],
            "right.control": [
                "Right Control",
                null
            ],
            "right.shift": [
                "Right Shift",
                null
            ],
            "right.win": [
                "Right Win",
                null
            ],
            "scroll.lock": [
                "Scroll Lock",
                null
            ],
            "semicolon": [
                ";",
                null
            ],
            "slash": [
                "/",
                null
            ],
            "space": [
                "Space",
                null
            ],
            "tab": [
                "Tab",
                null
            ],
            "unknown": [
                "Not bound",
                null
            ],
            "up": [
                "Up Arrow",
                null
            ],
            "world.1": [
                "World 1",
                null
            ],
            "world.2": [
                "World 2",
                null
            ]
        },
        "options": {
            "guiScale.large": [
                "Large",
                null
            ],
            "guiScale.normal": [
                "Normal",
                null
            ],
            "guiScale.small": [
                "Small",
                null
            ]
        },
        "team": [
            null,
            {
                "collision.always": "Always",
                "collision.never": "Never",
                "collision.pushOtherTeams": "Push other teams",
                "collision.pushOwnTeam": "Push own team",
                "visibility.always": "Always",
                "visibility.hideForOtherTeams": "Hide for other teams",
                "visibility.hideForOwnTeam": "Hide for own team",
                "visibility.never": "Never"
            }
        ]
    },
    "packets": {
        "packet": {
            "PLAY_CLIENTBOUND_0E": [
                {
                    "class": "im.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 14,
                    "instructions": [
                        {
                            "field": "a.length",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.a",
                            "var": "var2"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "var2.length",
                            "var": "var3"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var4"
                        },
                        {
                            "condition": "var4 < var3",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var2[var4]",
                                    "var": "var5"
                                },
                                {
                                    "field": "var5",
                                    "operation": "write",
                                    "type": "string"
                                },
                                {
                                    "amount": "1",
                                    "field": "var4",
                                    "operation": "increment"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "hc.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 14,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "chatcomponent"
                        },
                        {
                            "field": "b.a()",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_0F": [
                {
                    "class": "in.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 15,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "chatcomponent"
                        },
                        {
                            "field": "b.a()",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "hd.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 15,
                    "instructions": [
                        {
                            "field": "a.a",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "a.b",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "b.length",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.b",
                            "var": "var2"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "var2.length",
                            "var": "var3"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var4"
                        },
                        {
                            "condition": "var4 < var3",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var2[var4]",
                                    "var": "var5"
                                },
                                {
                                    "field": "var5.b()",
                                    "operation": "write",
                                    "type": "short"
                                },
                                {
                                    "field": "ara.i.a(var5.c())",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "amount": "1",
                                    "field": "var4",
                                    "operation": "increment"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_10": [
                {
                    "class": "io.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 16,
                    "instructions": [
                        {
                            "field": "a.a",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "a.b",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "b.length",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.b",
                            "var": "var2"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "var2.length",
                            "var": "var3"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var4"
                        },
                        {
                            "condition": "var4 < var3",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var2[var4]",
                                    "var": "var5"
                                },
                                {
                                    "field": "var5.b()",
                                    "operation": "write",
                                    "type": "short"
                                },
                                {
                                    "field": "apz.i.a(var5.c())",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "amount": "1",
                                    "field": "var4",
                                    "operation": "increment"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "he.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 16,
                    "instructions": [],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_19": [
                {
                    "class": "ix.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 25,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "string"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "hn.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 25,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "identifier"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_22": [
                {
                    "class": "jg.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 34,
                    "instructions": [
                        {
                            "field": "a.c()",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "j",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "h",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "i",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "this.a.d()",
                            "var": "var2"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var3"
                        },
                        {
                            "condition": "var3 < var2",
                            "instructions": [
                                {
                                    "field": "k[var3]",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "amount": "1",
                                    "field": "var3",
                                    "operation": "increment"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "hw.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 34,
                    "instructions": [
                        {
                            "field": "j.b().e()",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "i",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "h",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "args": "packetbuffer",
                            "field": "j",
                            "method": "a(Lfp;)V",
                            "name": "a",
                            "operation": "interfacecall",
                            "target": "ef",
                            "type": "interface"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_49": [
                {
                    "class": "kq.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 73,
                    "instructions": [
                        {
                            "field": "rg.a.a(a)",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "ji.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 73,
                    "instructions": [
                        {
                            "condition": "b != null",
                            "instructions": [
                                {
                                    "condition": "a != null",
                                    "instructions": [
                                        {
                                            "field": "3",
                                            "operation": "write",
                                            "type": "byte"
                                        },
                                        {
                                            "field": "b",
                                            "operation": "write",
                                            "type": "enum"
                                        },
                                        {
                                            "field": "a",
                                            "operation": "write",
                                            "type": "identifier"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "instructions": [
                                        {
                                            "field": "1",
                                            "operation": "write",
                                            "type": "byte"
                                        },
                                        {
                                            "field": "b",
                                            "operation": "write",
                                            "type": "enum"
                                        }
                                    ],
                                    "operation": "else"
                                },
                                {
                                    "instructions": [
                                        {
                                            "condition": "a != null",
                                            "instructions": [
                                                {
                                                    "field": "2",
                                                    "operation": "write",
                                                    "type": "byte"
                                                },
                                                {
                                                    "field": "a",
                                                    "operation": "write",
                                                    "type": "identifier"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "instructions": [
                                                {
                                                    "field": "0",
                                                    "operation": "write",
                                                    "type": "byte"
                                                }
                                            ],
                                            "operation": "else"
                                        }
                                    ],
                                    "operation": "else"
                                }
                            ],
                            "operation": "if"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_4A": [
                {
                    "class": "kr.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 74,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "chatcomponent"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "chatcomponent"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jh.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 74,
                    "instructions": [
                        {
                            "field": "sg.a.a(a)",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_4B": [
                {
                    "class": "ks.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 75,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "varint"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jj.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 75,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "chatcomponent"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "chatcomponent"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_4C": [
                {
                    "class": "kt.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 76,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "boolean"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jk.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 76,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "varint"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_4D": [
                {
                    "class": "ku.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 77,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "b.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.b.entrySet().iterator()",
                            "var": "var2"
                        },
                        {
                            "condition": "var2.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((Map$Entry)var2.next())",
                                    "var": "var3"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((nf)var3.getKey())",
                                    "var": "var4"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((i$a)var3.getValue())",
                                    "var": "var5"
                                },
                                {
                                    "field": "var4",
                                    "operation": "write",
                                    "type": "identifier"
                                },
                                {
                                    "condition": "var5.a == null",
                                    "instructions": [
                                        {
                                            "field": "0",
                                            "operation": "write",
                                            "type": "boolean"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "instructions": [
                                        {
                                            "field": "1",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "field": "var5.a",
                                            "operation": "write",
                                            "type": "identifier"
                                        }
                                    ],
                                    "operation": "else"
                                },
                                {
                                    "condition": "var5.c == null",
                                    "instructions": [
                                        {
                                            "field": "0",
                                            "operation": "write",
                                            "type": "boolean"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "instructions": [
                                        {
                                            "field": "1",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "field": "var5.c.a",
                                            "operation": "write",
                                            "type": "chatcomponent"
                                        },
                                        {
                                            "field": "var5.c.b",
                                            "operation": "write",
                                            "type": "chatcomponent"
                                        },
                                        {
                                            "field": "var5.c.c",
                                            "operation": "write",
                                            "type": "itemstack"
                                        },
                                        {
                                            "field": "var5.c.e",
                                            "operation": "write",
                                            "type": "enum"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "0",
                                            "var": "var2"
                                        },
                                        {
                                            "condition": "var5.c.d != null",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 1)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "condition": "var5.c.f",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 2)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "condition": "var5.c.h",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 4)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "field": "var2",
                                            "operation": "write",
                                            "type": "int"
                                        },
                                        {
                                            "condition": "var5.c.d != null",
                                            "instructions": [
                                                {
                                                    "field": "var5.c.d",
                                                    "operation": "write",
                                                    "type": "identifier"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "field": "var5.c.i",
                                            "operation": "write",
                                            "type": "float"
                                        },
                                        {
                                            "field": "var5.c.j",
                                            "operation": "write",
                                            "type": "float"
                                        }
                                    ],
                                    "operation": "else"
                                },
                                {
                                    "field": "var5.e.size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var5.e.entrySet().iterator()",
                                    "var": "var2"
                                },
                                {
                                    "condition": "var2.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "((Map$Entry)var2.next())",
                                            "var": "var3"
                                        },
                                        {
                                            "field": "(String)var3.getKey()",
                                            "operation": "write",
                                            "type": "string"
                                        }
                                    ],
                                    "operation": "loop"
                                },
                                {
                                    "field": "var5.f.length",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var5.f",
                                    "var": "var2"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "var2.length",
                                    "var": "var3"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "0",
                                    "var": "var4"
                                },
                                {
                                    "condition": "var4 < var3",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "var2[var4]",
                                            "var": "var5"
                                        },
                                        {
                                            "field": "var5.length",
                                            "operation": "write",
                                            "type": "varint"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "var5",
                                            "var": "var6"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "var6.length",
                                            "var": "var7"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "0",
                                            "var": "var8"
                                        },
                                        {
                                            "condition": "var8 < var7",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "Object",
                                                    "value": "var6[var8]",
                                                    "var": "var9"
                                                },
                                                {
                                                    "field": "var9",
                                                    "operation": "write",
                                                    "type": "string"
                                                },
                                                {
                                                    "amount": "1",
                                                    "field": "var8",
                                                    "operation": "increment"
                                                }
                                            ],
                                            "operation": "loop"
                                        },
                                        {
                                            "amount": "1",
                                            "field": "var4",
                                            "operation": "increment"
                                        }
                                    ],
                                    "operation": "loop"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "c.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.c.iterator()",
                            "var": "var2"
                        },
                        {
                            "condition": "var2.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((nf)var2.next())",
                                    "var": "var3"
                                },
                                {
                                    "field": "var3",
                                    "operation": "write",
                                    "type": "identifier"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "d.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.d.entrySet().iterator()",
                            "var": "var2"
                        },
                        {
                            "condition": "var2.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((Map$Entry)var2.next())",
                                    "var": "var3"
                                },
                                {
                                    "field": "(nf)var3.getKey()",
                                    "operation": "write",
                                    "type": "identifier"
                                },
                                {
                                    "field": "((k)var3.getValue()).a.size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((k)var3.getValue()).a.entrySet().iterator()",
                                    "var": "var2"
                                },
                                {
                                    "condition": "var2.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "((Map$Entry)var2.next())",
                                            "var": "var3"
                                        },
                                        {
                                            "field": "(String)var3.getKey()",
                                            "operation": "write",
                                            "type": "string"
                                        },
                                        {
                                            "field": "(((o)var3.getValue()).c != null) ? 1 : 0",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "condition": "((o)var3.getValue()).c != null",
                                            "instructions": [
                                                {
                                                    "field": "((o)var3.getValue()).c.getTime()",
                                                    "operation": "write",
                                                    "type": "long"
                                                }
                                            ],
                                            "operation": "if"
                                        }
                                    ],
                                    "operation": "loop"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jl.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 77,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "g",
                            "operation": "write",
                            "type": "boolean"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_4E": [
                {
                    "class": "kv.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 78,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b.size()",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.b.iterator()",
                            "var": "var2"
                        },
                        {
                            "condition": "var2.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((kv$a)var2.next())",
                                    "var": "var3"
                                },
                                {
                                    "field": "var3.a()",
                                    "operation": "write",
                                    "type": "string"
                                },
                                {
                                    "field": "var3.b()",
                                    "operation": "write",
                                    "type": "double"
                                },
                                {
                                    "field": "var3.c().size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var3.c().iterator()",
                                    "var": "var4"
                                },
                                {
                                    "condition": "var4.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "((xh)var4.next())",
                                            "var": "var5"
                                        },
                                        {
                                            "field": "var5.a()",
                                            "operation": "write",
                                            "type": "uuid"
                                        },
                                        {
                                            "field": "var5.d()",
                                            "operation": "write",
                                            "type": "double"
                                        },
                                        {
                                            "field": "var5.c()",
                                            "operation": "write",
                                            "type": "byte"
                                        }
                                    ],
                                    "operation": "loop"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jm.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 78,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "b.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.b.entrySet().iterator()",
                            "var": "var2"
                        },
                        {
                            "condition": "var2.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((Map$Entry)var2.next())",
                                    "var": "var3"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((lw)var3.getKey())",
                                    "var": "var4"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((i$a)var3.getValue())",
                                    "var": "var5"
                                },
                                {
                                    "field": "var4",
                                    "operation": "write",
                                    "type": "identifier"
                                },
                                {
                                    "condition": "var5.a == null",
                                    "instructions": [
                                        {
                                            "field": "0",
                                            "operation": "write",
                                            "type": "boolean"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "instructions": [
                                        {
                                            "field": "1",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "field": "var5.a",
                                            "operation": "write",
                                            "type": "identifier"
                                        }
                                    ],
                                    "operation": "else"
                                },
                                {
                                    "condition": "var5.c == null",
                                    "instructions": [
                                        {
                                            "field": "0",
                                            "operation": "write",
                                            "type": "boolean"
                                        }
                                    ],
                                    "operation": "if"
                                },
                                {
                                    "instructions": [
                                        {
                                            "field": "1",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "field": "var5.c.a",
                                            "operation": "write",
                                            "type": "chatcomponent"
                                        },
                                        {
                                            "field": "var5.c.b",
                                            "operation": "write",
                                            "type": "chatcomponent"
                                        },
                                        {
                                            "field": "var5.c.c",
                                            "operation": "write",
                                            "type": "itemstack"
                                        },
                                        {
                                            "field": "var5.c.e",
                                            "operation": "write",
                                            "type": "enum"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "0",
                                            "var": "var2"
                                        },
                                        {
                                            "condition": "var5.c.d != null",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 1)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "condition": "var5.c.f",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 2)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "condition": "var5.c.h",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "int",
                                                    "value": "(var2 | 4)",
                                                    "var": "var2"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "field": "var2",
                                            "operation": "write",
                                            "type": "int"
                                        },
                                        {
                                            "condition": "var5.c.d != null",
                                            "instructions": [
                                                {
                                                    "field": "var5.c.d",
                                                    "operation": "write",
                                                    "type": "identifier"
                                                }
                                            ],
                                            "operation": "if"
                                        },
                                        {
                                            "field": "var5.c.i",
                                            "operation": "write",
                                            "type": "float"
                                        },
                                        {
                                            "field": "var5.c.j",
                                            "operation": "write",
                                            "type": "float"
                                        }
                                    ],
                                    "operation": "else"
                                },
                                {
                                    "field": "var5.e.size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var5.e.entrySet().iterator()",
                                    "var": "var2"
                                },
                                {
                                    "condition": "var2.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "((Map$Entry)var2.next())",
                                            "var": "var3"
                                        },
                                        {
                                            "field": "(String)var3.getKey()",
                                            "operation": "write",
                                            "type": "string"
                                        }
                                    ],
                                    "operation": "loop"
                                },
                                {
                                    "field": "var5.f.length",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var5.f",
                                    "var": "var2"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "var2.length",
                                    "var": "var3"
                                },
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "0",
                                    "var": "var4"
                                },
                                {
                                    "condition": "var4 < var3",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "var2[var4]",
                                            "var": "var5"
                                        },
                                        {
                                            "field": "var5.length",
                                            "operation": "write",
                                            "type": "varint"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "var5",
                                            "var": "var6"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "var6.length",
                                            "var": "var7"
                                        },
                                        {
                                            "operation": "store",
                                            "type": "int",
                                            "value": "0",
                                            "var": "var8"
                                        },
                                        {
                                            "condition": "var8 < var7",
                                            "instructions": [
                                                {
                                                    "operation": "store",
                                                    "type": "Object",
                                                    "value": "var6[var8]",
                                                    "var": "var9"
                                                },
                                                {
                                                    "field": "var9",
                                                    "operation": "write",
                                                    "type": "string"
                                                },
                                                {
                                                    "amount": "1",
                                                    "field": "var8",
                                                    "operation": "increment"
                                                }
                                            ],
                                            "operation": "loop"
                                        },
                                        {
                                            "amount": "1",
                                            "field": "var4",
                                            "operation": "increment"
                                        }
                                    ],
                                    "operation": "loop"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "c.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.c.iterator()",
                            "var": "var2"
                        },
                        {
                            "condition": "var2.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((lw)var2.next())",
                                    "var": "var3"
                                },
                                {
                                    "field": "var3",
                                    "operation": "write",
                                    "type": "identifier"
                                }
                            ],
                            "operation": "loop"
                        },
                        {
                            "field": "d.size()",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.d.entrySet().iterator()",
                            "var": "var2"
                        },
                        {
                            "condition": "var2.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((Map$Entry)var2.next())",
                                    "var": "var3"
                                },
                                {
                                    "field": "(lw)var3.getKey()",
                                    "operation": "write",
                                    "type": "identifier"
                                },
                                {
                                    "field": "((k)var3.getValue()).a.size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((k)var3.getValue()).a.entrySet().iterator()",
                                    "var": "var2"
                                },
                                {
                                    "condition": "var2.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "((Map$Entry)var2.next())",
                                            "var": "var3"
                                        },
                                        {
                                            "field": "(String)var3.getKey()",
                                            "operation": "write",
                                            "type": "string"
                                        },
                                        {
                                            "field": "(((o)var3.getValue()).c != null) ? 1 : 0",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "condition": "((o)var3.getValue()).c != null",
                                            "instructions": [
                                                {
                                                    "field": "((o)var3.getValue()).c.getTime()",
                                                    "operation": "write",
                                                    "type": "long"
                                                }
                                            ],
                                            "operation": "if"
                                        }
                                    ],
                                    "operation": "loop"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_4F": [
                {
                    "class": "kw.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 79,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jn.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 79,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b.size()",
                            "operation": "write",
                            "type": "int"
                        },
                        {
                            "operation": "store",
                            "type": "Object",
                            "value": "this.b.iterator()",
                            "var": "var2"
                        },
                        {
                            "condition": "var2.hasNext()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "((jn$a)var2.next())",
                                    "var": "var3"
                                },
                                {
                                    "field": "var3.a()",
                                    "operation": "write",
                                    "type": "string"
                                },
                                {
                                    "field": "var3.b()",
                                    "operation": "write",
                                    "type": "double"
                                },
                                {
                                    "field": "var3.c().size()",
                                    "operation": "write",
                                    "type": "varint"
                                },
                                {
                                    "operation": "store",
                                    "type": "Object",
                                    "value": "var3.c().iterator()",
                                    "var": "var4"
                                },
                                {
                                    "condition": "var4.hasNext()",
                                    "instructions": [
                                        {
                                            "operation": "store",
                                            "type": "Object",
                                            "value": "((yi)var4.next())",
                                            "var": "var5"
                                        },
                                        {
                                            "field": "var5.a()",
                                            "operation": "write",
                                            "type": "uuid"
                                        },
                                        {
                                            "field": "var5.d()",
                                            "operation": "write",
                                            "type": "double"
                                        },
                                        {
                                            "field": "var5.c()",
                                            "operation": "write",
                                            "type": "byte"
                                        }
                                    ],
                                    "operation": "loop"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_CLIENTBOUND_50": [
                null,
                {
                    "class": "jo.class",
                    "direction": "CLIENTBOUND",
                    "from_client": false,
                    "from_server": true,
                    "id": 80,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_01": [
                {
                    "class": "kz.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 1,
                    "instructions": [
                        {
                            "field": "org.apache.commons.lang3.StringUtils.substring(a, 0, 0x7fff)",
                            "operation": "write",
                            "type": "string"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "((this.c != null) ? 1 : 0)",
                            "var": "var2"
                        },
                        {
                            "field": "var2",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "condition": "var2",
                            "instructions": [
                                {
                                    "field": "c",
                                    "operation": "write",
                                    "type": "position"
                                }
                            ],
                            "operation": "if"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jr.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 1,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "string"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_02": [
                {
                    "class": "la.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 2,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "string"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "js.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 2,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_03": [
                {
                    "class": "lb.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 3,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jt.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 3,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "string"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_04": [
                {
                    "class": "lc.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 4,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "string"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "ju.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 4,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "short"
                        },
                        {
                            "field": "(c) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_05": [
                {
                    "class": "ld.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 5,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "short"
                        },
                        {
                            "field": "(c) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jv.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 5,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_06": [
                {
                    "class": "le.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 6,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jw.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 6,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "short"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "short"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "itemstack"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_07": [
                {
                    "class": "lf.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 7,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "short"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "short"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "itemstack"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jx.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 7,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_08": [
                {
                    "class": "lg.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 8,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jy.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 8,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "string"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "byte[]"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_09": [
                {
                    "class": "lh.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 9,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "string"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "byte[]"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "jz.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 9,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "condition": "b == jz$a.c",
                            "instructions": [
                                {
                                    "field": "(float)c.b",
                                    "operation": "write",
                                    "type": "float"
                                },
                                {
                                    "field": "(float)c.c",
                                    "operation": "write",
                                    "type": "float"
                                },
                                {
                                    "field": "(float)c.d",
                                    "operation": "write",
                                    "type": "float"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "b != jz$a.a",
                            "instructions": [
                                {
                                    "field": "d",
                                    "operation": "write",
                                    "type": "enum"
                                }
                            ],
                            "operation": "if"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_0A": [
                {
                    "class": "li.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 10,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "condition": "b == li$a.c",
                            "instructions": [
                                {
                                    "field": "(float)c.b",
                                    "operation": "write",
                                    "type": "float"
                                },
                                {
                                    "field": "(float)c.c",
                                    "operation": "write",
                                    "type": "float"
                                },
                                {
                                    "field": "(float)c.d",
                                    "operation": "write",
                                    "type": "float"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "b != li$a.a",
                            "instructions": [
                                {
                                    "field": "d",
                                    "operation": "write",
                                    "type": "enum"
                                }
                            ],
                            "operation": "if"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "ka.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 10,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "long"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_0B": [
                {
                    "class": "lj.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 11,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "long"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kb.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 11,
                    "instructions": [
                        {
                            "field": "(f) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_0C": [
                {
                    "class": "lk.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 12,
                    "instructions": [
                        {
                            "field": "(f) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kb$a.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 12,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "(f) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_0D": [
                {
                    "class": "lk$a.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 13,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "(f) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kb$b.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 13,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "(f) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_0E": [
                {
                    "class": "lk$b.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 14,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "(f) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kb$c.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 14,
                    "instructions": [
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "(f) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_0F": [
                {
                    "class": "lk$c.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 15,
                    "instructions": [
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "(f) ? 1 : 0",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kc.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 15,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_10": [
                {
                    "class": "ll.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 16,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "double"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kd.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 16,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "boolean"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_11": [
                {
                    "class": "lm.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 17,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "boolean"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "boolean"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "ke.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 17,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "amy.a(b)",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "boolean"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_12": [
                {
                    "class": "ln.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 18,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "alx.a(b)",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "boolean"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kf.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 18,
                    "instructions": [
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var2"
                        },
                        {
                            "condition": "a()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 1))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "b()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 2))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "c()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 4))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "d()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 0x8))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "field": "var2",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_13": [
                {
                    "class": "lo.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 19,
                    "instructions": [
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var2"
                        },
                        {
                            "condition": "a()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 1))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "b()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 2))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "c()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 4))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "d()",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 0x8))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "field": "var2",
                            "operation": "write",
                            "type": "byte"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kg.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 19,
                    "instructions": [
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "b.a()",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_14": [
                {
                    "class": "lp.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 20,
                    "instructions": [
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "b.a()",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kh.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 20,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "varint"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_15": [
                {
                    "class": "lq.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 21,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "varint"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "varint"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "ki.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 21,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var2"
                        },
                        {
                            "condition": "c",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 1))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "d",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 2))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "field": "var2",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_16": [
                {
                    "class": "lr.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 22,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var2"
                        },
                        {
                            "condition": "c",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 1))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "condition": "d",
                            "instructions": [
                                {
                                    "operation": "store",
                                    "type": "int",
                                    "value": "((byte)(var2 | 2))",
                                    "var": "var2"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "field": "var2",
                            "operation": "write",
                            "type": "byte"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kj.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 22,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "condition": "a == kj$a.a",
                            "instructions": [
                                {
                                    "field": "amy.a(b)",
                                    "operation": "write",
                                    "type": "int"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "instructions": [
                                {
                                    "condition": "a == kj$a.b",
                                    "instructions": [
                                        {
                                            "field": "c",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "field": "d",
                                            "operation": "write",
                                            "type": "boolean"
                                        }
                                    ],
                                    "operation": "if"
                                }
                            ],
                            "operation": "else"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_17": [
                {
                    "class": "ls.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 23,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "condition": "a == ls$a.a",
                            "instructions": [
                                {
                                    "field": "alx.a(b)",
                                    "operation": "write",
                                    "type": "int"
                                }
                            ],
                            "operation": "if"
                        },
                        {
                            "instructions": [
                                {
                                    "condition": "a == ls$a.b",
                                    "instructions": [
                                        {
                                            "field": "c",
                                            "operation": "write",
                                            "type": "boolean"
                                        },
                                        {
                                            "field": "d",
                                            "operation": "write",
                                            "type": "boolean"
                                        }
                                    ],
                                    "operation": "if"
                                }
                            ],
                            "operation": "else"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kk.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 23,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_18": [
                {
                    "class": "lt.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 24,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kl.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 24,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "condition": "a == kl$a.a",
                            "instructions": [
                                {
                                    "field": "b",
                                    "operation": "write",
                                    "type": "identifier"
                                }
                            ],
                            "operation": "if"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_19": [
                {
                    "class": "lu.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 25,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "condition": "a == lu$a.a",
                            "instructions": [
                                {
                                    "field": "b",
                                    "operation": "write",
                                    "type": "identifier"
                                }
                            ],
                            "operation": "if"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "km.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 25,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "short"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_1A": [
                {
                    "class": "lv.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 26,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "short"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kn.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 26,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "short"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "itemstack"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_1B": [
                {
                    "class": "lw.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 27,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "short"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "itemstack"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "ko.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 27,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var2"
                        },
                        {
                            "condition": "var2 < 4",
                            "instructions": [
                                {
                                    "field": "b[var2]",
                                    "operation": "write",
                                    "type": "string"
                                },
                                {
                                    "amount": "1",
                                    "field": "var2",
                                    "operation": "increment"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_1C": [
                {
                    "class": "lx.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 28,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "operation": "store",
                            "type": "int",
                            "value": "0",
                            "var": "var2"
                        },
                        {
                            "condition": "var2 < 4",
                            "instructions": [
                                {
                                    "field": "b[var2]",
                                    "operation": "write",
                                    "type": "string"
                                },
                                {
                                    "amount": "1",
                                    "field": "var2",
                                    "operation": "increment"
                                }
                            ],
                            "operation": "loop"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kp.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 28,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_1D": [
                {
                    "class": "ly.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 29,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kq.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 29,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "uuid"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_1E": [
                {
                    "class": "lz.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 30,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "uuid"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "kr.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 30,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_1F": [
                {
                    "class": "ma.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 31,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "position"
                        },
                        {
                            "field": "b",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "c",
                            "operation": "write",
                            "type": "enum"
                        },
                        {
                            "field": "d",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "e",
                            "operation": "write",
                            "type": "float"
                        },
                        {
                            "field": "f",
                            "operation": "write",
                            "type": "float"
                        }
                    ],
                    "state": "PLAY"
                },
                {
                    "class": "ks.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 31,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                }
            ],
            "PLAY_SERVERBOUND_20": [
                {
                    "class": "mb.class",
                    "direction": "SERVERBOUND",
                    "from_client": true,
                    "from_server": false,
                    "id": 32,
                    "instructions": [
                        {
                            "field": "a",
                            "operation": "write",
                            "type": "enum"
                        }
                    ],
                    "state": "PLAY"
                },
                null
            ]
        }
    },
    "recipes": {},
    "sounds": {},
    "stats": {},
    "tags": {},
    "tileentity": {
        "tileentities": {}
    },
    "version": {
        "data": [
            1445,
            1447
        ],
        "name": [
            "17w43b",
            "17w45a"
        ],
        "protocol": [
            342,
            343
        ]
    }
}