[
    {
        "classes": {
            "anvilchunkloader": "bht", 
            "biome.list": "auq", 
            "biome.superclass": "avm", 
            "block.list": "axx", 
            "block.superclass": "axw", 
            "blockstatecontainer": "bfz", 
            "chatcomponent": "hr", 
            "entity.list": "abl", 
            "entity.trackerentry": "se", 
            "enumfacing.plane": "ei$c", 
            "identifier": "nx", 
            "item.list": "apf", 
            "item.superclass": "apa", 
            "itemstack": "ape", 
            "metadata": "nq", 
            "nbtcompound": "gj", 
            "nethandler.client": "cib", 
            "nethandler.server": "sy", 
            "packet.connectionstate": "hh", 
            "packet.packetbuffer": "hi", 
            "position": "ec", 
            "recipe.superclass": "fq", 
            "sounds.event": "vd", 
            "sounds.list": "ve", 
            "tileentity.blockentitytag": "zh", 
            "tileentity.superclass": "bef"
        }, 
        "language": {
            "addServer": {
                "add": "Done", 
                "enterIp": "Server Address", 
                "enterName": "Server Name", 
                "hideAddress": "Hide Address", 
                "resourcePack": "Server Resource Packs", 
                "resourcePack.disabled": "Disabled", 
                "resourcePack.enabled": "Enabled", 
                "resourcePack.prompt": "Prompt", 
                "title": "Edit Server Info"
            }, 
            "advMode": {
                "allEntities": "Use \"@e\" to target all entities", 
                "allPlayers": "Use \"@a\" to target all players", 
                "command": "Console Command", 
                "mode.auto": "Repeat", 
                "mode.autoexec.bat": "Always Active", 
                "mode.conditional": "Conditional", 
                "mode.redstone": "Impulse", 
                "mode.redstoneTriggered": "Needs Redstone", 
                "mode.sequence": "Chain", 
                "mode.unconditional": "Unconditional", 
                "nearestPlayer": "Use \"@p\" to target nearest player", 
                "notAllowed": "Must be an opped player in creative mode", 
                "notEnabled": "Command blocks are not enabled on this server", 
                "previousOutput": "Previous Output", 
                "randomPlayer": "Use \"@r\" to target random player", 
                "self": "Use \"@s\" to target the executing entity", 
                "setCommand": "Set Console Command for Block", 
                "setCommand.success": "Command set: %s"
            }, 
            "advancements": {
                "adventure.adventuring_time.description": "Discover every biome", 
                "adventure.adventuring_time.title": "Adventuring Time", 
                "adventure.kill_a_mob.description": "Kill any hostile monster", 
                "adventure.kill_a_mob.title": "Monster Hunter", 
                "adventure.kill_all_mobs.description": "Kill one of every hostile monster", 
                "adventure.kill_all_mobs.title": "Monsters Hunted", 
                "adventure.root.description": "Adventure, exploration and combat", 
                "adventure.root.title": "Adventure", 
                "adventure.shoot_arrow.description": "Shoot something with a bow and arrow", 
                "adventure.shoot_arrow.title": "Take Aim", 
                "adventure.sleep_in_bed.description": "Change your respawn point", 
                "adventure.sleep_in_bed.title": "Sweet dreams", 
                "adventure.sniper_duel.description": "Kill a skeleton with an arrow from more than 50 meters", 
                "adventure.sniper_duel.title": "Sniper duel", 
                "adventure.summon_iron_golem.description": "Summon an Iron Golem to help defend a village", 
                "adventure.summon_iron_golem.title": "Hired Help", 
                "adventure.totem_of_undying.description": "Use a Totem of Undying to cheat death", 
                "adventure.totem_of_undying.title": "Postmortal", 
                "adventure.trade.description": "Successfully trade with a Villager", 
                "adventure.trade.title": "What a Deal!", 
                "empty": "There doesn't seem to be anything here...", 
                "end.dragon_breath.description": "Collect dragon's breath in a glass bottle", 
                "end.dragon_breath.title": "You Need a Mint", 
                "end.dragon_egg.description": "Hold the Dragon Egg", 
                "end.dragon_egg.title": "The Next Generation", 
                "end.elytra.description": "Find an Elytra", 
                "end.elytra.title": "Sky's the Limit", 
                "end.enter_end_gateway.description": "Escape the island", 
                "end.enter_end_gateway.title": "Remote Getaway", 
                "end.find_end_city.description": "Go on in, what could happen?", 
                "end.find_end_city.title": "The City at the End of the Game", 
                "end.kill_dragon.description": "Good luck", 
                "end.kill_dragon.title": "Free the End", 
                "end.levitate.description": "Levitate up 50 blocks from the attacks of a Shulker", 
                "end.levitate.title": "Great View From Up Here", 
                "end.respawn_dragon.description": "Respawn the ender dragon", 
                "end.respawn_dragon.title": "The End... Again...", 
                "end.root.description": "Or the beginning?", 
                "end.root.title": "The End", 
                "husbandry.balanced_diet.description": "Eat everything that is edible, even if it's not good for you", 
                "husbandry.balanced_diet.title": "A Balanced Diet", 
                "husbandry.break_diamond_hoe.description": "Completely use up a diamond hoe, and then reevaluate your life choices", 
                "husbandry.break_diamond_hoe.title": "Serious Dedication", 
                "husbandry.breed_all_animals.description": "Breed all the animals!", 
                "husbandry.breed_all_animals.title": "Two by Two", 
                "husbandry.breed_an_animal.description": "Breed two animals together", 
                "husbandry.breed_an_animal.title": "The Parrots and the Bats", 
                "husbandry.plant_seed.description": "Plant a seed and watch it grow", 
                "husbandry.plant_seed.title": "A Seedy Place", 
                "husbandry.root.description": "The world is full of friends and food", 
                "husbandry.root.title": "Husbandry", 
                "husbandry.tame_an_animal.description": "Tame an animal", 
                "husbandry.tame_an_animal.title": "Best Friends Forever", 
                "nether.all_effects.description": "Have every effect applied at the same time", 
                "nether.all_effects.title": "How Did We Get Here?", 
                "nether.all_potions.description": "Have every potion effect applied at the same time", 
                "nether.all_potions.title": "A Furious Cocktail", 
                "nether.brew_potion.description": "Brew a potion", 
                "nether.brew_potion.title": "Local Brewery", 
                "nether.create_beacon.description": "Construct and place a Beacon", 
                "nether.create_beacon.title": "Bring Home the Beacon", 
                "nether.create_full_beacon.description": "Bring a beacon to full power", 
                "nether.create_full_beacon.title": "Beaconator", 
                "nether.fast_travel.description": "Use the Nether to travel 7km in the Overworld", 
                "nether.fast_travel.title": "Subspace Bubble", 
                "nether.find_fortress.description": "Break your way into a Nether Fortress", 
                "nether.find_fortress.title": "A Terrible Fortress", 
                "nether.get_wither_skull.description": "Obtain a wither skeleton's skull", 
                "nether.get_wither_skull.title": "Spooky Scary Skeleton", 
                "nether.obtain_blaze_rod.description": "Relieve a Blaze of its rod", 
                "nether.obtain_blaze_rod.title": "Into Fire", 
                "nether.return_to_sender.description": "Destroy a Ghast with a fireball", 
                "nether.return_to_sender.title": "Return to Sender", 
                "nether.root.description": "Bring summer clothes", 
                "nether.root.title": "Nether", 
                "nether.summon_wither.description": "Summon the Wither", 
                "nether.summon_wither.title": "Withering Heights", 
                "nether.uneasy_alliance.description": "Rescue a Ghast from the Nether, bring it safely home to the Overworld... and then kill it.", 
                "nether.uneasy_alliance.title": "Uneasy Alliance", 
                "story.cure_zombie_villager.description": "Weaken and then cure a zombie villager", 
                "story.cure_zombie_villager.title": "Zombie Doctor", 
                "story.deflect_arrow.description": "Deflect an arrow with a shield", 
                "story.deflect_arrow.title": "Not Today, Thank You", 
                "story.enchant_item.description": "Enchant an item at an Enchanting Table", 
                "story.enchant_item.title": "Enchanter", 
                "story.enter_the_end.description": "Enter the End Portal", 
                "story.enter_the_end.title": "The End?", 
                "story.enter_the_nether.description": "Build, light and enter a Nether Portal", 
                "story.enter_the_nether.title": "We Need to Go Deeper", 
                "story.follow_ender_eye.description": "Follow an Ender Eye", 
                "story.follow_ender_eye.title": "Eye Spy", 
                "story.form_obsidian.description": "Form and mine a block of Obsidian", 
                "story.form_obsidian.title": "Ice Bucket Challenge", 
                "story.iron_tools.description": "Upgrade your pickaxe", 
                "story.iron_tools.title": "Isn't It Iron Pick", 
                "story.lava_bucket.description": "Fill a bucket with lava", 
                "story.lava_bucket.title": "Hot Stuff", 
                "story.mine_diamond.description": "Acquire diamonds", 
                "story.mine_diamond.title": "Diamonds!", 
                "story.mine_stone.description": "Mine stone with your new pickaxe", 
                "story.mine_stone.title": "Stone Age", 
                "story.obtain_armor.description": "Protect yourself with a piece of iron armor", 
                "story.obtain_armor.title": "Suit Up", 
                "story.root.description": "The heart and story of the game", 
                "story.root.title": "Minecraft", 
                "story.shiny_gear.description": "Diamond armor saves lives", 
                "story.shiny_gear.title": "Cover Me With Diamonds", 
                "story.smelt_iron.description": "Smelt an iron ingot", 
                "story.smelt_iron.title": "Acquire Hardware", 
                "story.upgrade_tools.description": "Construct a better pickaxe", 
                "story.upgrade_tools.title": "Getting an Upgrade", 
                "toast.challenge": "Challenge Complete!", 
                "toast.goal": "Goal Reached!", 
                "toast.task": "Advancement Made!"
            }, 
            "argument": {
                "entity.options.advancements.description": "Players with advancements", 
                "entity.options.distance.description": "Distance to entity", 
                "entity.options.dx.description": "Entities between x and dx", 
                "entity.options.dy.description": "Entities between y and dy", 
                "entity.options.dz.description": "Entities between z and dz", 
                "entity.options.gamemode.description": "Players with gamemode", 
                "entity.options.level.description": "Experience level", 
                "entity.options.limit.description": "Maximum number of entities to return", 
                "entity.options.name.description": "Entity name", 
                "entity.options.nbt.description": "Entities with NBT", 
                "entity.options.scores.description": "Entities with scores", 
                "entity.options.sort.description": "Sort the entities", 
                "entity.options.tag.description": "Entities with tag", 
                "entity.options.team.description": "Entities on team", 
                "entity.options.type.description": "Entities of type", 
                "entity.options.x.description": "x position", 
                "entity.options.x_rotation.description": "Entity's x rotation", 
                "entity.options.y.description": "y position", 
                "entity.options.y_rotation.description": "Entity's y rotation", 
                "entity.options.z.description": "z position", 
                "entity.selector.allEntities": "All entities", 
                "entity.selector.allPlayers": "All players", 
                "entity.selector.nearestPlayer": "Nearest player", 
                "entity.selector.randomPlayer": "Random player", 
                "entity.selector.self": "Current entity"
            }, 
            "attribute": {
                "modifier.equals.0": "%s %s", 
                "modifier.equals.1": "%s%% %s", 
                "modifier.equals.2": "%s%% %s", 
                "modifier.plus.0": "+%s %s", 
                "modifier.plus.1": "+%s%% %s", 
                "modifier.plus.2": "+%s%% %s", 
                "modifier.take.0": "-%s %s", 
                "modifier.take.1": "-%s%% %s", 
                "modifier.take.2": "-%s%% %s", 
                "name.generic.armor": "Armor", 
                "name.generic.armorToughness": "Armor Toughness", 
                "name.generic.attackDamage": "Attack Damage", 
                "name.generic.attackSpeed": "Attack Speed", 
                "name.generic.followRange": "Mob Follow Range", 
                "name.generic.knockbackResistance": "Knockback Resistance", 
                "name.generic.luck": "Luck", 
                "name.generic.maxHealth": "Max Health", 
                "name.generic.movementSpeed": "Speed", 
                "name.horse.jumpStrength": "Horse Jump Strength", 
                "name.zombie.spawnReinforcements": "Zombie Reinforcements"
            }, 
            "block": {
                "minecraft.acacia_bark": "Acacia Bark", 
                "minecraft.acacia_button": "Acacia Button", 
                "minecraft.acacia_door": "Acacia Door", 
                "minecraft.acacia_fence": "Acacia Fence", 
                "minecraft.acacia_fence_gate": "Acacia Fence Gate", 
                "minecraft.acacia_leaves": "Acacia Leaves", 
                "minecraft.acacia_log": "Acacia Log", 
                "minecraft.acacia_planks": "Acacia Planks", 
                "minecraft.acacia_pressure_plate": "Acacia Pressure Plate", 
                "minecraft.acacia_sapling": "Acacia Sapling", 
                "minecraft.acacia_slab": "Acacia Slab", 
                "minecraft.acacia_stairs": "Acacia Stairs", 
                "minecraft.acacia_trapdoor": "Acacia Trapdoor", 
                "minecraft.activator_rail": "Activator Rail", 
                "minecraft.air": "Air", 
                "minecraft.allium": "Allium", 
                "minecraft.andesite": "Andesite", 
                "minecraft.anvil": "Anvil", 
                "minecraft.attached_melon_stem": "Attached Melon Stem", 
                "minecraft.attached_pumpkin_stem": "Attached Pumpkin Stem", 
                "minecraft.azure_bluet": "Azure Bluet", 
                "minecraft.banner": "Banner", 
                "minecraft.banner.border.black": "Black Bordure", 
                "minecraft.banner.border.blue": "Blue Bordure", 
                "minecraft.banner.border.brown": "Brown Bordure", 
                "minecraft.banner.border.cyan": "Cyan Bordure", 
                "minecraft.banner.border.gray": "Gray Bordure", 
                "minecraft.banner.border.green": "Green Bordure", 
                "minecraft.banner.border.light_blue": "Light Blue Bordure", 
                "minecraft.banner.border.light_gray": "Light Gray Bordure", 
                "minecraft.banner.border.lime": "Lime Bordure", 
                "minecraft.banner.border.magenta": "Magenta Bordure", 
                "minecraft.banner.border.orange": "Orange Bordure", 
                "minecraft.banner.border.pink": "Pink Bordure", 
                "minecraft.banner.border.purple": "Purple Bordure", 
                "minecraft.banner.border.red": "Red Bordure", 
                "minecraft.banner.border.white": "White Bordure", 
                "minecraft.banner.border.yellow": "Yellow Bordure", 
                "minecraft.banner.bricks.black": "Black Field Masoned", 
                "minecraft.banner.bricks.blue": "Blue Field Masoned", 
                "minecraft.banner.bricks.brown": "Brown Field Masoned", 
                "minecraft.banner.bricks.cyan": "Cyan Field Masoned", 
                "minecraft.banner.bricks.gray": "Gray Field Masoned", 
                "minecraft.banner.bricks.green": "Green Field Masoned", 
                "minecraft.banner.bricks.light_blue": "Light Blue Field Masoned", 
                "minecraft.banner.bricks.light_gray": "Light Gray Field Masoned", 
                "minecraft.banner.bricks.lime": "Lime Field Masoned", 
                "minecraft.banner.bricks.magenta": "Magenta Field Masoned", 
                "minecraft.banner.bricks.orange": "Orange Field Masoned", 
                "minecraft.banner.bricks.pink": "Pink Field Masoned", 
                "minecraft.banner.bricks.purple": "Purple Field Masoned", 
                "minecraft.banner.bricks.red": "Red Field Masoned", 
                "minecraft.banner.bricks.white": "White Field Masoned", 
                "minecraft.banner.bricks.yellow": "Yellow Field Masoned", 
                "minecraft.banner.circle.black": "Black Roundel", 
                "minecraft.banner.circle.blue": "Blue Roundel", 
                "minecraft.banner.circle.brown": "Brown Roundel", 
                "minecraft.banner.circle.cyan": "Cyan Roundel", 
                "minecraft.banner.circle.gray": "Gray Roundel", 
                "minecraft.banner.circle.green": "Green Roundel", 
                "minecraft.banner.circle.light_blue": "Light Blue Roundel", 
                "minecraft.banner.circle.light_gray": "Light Gray Roundel", 
                "minecraft.banner.circle.lime": "Lime Roundel", 
                "minecraft.banner.circle.magenta": "Magenta Roundel", 
                "minecraft.banner.circle.orange": "Orange Roundel", 
                "minecraft.banner.circle.pink": "Pink Roundel", 
                "minecraft.banner.circle.purple": "Purple Roundel", 
                "minecraft.banner.circle.red": "Red Roundel", 
                "minecraft.banner.circle.white": "White Roundel", 
                "minecraft.banner.circle.yellow": "Yellow Roundel", 
                "minecraft.banner.creeper.black": "Black Creeper Charge", 
                "minecraft.banner.creeper.blue": "Blue Creeper Charge", 
                "minecraft.banner.creeper.brown": "Brown Creeper Charge", 
                "minecraft.banner.creeper.cyan": "Cyan Creeper Charge", 
                "minecraft.banner.creeper.gray": "Gray Creeper Charge", 
                "minecraft.banner.creeper.green": "Green Creeper Charge", 
                "minecraft.banner.creeper.light_blue": "Light Blue Creeper Charge", 
                "minecraft.banner.creeper.light_gray": "Light Gray Creeper Charge", 
                "minecraft.banner.creeper.lime": "Lime Creeper Charge", 
                "minecraft.banner.creeper.magenta": "Magenta Creeper Charge", 
                "minecraft.banner.creeper.orange": "Orange Creeper Charge", 
                "minecraft.banner.creeper.pink": "Pink Creeper Charge", 
                "minecraft.banner.creeper.purple": "Purple Creeper Charge", 
                "minecraft.banner.creeper.red": "Red Creeper Charge", 
                "minecraft.banner.creeper.white": "White Creeper Charge", 
                "minecraft.banner.creeper.yellow": "Yellow Creeper Charge", 
                "minecraft.banner.cross.black": "Black Saltire", 
                "minecraft.banner.cross.blue": "Blue Saltire", 
                "minecraft.banner.cross.brown": "Brown Saltire", 
                "minecraft.banner.cross.cyan": "Cyan Saltire", 
                "minecraft.banner.cross.gray": "Gray Saltire", 
                "minecraft.banner.cross.green": "Green Saltire", 
                "minecraft.banner.cross.light_blue": "Light Blue Saltire", 
                "minecraft.banner.cross.light_gray": "Light Gray Saltire", 
                "minecraft.banner.cross.lime": "Lime Saltire", 
                "minecraft.banner.cross.magenta": "Magenta Saltire", 
                "minecraft.banner.cross.orange": "Orange Saltire", 
                "minecraft.banner.cross.pink": "Pink Saltire", 
                "minecraft.banner.cross.purple": "Purple Saltire", 
                "minecraft.banner.cross.red": "Red Saltire", 
                "minecraft.banner.cross.white": "White Saltire", 
                "minecraft.banner.cross.yellow": "Yellow Saltire", 
                "minecraft.banner.curly_border.black": "Black Bordure Indented", 
                "minecraft.banner.curly_border.blue": "Blue Bordure Indented", 
                "minecraft.banner.curly_border.brown": "Brown Bordure Indented", 
                "minecraft.banner.curly_border.cyan": "Cyan Bordure Indented", 
                "minecraft.banner.curly_border.gray": "Gray Bordure Indented", 
                "minecraft.banner.curly_border.green": "Green Bordure Indented", 
                "minecraft.banner.curly_border.light_blue": "Light Blue Bordure Indented", 
                "minecraft.banner.curly_border.light_gray": "Light Gray Bordure Indented", 
                "minecraft.banner.curly_border.lime": "Lime Bordure Indented", 
                "minecraft.banner.curly_border.magenta": "Magenta Bordure Indented", 
                "minecraft.banner.curly_border.orange": "Orange Bordure Indented", 
                "minecraft.banner.curly_border.pink": "Pink Bordure Indented", 
                "minecraft.banner.curly_border.purple": "Purple Bordure Indented", 
                "minecraft.banner.curly_border.red": "Red Bordure Indented", 
                "minecraft.banner.curly_border.white": "White Bordure Indented", 
                "minecraft.banner.curly_border.yellow": "Yellow Bordure Indented", 
                "minecraft.banner.diagonal_left.black": "Black Per Bend Sinister", 
                "minecraft.banner.diagonal_left.blue": "Blue Per Bend Sinister", 
                "minecraft.banner.diagonal_left.brown": "Brown Per Bend Sinister", 
                "minecraft.banner.diagonal_left.cyan": "Cyan Per Bend Sinister", 
                "minecraft.banner.diagonal_left.gray": "Gray Per Bend Sinister", 
                "minecraft.banner.diagonal_left.green": "Green Per Bend Sinister", 
                "minecraft.banner.diagonal_left.light_blue": "Light Blue Per Bend Sinister", 
                "minecraft.banner.diagonal_left.light_gray": "Light Gray Per Bend Sinister", 
                "minecraft.banner.diagonal_left.lime": "Lime Per Bend Sinister", 
                "minecraft.banner.diagonal_left.magenta": "Magenta Per Bend Sinister", 
                "minecraft.banner.diagonal_left.orange": "Orange Per Bend Sinister", 
                "minecraft.banner.diagonal_left.pink": "Pink Per Bend Sinister", 
                "minecraft.banner.diagonal_left.purple": "Purple Per Bend Sinister", 
                "minecraft.banner.diagonal_left.red": "Red Per Bend Sinister", 
                "minecraft.banner.diagonal_left.white": "White Per Bend Sinister", 
                "minecraft.banner.diagonal_left.yellow": "Yellow Per Bend Sinister", 
                "minecraft.banner.diagonal_right.black": "Black Per Bend", 
                "minecraft.banner.diagonal_right.blue": "Blue Per Bend", 
                "minecraft.banner.diagonal_right.brown": "Brown Per Bend", 
                "minecraft.banner.diagonal_right.cyan": "Cyan Per Bend", 
                "minecraft.banner.diagonal_right.gray": "Gray Per Bend", 
                "minecraft.banner.diagonal_right.green": "Green Per Bend", 
                "minecraft.banner.diagonal_right.light_blue": "Light Blue Per Bend", 
                "minecraft.banner.diagonal_right.light_gray": "Light Gray Per Bend", 
                "minecraft.banner.diagonal_right.lime": "Lime Per Bend", 
                "minecraft.banner.diagonal_right.magenta": "Magenta Per Bend", 
                "minecraft.banner.diagonal_right.orange": "Orange Per Bend", 
                "minecraft.banner.diagonal_right.pink": "Pink Per Bend", 
                "minecraft.banner.diagonal_right.purple": "Purple Per Bend", 
                "minecraft.banner.diagonal_right.red": "Red Per Bend", 
                "minecraft.banner.diagonal_right.white": "White Per Bend", 
                "minecraft.banner.diagonal_right.yellow": "Yellow Per Bend", 
                "minecraft.banner.diagonal_up_left.black": "Black Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.blue": "Blue Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.brown": "Brown Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.cyan": "Cyan Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.gray": "Gray Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.green": "Green Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.light_blue": "Light Blue Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.light_gray": "Light Gray Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.lime": "Lime Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.magenta": "Magenta Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.orange": "Orange Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.pink": "Pink Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.purple": "Purple Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.red": "Red Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.white": "White Per Bend Inverted", 
                "minecraft.banner.diagonal_up_left.yellow": "Yellow Per Bend Inverted", 
                "minecraft.banner.diagonal_up_right.black": "Black Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.blue": "Blue Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.brown": "Brown Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.cyan": "Cyan Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.gray": "Gray Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.green": "Green Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.light_blue": "Light Blue Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.light_gray": "Light Gray Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.lime": "Lime Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.magenta": "Magenta Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.orange": "Orange Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.pink": "Pink Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.purple": "Purple Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.red": "Red Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.white": "White Per Bend Sinister Inverted", 
                "minecraft.banner.diagonal_up_right.yellow": "Yellow Per Bend Sinister Inverted", 
                "minecraft.banner.flower.black": "Black Flower Charge", 
                "minecraft.banner.flower.blue": "Blue Flower Charge", 
                "minecraft.banner.flower.brown": "Brown Flower Charge", 
                "minecraft.banner.flower.cyan": "Cyan Flower Charge", 
                "minecraft.banner.flower.gray": "Gray Flower Charge", 
                "minecraft.banner.flower.green": "Green Flower Charge", 
                "minecraft.banner.flower.light_blue": "Light Blue Flower Charge", 
                "minecraft.banner.flower.light_gray": "Light Gray Flower Charge", 
                "minecraft.banner.flower.lime": "Lime Flower Charge", 
                "minecraft.banner.flower.magenta": "Magenta Flower Charge", 
                "minecraft.banner.flower.orange": "Orange Flower Charge", 
                "minecraft.banner.flower.pink": "Pink Flower Charge", 
                "minecraft.banner.flower.purple": "Purple Flower Charge", 
                "minecraft.banner.flower.red": "Red Flower Charge", 
                "minecraft.banner.flower.white": "White Flower Charge", 
                "minecraft.banner.flower.yellow": "Yellow Flower Charge", 
                "minecraft.banner.gradient.black": "Black Gradient", 
                "minecraft.banner.gradient.blue": "Blue Gradient", 
                "minecraft.banner.gradient.brown": "Brown Gradient", 
                "minecraft.banner.gradient.cyan": "Cyan Gradient", 
                "minecraft.banner.gradient.gray": "Gray Gradient", 
                "minecraft.banner.gradient.green": "Green Gradient", 
                "minecraft.banner.gradient.light_blue": "Light Blue Gradient", 
                "minecraft.banner.gradient.light_gray": "Light Gray Gradient", 
                "minecraft.banner.gradient.lime": "Lime Gradient", 
                "minecraft.banner.gradient.magenta": "Magenta Gradient", 
                "minecraft.banner.gradient.orange": "Orange Gradient", 
                "minecraft.banner.gradient.pink": "Pink Gradient", 
                "minecraft.banner.gradient.purple": "Purple Gradient", 
                "minecraft.banner.gradient.red": "Red Gradient", 
                "minecraft.banner.gradient.white": "White Gradient", 
                "minecraft.banner.gradient.yellow": "Yellow Gradient", 
                "minecraft.banner.gradient_up.black": "Black Base Gradient", 
                "minecraft.banner.gradient_up.blue": "Blue Base Gradient", 
                "minecraft.banner.gradient_up.brown": "Brown Base Gradient", 
                "minecraft.banner.gradient_up.cyan": "Cyan Base Gradient", 
                "minecraft.banner.gradient_up.gray": "Gray Base Gradient", 
                "minecraft.banner.gradient_up.green": "Green Base Gradient", 
                "minecraft.banner.gradient_up.light_blue": "Light Blue Base Gradient", 
                "minecraft.banner.gradient_up.light_gray": "Light Gray Base Gradient", 
                "minecraft.banner.gradient_up.lime": "Lime Base Gradient", 
                "minecraft.banner.gradient_up.magenta": "Magenta Base Gradient", 
                "minecraft.banner.gradient_up.orange": "Orange Base Gradient", 
                "minecraft.banner.gradient_up.pink": "Pink Base Gradient", 
                "minecraft.banner.gradient_up.purple": "Purple Base Gradient", 
                "minecraft.banner.gradient_up.red": "Red Base Gradient", 
                "minecraft.banner.gradient_up.white": "White Base Gradient", 
                "minecraft.banner.gradient_up.yellow": "Yellow Base Gradient", 
                "minecraft.banner.half_horizontal.black": "Black Per Fess", 
                "minecraft.banner.half_horizontal.blue": "Blue Per Fess", 
                "minecraft.banner.half_horizontal.brown": "Brown Per Fess", 
                "minecraft.banner.half_horizontal.cyan": "Cyan Per Fess", 
                "minecraft.banner.half_horizontal.gray": "Gray Per Fess", 
                "minecraft.banner.half_horizontal.green": "Green Per Fess", 
                "minecraft.banner.half_horizontal.light_blue": "Light Blue Per Fess", 
                "minecraft.banner.half_horizontal.light_gray": "Light Gray Per Fess", 
                "minecraft.banner.half_horizontal.lime": "Lime Per Fess", 
                "minecraft.banner.half_horizontal.magenta": "Magenta Per Fess", 
                "minecraft.banner.half_horizontal.orange": "Orange Per Fess", 
                "minecraft.banner.half_horizontal.pink": "Pink Per Fess", 
                "minecraft.banner.half_horizontal.purple": "Purple Per Fess", 
                "minecraft.banner.half_horizontal.red": "Red Per Fess", 
                "minecraft.banner.half_horizontal.white": "White Per Fess", 
                "minecraft.banner.half_horizontal.yellow": "Yellow Per Fess", 
                "minecraft.banner.half_horizontal_bottom.black": "Black Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.blue": "Blue Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.brown": "Brown Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.cyan": "Cyan Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.gray": "Gray Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.green": "Green Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.light_blue": "Light Blue Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.light_gray": "Light Gray Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.lime": "Lime Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.magenta": "Magenta Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.orange": "Orange Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.pink": "Pink Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.purple": "Purple Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.red": "Red Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.white": "White Per Fess Inverted", 
                "minecraft.banner.half_horizontal_bottom.yellow": "Yellow Per Fess Inverted", 
                "minecraft.banner.half_vertical.black": "Black Per Pale", 
                "minecraft.banner.half_vertical.blue": "Blue Per Pale", 
                "minecraft.banner.half_vertical.brown": "Brown Per Pale", 
                "minecraft.banner.half_vertical.cyan": "Cyan Per Pale", 
                "minecraft.banner.half_vertical.gray": "Gray Per Pale", 
                "minecraft.banner.half_vertical.green": "Green Per Pale", 
                "minecraft.banner.half_vertical.light_blue": "Light Blue Per Pale", 
                "minecraft.banner.half_vertical.light_gray": "Light Gray Per Pale", 
                "minecraft.banner.half_vertical.lime": "Lime Per Pale", 
                "minecraft.banner.half_vertical.magenta": "Magenta Per Pale", 
                "minecraft.banner.half_vertical.orange": "Orange Per Pale", 
                "minecraft.banner.half_vertical.pink": "Pink Per Pale", 
                "minecraft.banner.half_vertical.purple": "Purple Per Pale", 
                "minecraft.banner.half_vertical.red": "Red Per Pale", 
                "minecraft.banner.half_vertical.white": "White Per Pale", 
                "minecraft.banner.half_vertical.yellow": "Yellow Per Pale", 
                "minecraft.banner.half_vertical_right.black": "Black Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.blue": "Blue Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.brown": "Brown Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.cyan": "Cyan Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.gray": "Gray Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.green": "Green Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.light_blue": "Light Blue Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.light_gray": "Light Gray Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.lime": "Lime Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.magenta": "Magenta Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.orange": "Orange Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.pink": "Pink Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.purple": "Purple Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.red": "Red Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.white": "White Per Pale Inverted", 
                "minecraft.banner.half_vertical_right.yellow": "Yellow Per Pale Inverted", 
                "minecraft.banner.mojang.black": "Black Thing", 
                "minecraft.banner.mojang.blue": "Blue Thing", 
                "minecraft.banner.mojang.brown": "Brown Thing", 
                "minecraft.banner.mojang.cyan": "Cyan Thing", 
                "minecraft.banner.mojang.gray": "Gray Thing", 
                "minecraft.banner.mojang.green": "Green Thing", 
                "minecraft.banner.mojang.light_blue": "Light Blue Thing", 
                "minecraft.banner.mojang.light_gray": "Light Gray Thing", 
                "minecraft.banner.mojang.lime": "Lime Thing", 
                "minecraft.banner.mojang.magenta": "Magenta Thing", 
                "minecraft.banner.mojang.orange": "Orange Thing", 
                "minecraft.banner.mojang.pink": "Pink Thing", 
                "minecraft.banner.mojang.purple": "Purple Thing", 
                "minecraft.banner.mojang.red": "Red Thing", 
                "minecraft.banner.mojang.white": "White Thing", 
                "minecraft.banner.mojang.yellow": "Yellow Thing", 
                "minecraft.banner.rhombus.black": "Black Lozenge", 
                "minecraft.banner.rhombus.blue": "Blue Lozenge", 
                "minecraft.banner.rhombus.brown": "Brown Lozenge", 
                "minecraft.banner.rhombus.cyan": "Cyan Lozenge", 
                "minecraft.banner.rhombus.gray": "Gray Lozenge", 
                "minecraft.banner.rhombus.green": "Green Lozenge", 
                "minecraft.banner.rhombus.light_blue": "Light Blue Lozenge", 
                "minecraft.banner.rhombus.light_gray": "Light Gray Lozenge", 
                "minecraft.banner.rhombus.lime": "Lime Lozenge", 
                "minecraft.banner.rhombus.magenta": "Magenta Lozenge", 
                "minecraft.banner.rhombus.orange": "Orange Lozenge", 
                "minecraft.banner.rhombus.pink": "Pink Lozenge", 
                "minecraft.banner.rhombus.purple": "Purple Lozenge", 
                "minecraft.banner.rhombus.red": "Red Lozenge", 
                "minecraft.banner.rhombus.white": "White Lozenge", 
                "minecraft.banner.rhombus.yellow": "Yellow Lozenge", 
                "minecraft.banner.skull.black": "Black Skull Charge", 
                "minecraft.banner.skull.blue": "Blue Skull Charge", 
                "minecraft.banner.skull.brown": "Brown Skull Charge", 
                "minecraft.banner.skull.cyan": "Cyan Skull Charge", 
                "minecraft.banner.skull.gray": "Gray Skull Charge", 
                "minecraft.banner.skull.green": "Green Skull Charge", 
                "minecraft.banner.skull.light_blue": "Light Blue Skull Charge", 
                "minecraft.banner.skull.light_gray": "Light Gray Skull Charge", 
                "minecraft.banner.skull.lime": "Lime Skull Charge", 
                "minecraft.banner.skull.magenta": "Magenta Skull Charge", 
                "minecraft.banner.skull.orange": "Orange Skull Charge", 
                "minecraft.banner.skull.pink": "Pink Skull Charge", 
                "minecraft.banner.skull.purple": "Purple Skull Charge", 
                "minecraft.banner.skull.red": "Red Skull Charge", 
                "minecraft.banner.skull.white": "White Skull Charge", 
                "minecraft.banner.skull.yellow": "Yellow Skull Charge", 
                "minecraft.banner.small_stripes.black": "Black Paly", 
                "minecraft.banner.small_stripes.blue": "Blue Paly", 
                "minecraft.banner.small_stripes.brown": "Brown Paly", 
                "minecraft.banner.small_stripes.cyan": "Cyan Paly", 
                "minecraft.banner.small_stripes.gray": "Gray Paly", 
                "minecraft.banner.small_stripes.green": "Green Paly", 
                "minecraft.banner.small_stripes.light_blue": "Light Blue Paly", 
                "minecraft.banner.small_stripes.light_gray": "Light Gray Paly", 
                "minecraft.banner.small_stripes.lime": "Lime Paly", 
                "minecraft.banner.small_stripes.magenta": "Magenta Paly", 
                "minecraft.banner.small_stripes.orange": "Orange Paly", 
                "minecraft.banner.small_stripes.pink": "Pink Paly", 
                "minecraft.banner.small_stripes.purple": "Purple Paly", 
                "minecraft.banner.small_stripes.red": "Red Paly", 
                "minecraft.banner.small_stripes.white": "White Paly", 
                "minecraft.banner.small_stripes.yellow": "Yellow Paly", 
                "minecraft.banner.square_bottom_left.black": "Black Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.blue": "Blue Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.brown": "Brown Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.cyan": "Cyan Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.gray": "Gray Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.green": "Green Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.light_blue": "Light Blue Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.light_gray": "Light Gray Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.lime": "Lime Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.magenta": "Magenta Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.orange": "Orange Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.pink": "Pink Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.purple": "Purple Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.red": "Red Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.white": "White Base Dexter Canton", 
                "minecraft.banner.square_bottom_left.yellow": "Yellow Base Dexter Canton", 
                "minecraft.banner.square_bottom_right.black": "Black Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.blue": "Blue Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.brown": "Brown Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.cyan": "Cyan Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.gray": "Gray Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.green": "Green Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.light_blue": "Light Blue Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.light_gray": "Light Gray Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.lime": "Lime Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.magenta": "Magenta Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.orange": "Orange Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.pink": "Pink Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.purple": "Purple Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.red": "Red Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.white": "White Base Sinister Canton", 
                "minecraft.banner.square_bottom_right.yellow": "Yellow Base Sinister Canton", 
                "minecraft.banner.square_top_left.black": "Black Chief Dexter Canton", 
                "minecraft.banner.square_top_left.blue": "Blue Chief Dexter Canton", 
                "minecraft.banner.square_top_left.brown": "Brown Chief Dexter Canton", 
                "minecraft.banner.square_top_left.cyan": "Cyan Chief Dexter Canton", 
                "minecraft.banner.square_top_left.gray": "Gray Chief Dexter Canton", 
                "minecraft.banner.square_top_left.green": "Green Chief Dexter Canton", 
                "minecraft.banner.square_top_left.light_blue": "Light Blue Chief Dexter Canton", 
                "minecraft.banner.square_top_left.light_gray": "Light Gray Chief Dexter Canton", 
                "minecraft.banner.square_top_left.lime": "Lime Chief Dexter Canton", 
                "minecraft.banner.square_top_left.magenta": "Magenta Chief Dexter Canton", 
                "minecraft.banner.square_top_left.orange": "Orange Chief Dexter Canton", 
                "minecraft.banner.square_top_left.pink": "Pink Chief Dexter Canton", 
                "minecraft.banner.square_top_left.purple": "Purple Chief Dexter Canton", 
                "minecraft.banner.square_top_left.red": "Red Chief Dexter Canton", 
                "minecraft.banner.square_top_left.white": "White Chief Dexter Canton", 
                "minecraft.banner.square_top_left.yellow": "Yellow Chief Dexter Canton", 
                "minecraft.banner.square_top_right.black": "Black Chief Sinister Canton", 
                "minecraft.banner.square_top_right.blue": "Blue Chief Sinister Canton", 
                "minecraft.banner.square_top_right.brown": "Brown Chief Sinister Canton", 
                "minecraft.banner.square_top_right.cyan": "Cyan Chief Sinister Canton", 
                "minecraft.banner.square_top_right.gray": "Gray Chief Sinister Canton", 
                "minecraft.banner.square_top_right.green": "Green Chief Sinister Canton", 
                "minecraft.banner.square_top_right.light_blue": "Light Blue Chief Sinister Canton", 
                "minecraft.banner.square_top_right.light_gray": "Light Gray Chief Sinister Canton", 
                "minecraft.banner.square_top_right.lime": "Lime Chief Sinister Canton", 
                "minecraft.banner.square_top_right.magenta": "Magenta Chief Sinister Canton", 
                "minecraft.banner.square_top_right.orange": "Orange Chief Sinister Canton", 
                "minecraft.banner.square_top_right.pink": "Pink Chief Sinister Canton", 
                "minecraft.banner.square_top_right.purple": "Purple Chief Sinister Canton", 
                "minecraft.banner.square_top_right.red": "Red Chief Sinister Canton", 
                "minecraft.banner.square_top_right.white": "White Chief Sinister Canton", 
                "minecraft.banner.square_top_right.yellow": "Yellow Chief Sinister Canton", 
                "minecraft.banner.straight_cross.black": "Black Cross", 
                "minecraft.banner.straight_cross.blue": "Blue Cross", 
                "minecraft.banner.straight_cross.brown": "Brown Cross", 
                "minecraft.banner.straight_cross.cyan": "Cyan Cross", 
                "minecraft.banner.straight_cross.gray": "Gray Cross", 
                "minecraft.banner.straight_cross.green": "Green Cross", 
                "minecraft.banner.straight_cross.light_blue": "Light Blue Cross", 
                "minecraft.banner.straight_cross.light_gray": "Light Gray Cross", 
                "minecraft.banner.straight_cross.lime": "Lime Cross", 
                "minecraft.banner.straight_cross.magenta": "Magenta Cross", 
                "minecraft.banner.straight_cross.orange": "Orange Cross", 
                "minecraft.banner.straight_cross.pink": "Pink Cross", 
                "minecraft.banner.straight_cross.purple": "Purple Cross", 
                "minecraft.banner.straight_cross.red": "Red Cross", 
                "minecraft.banner.straight_cross.white": "White Cross", 
                "minecraft.banner.straight_cross.yellow": "Yellow Cross", 
                "minecraft.banner.stripe_bottom.black": "Black Base", 
                "minecraft.banner.stripe_bottom.blue": "Blue Base", 
                "minecraft.banner.stripe_bottom.brown": "Brown Base", 
                "minecraft.banner.stripe_bottom.cyan": "Cyan Base", 
                "minecraft.banner.stripe_bottom.gray": "Gray Base", 
                "minecraft.banner.stripe_bottom.green": "Green Base", 
                "minecraft.banner.stripe_bottom.light_blue": "Light Blue Base", 
                "minecraft.banner.stripe_bottom.light_gray": "Light Gray Base", 
                "minecraft.banner.stripe_bottom.lime": "Lime Base", 
                "minecraft.banner.stripe_bottom.magenta": "Magenta Base", 
                "minecraft.banner.stripe_bottom.orange": "Orange Base", 
                "minecraft.banner.stripe_bottom.pink": "Pink Base", 
                "minecraft.banner.stripe_bottom.purple": "Purple Base", 
                "minecraft.banner.stripe_bottom.red": "Red Base", 
                "minecraft.banner.stripe_bottom.white": "White Base", 
                "minecraft.banner.stripe_bottom.yellow": "Yellow Base", 
                "minecraft.banner.stripe_center.black": "Black Pale", 
                "minecraft.banner.stripe_center.blue": "Blue Pale", 
                "minecraft.banner.stripe_center.brown": "Brown Pale", 
                "minecraft.banner.stripe_center.cyan": "Cyan Pale", 
                "minecraft.banner.stripe_center.gray": "Gray Pale", 
                "minecraft.banner.stripe_center.green": "Green Pale", 
                "minecraft.banner.stripe_center.light_blue": "Light Blue Pale", 
                "minecraft.banner.stripe_center.light_gray": "Light Gray Pale", 
                "minecraft.banner.stripe_center.lime": "Lime Pale", 
                "minecraft.banner.stripe_center.magenta": "Magenta Pale", 
                "minecraft.banner.stripe_center.orange": "Orange Pale", 
                "minecraft.banner.stripe_center.pink": "Pink Pale", 
                "minecraft.banner.stripe_center.purple": "Purple Pale", 
                "minecraft.banner.stripe_center.red": "Red Pale", 
                "minecraft.banner.stripe_center.white": "White Pale", 
                "minecraft.banner.stripe_center.yellow": "Yellow Pale", 
                "minecraft.banner.stripe_downleft.black": "Black Bend Sinister", 
                "minecraft.banner.stripe_downleft.blue": "Blue Bend Sinister", 
                "minecraft.banner.stripe_downleft.brown": "Brown Bend Sinister", 
                "minecraft.banner.stripe_downleft.cyan": "Cyan Bend Sinister", 
                "minecraft.banner.stripe_downleft.gray": "Gray Bend Sinister", 
                "minecraft.banner.stripe_downleft.green": "Green Bend Sinister", 
                "minecraft.banner.stripe_downleft.light_blue": "Light Blue Bend Sinister", 
                "minecraft.banner.stripe_downleft.light_gray": "Light Gray Bend Sinister", 
                "minecraft.banner.stripe_downleft.lime": "Lime Bend Sinister", 
                "minecraft.banner.stripe_downleft.magenta": "Magenta Bend Sinister", 
                "minecraft.banner.stripe_downleft.orange": "Orange Bend Sinister", 
                "minecraft.banner.stripe_downleft.pink": "Pink Bend Sinister", 
                "minecraft.banner.stripe_downleft.purple": "Purple Bend Sinister", 
                "minecraft.banner.stripe_downleft.red": "Red Bend Sinister", 
                "minecraft.banner.stripe_downleft.white": "White Bend Sinister", 
                "minecraft.banner.stripe_downleft.yellow": "Yellow Bend Sinister", 
                "minecraft.banner.stripe_downright.black": "Black Bend", 
                "minecraft.banner.stripe_downright.blue": "Blue Bend", 
                "minecraft.banner.stripe_downright.brown": "Brown Bend", 
                "minecraft.banner.stripe_downright.cyan": "Cyan Bend", 
                "minecraft.banner.stripe_downright.gray": "Gray Bend", 
                "minecraft.banner.stripe_downright.green": "Green Bend", 
                "minecraft.banner.stripe_downright.light_blue": "Light Blue Bend", 
                "minecraft.banner.stripe_downright.light_gray": "Light Gray Bend", 
                "minecraft.banner.stripe_downright.lime": "Lime Bend", 
                "minecraft.banner.stripe_downright.magenta": "Magenta Bend", 
                "minecraft.banner.stripe_downright.orange": "Orange Bend", 
                "minecraft.banner.stripe_downright.pink": "Pink Bend", 
                "minecraft.banner.stripe_downright.purple": "Purple Bend", 
                "minecraft.banner.stripe_downright.red": "Red Bend", 
                "minecraft.banner.stripe_downright.white": "White Bend", 
                "minecraft.banner.stripe_downright.yellow": "Yellow Bend", 
                "minecraft.banner.stripe_left.black": "Black Pale Dexter", 
                "minecraft.banner.stripe_left.blue": "Blue Pale Dexter", 
                "minecraft.banner.stripe_left.brown": "Brown Pale Dexter", 
                "minecraft.banner.stripe_left.cyan": "Cyan Pale Dexter", 
                "minecraft.banner.stripe_left.gray": "Gray Pale Dexter", 
                "minecraft.banner.stripe_left.green": "Green Pale Dexter", 
                "minecraft.banner.stripe_left.light_blue": "Light Blue Pale Dexter", 
                "minecraft.banner.stripe_left.light_gray": "Light Gray Pale Dexter", 
                "minecraft.banner.stripe_left.lime": "Lime Pale Dexter", 
                "minecraft.banner.stripe_left.magenta": "Magenta Pale Dexter", 
                "minecraft.banner.stripe_left.orange": "Orange Pale Dexter", 
                "minecraft.banner.stripe_left.pink": "Pink Pale Dexter", 
                "minecraft.banner.stripe_left.purple": "Purple Pale Dexter", 
                "minecraft.banner.stripe_left.red": "Red Pale Dexter", 
                "minecraft.banner.stripe_left.white": "White Pale Dexter", 
                "minecraft.banner.stripe_left.yellow": "Yellow Pale Dexter", 
                "minecraft.banner.stripe_middle.black": "Black Fess", 
                "minecraft.banner.stripe_middle.blue": "Blue Fess", 
                "minecraft.banner.stripe_middle.brown": "Brown Fess", 
                "minecraft.banner.stripe_middle.cyan": "Cyan Fess", 
                "minecraft.banner.stripe_middle.gray": "Gray Fess", 
                "minecraft.banner.stripe_middle.green": "Green Fess", 
                "minecraft.banner.stripe_middle.light_blue": "Light Blue Fess", 
                "minecraft.banner.stripe_middle.light_gray": "Light Gray Fess", 
                "minecraft.banner.stripe_middle.lime": "Lime Fess", 
                "minecraft.banner.stripe_middle.magenta": "Magenta Fess", 
                "minecraft.banner.stripe_middle.orange": "Orange Fess", 
                "minecraft.banner.stripe_middle.pink": "Pink Fess", 
                "minecraft.banner.stripe_middle.purple": "Purple Fess", 
                "minecraft.banner.stripe_middle.red": "Red Fess", 
                "minecraft.banner.stripe_middle.white": "White Fess", 
                "minecraft.banner.stripe_middle.yellow": "Yellow Fess", 
                "minecraft.banner.stripe_right.black": "Black Pale Sinister", 
                "minecraft.banner.stripe_right.blue": "Blue Pale Sinister", 
                "minecraft.banner.stripe_right.brown": "Brown Pale Sinister", 
                "minecraft.banner.stripe_right.cyan": "Cyan Pale Sinister", 
                "minecraft.banner.stripe_right.gray": "Gray Pale Sinister", 
                "minecraft.banner.stripe_right.green": "Green Pale Sinister", 
                "minecraft.banner.stripe_right.light_blue": "Light Blue Pale Sinister", 
                "minecraft.banner.stripe_right.light_gray": "Light Gray Pale Sinister", 
                "minecraft.banner.stripe_right.lime": "Lime Pale Sinister", 
                "minecraft.banner.stripe_right.magenta": "Magenta Pale Sinister", 
                "minecraft.banner.stripe_right.orange": "Orange Pale Sinister", 
                "minecraft.banner.stripe_right.pink": "Pink Pale Sinister", 
                "minecraft.banner.stripe_right.purple": "Purple Pale Sinister", 
                "minecraft.banner.stripe_right.red": "Red Pale Sinister", 
                "minecraft.banner.stripe_right.white": "White Pale Sinister", 
                "minecraft.banner.stripe_right.yellow": "Yellow Pale Sinister", 
                "minecraft.banner.stripe_top.black": "Black Chief", 
                "minecraft.banner.stripe_top.blue": "Blue Chief", 
                "minecraft.banner.stripe_top.brown": "Brown Chief", 
                "minecraft.banner.stripe_top.cyan": "Cyan Chief", 
                "minecraft.banner.stripe_top.gray": "Gray Chief", 
                "minecraft.banner.stripe_top.green": "Green Chief", 
                "minecraft.banner.stripe_top.light_blue": "Light Blue Chief", 
                "minecraft.banner.stripe_top.light_gray": "Light Gray Chief", 
                "minecraft.banner.stripe_top.lime": "Lime Chief", 
                "minecraft.banner.stripe_top.magenta": "Magenta Chief", 
                "minecraft.banner.stripe_top.orange": "Orange Chief", 
                "minecraft.banner.stripe_top.pink": "Pink Chief", 
                "minecraft.banner.stripe_top.purple": "Purple Chief", 
                "minecraft.banner.stripe_top.red": "Red Chief", 
                "minecraft.banner.stripe_top.white": "White Chief", 
                "minecraft.banner.stripe_top.yellow": "Yellow Chief", 
                "minecraft.banner.triangle_bottom.black": "Black Chevron", 
                "minecraft.banner.triangle_bottom.blue": "Blue Chevron", 
                "minecraft.banner.triangle_bottom.brown": "Brown Chevron", 
                "minecraft.banner.triangle_bottom.cyan": "Cyan Chevron", 
                "minecraft.banner.triangle_bottom.gray": "Gray Chevron", 
                "minecraft.banner.triangle_bottom.green": "Green Chevron", 
                "minecraft.banner.triangle_bottom.light_blue": "Light Blue Chevron", 
                "minecraft.banner.triangle_bottom.light_gray": "Light Gray Chevron", 
                "minecraft.banner.triangle_bottom.lime": "Lime Chevron", 
                "minecraft.banner.triangle_bottom.magenta": "Magenta Chevron", 
                "minecraft.banner.triangle_bottom.orange": "Orange Chevron", 
                "minecraft.banner.triangle_bottom.pink": "Pink Chevron", 
                "minecraft.banner.triangle_bottom.purple": "Purple Chevron", 
                "minecraft.banner.triangle_bottom.red": "Red Chevron", 
                "minecraft.banner.triangle_bottom.white": "White Chevron", 
                "minecraft.banner.triangle_bottom.yellow": "Yellow Chevron", 
                "minecraft.banner.triangle_top.black": "Black Inverted Chevron", 
                "minecraft.banner.triangle_top.blue": "Blue Inverted Chevron", 
                "minecraft.banner.triangle_top.brown": "Brown Inverted Chevron", 
                "minecraft.banner.triangle_top.cyan": "Cyan Inverted Chevron", 
                "minecraft.banner.triangle_top.gray": "Gray Inverted Chevron", 
                "minecraft.banner.triangle_top.green": "Green Inverted Chevron", 
                "minecraft.banner.triangle_top.light_blue": "Light Blue Inverted Chevron", 
                "minecraft.banner.triangle_top.light_gray": "Light Gray Inverted Chevron", 
                "minecraft.banner.triangle_top.lime": "Lime Inverted Chevron", 
                "minecraft.banner.triangle_top.magenta": "Magenta Inverted Chevron", 
                "minecraft.banner.triangle_top.orange": "Orange Inverted Chevron", 
                "minecraft.banner.triangle_top.pink": "Pink Inverted Chevron", 
                "minecraft.banner.triangle_top.purple": "Purple Inverted Chevron", 
                "minecraft.banner.triangle_top.red": "Red Inverted Chevron", 
                "minecraft.banner.triangle_top.white": "White Inverted Chevron", 
                "minecraft.banner.triangle_top.yellow": "Yellow Inverted Chevron", 
                "minecraft.banner.triangles_bottom.black": "Black Base Indented", 
                "minecraft.banner.triangles_bottom.blue": "Blue Base Indented", 
                "minecraft.banner.triangles_bottom.brown": "Brown Base Indented", 
                "minecraft.banner.triangles_bottom.cyan": "Cyan Base Indented", 
                "minecraft.banner.triangles_bottom.gray": "Gray Base Indented", 
                "minecraft.banner.triangles_bottom.green": "Green Base Indented", 
                "minecraft.banner.triangles_bottom.light_blue": "Light Blue Base Indented", 
                "minecraft.banner.triangles_bottom.light_gray": "Light Gray Base Indented", 
                "minecraft.banner.triangles_bottom.lime": "Lime Base Indented", 
                "minecraft.banner.triangles_bottom.magenta": "Magenta Base Indented", 
                "minecraft.banner.triangles_bottom.orange": "Orange Base Indented", 
                "minecraft.banner.triangles_bottom.pink": "Pink Base Indented", 
                "minecraft.banner.triangles_bottom.purple": "Purple Base Indented", 
                "minecraft.banner.triangles_bottom.red": "Red Base Indented", 
                "minecraft.banner.triangles_bottom.white": "White Base Indented", 
                "minecraft.banner.triangles_bottom.yellow": "Yellow Base Indented", 
                "minecraft.banner.triangles_top.black": "Black Chief Indented", 
                "minecraft.banner.triangles_top.blue": "Blue Chief Indented", 
                "minecraft.banner.triangles_top.brown": "Brown Chief Indented", 
                "minecraft.banner.triangles_top.cyan": "Cyan Chief Indented", 
                "minecraft.banner.triangles_top.gray": "Gray Chief Indented", 
                "minecraft.banner.triangles_top.green": "Green Chief Indented", 
                "minecraft.banner.triangles_top.light_blue": "Light Blue Chief Indented", 
                "minecraft.banner.triangles_top.light_gray": "Light Gray Chief Indented", 
                "minecraft.banner.triangles_top.lime": "Lime Chief Indented", 
                "minecraft.banner.triangles_top.magenta": "Magenta Chief Indented", 
                "minecraft.banner.triangles_top.orange": "Orange Chief Indented", 
                "minecraft.banner.triangles_top.pink": "Pink Chief Indented", 
                "minecraft.banner.triangles_top.purple": "Purple Chief Indented", 
                "minecraft.banner.triangles_top.red": "Red Chief Indented", 
                "minecraft.banner.triangles_top.white": "White Chief Indented", 
                "minecraft.banner.triangles_top.yellow": "Yellow Chief Indented", 
                "minecraft.barrier": "Barrier", 
                "minecraft.beacon": "Beacon", 
                "minecraft.beacon.primary": "Primary Power", 
                "minecraft.beacon.secondary": "Secondary Power", 
                "minecraft.bed": "Bed", 
                "minecraft.bed.no_sleep": "You can only sleep at night", 
                "minecraft.bed.not_safe": "You may not rest now, there are monsters nearby", 
                "minecraft.bed.not_valid": "Your home bed was missing or obstructed", 
                "minecraft.bed.occupied": "This bed is occupied", 
                "minecraft.bed.too_far_away": "You may not rest now, the bed is too far away", 
                "minecraft.bedrock": "Bedrock", 
                "minecraft.beetroots": "Beetroots", 
                "minecraft.birch_bark": "Birch Bark", 
                "minecraft.birch_button": "Birch Button", 
                "minecraft.birch_door": "Birch Door", 
                "minecraft.birch_fence": "Birch Fence", 
                "minecraft.birch_fence_gate": "Birch Fence Gate", 
                "minecraft.birch_leaves": "Birch Leaves", 
                "minecraft.birch_log": "Birch Log", 
                "minecraft.birch_planks": "Birch Planks", 
                "minecraft.birch_pressure_plate": "Birch Pressure Plate", 
                "minecraft.birch_sapling": "Birch Sapling", 
                "minecraft.birch_slab": "Birch Slab", 
                "minecraft.birch_stairs": "Birch Stairs", 
                "minecraft.birch_trapdoor": "Birch Trapdoor", 
                "minecraft.black_banner": "Black Banner", 
                "minecraft.black_bed": "Black Bed", 
                "minecraft.black_carpet": "Black Carpet", 
                "minecraft.black_concrete": "Black Concrete", 
                "minecraft.black_concrete_powder": "Black Concrete Powder", 
                "minecraft.black_glazed_terracotta": "Black Glazed Terracotta", 
                "minecraft.black_shulker_box": "Black Shulker Box", 
                "minecraft.black_stained_glass": "Black Stained Glass", 
                "minecraft.black_stained_glass_pane": "Black Stained Glass Pane", 
                "minecraft.black_terracotta": "Black Terracotta", 
                "minecraft.black_wool": "Black Wool", 
                "minecraft.blue_banner": "Blue Banner", 
                "minecraft.blue_bed": "Blue Bed", 
                "minecraft.blue_carpet": "Blue Carpet", 
                "minecraft.blue_concrete": "Blue Concrete", 
                "minecraft.blue_concrete_powder": "Blue Concrete Powder", 
                "minecraft.blue_glazed_terracotta": "Blue Glazed Terracotta", 
                "minecraft.blue_orchid": "Blue Orchid", 
                "minecraft.blue_shulker_box": "Blue Shulker Box", 
                "minecraft.blue_stained_glass": "Blue Stained Glass", 
                "minecraft.blue_stained_glass_pane": "Blue Stained Glass Pane", 
                "minecraft.blue_terracotta": "Blue Terracotta", 
                "minecraft.blue_wool": "Blue Wool", 
                "minecraft.bone_block": "Bone Block", 
                "minecraft.bookshelf": "Bookshelf", 
                "minecraft.brewing_stand": "Brewing Stand", 
                "minecraft.brick_slab": "Brick Slab", 
                "minecraft.brick_stairs": "Brick Stairs", 
                "minecraft.bricks": "Bricks", 
                "minecraft.brown_banner": "Brown Banner", 
                "minecraft.brown_bed": "Brown Bed", 
                "minecraft.brown_carpet": "Brown Carpet", 
                "minecraft.brown_concrete": "Brown Concrete", 
                "minecraft.brown_concrete_powder": "Brown Concrete Powder", 
                "minecraft.brown_glazed_terracotta": "Brown Glazed Terracotta", 
                "minecraft.brown_mushroom": "Brown Mushroom", 
                "minecraft.brown_mushroom_block": "Brown Mushroom Block", 
                "minecraft.brown_shulker_box": "Brown Shulker Box", 
                "minecraft.brown_stained_glass": "Brown Stained Glass", 
                "minecraft.brown_stained_glass_pane": "Brown Stained Glass Pane", 
                "minecraft.brown_terracotta": "Brown Terracotta", 
                "minecraft.brown_wool": "Brown Wool", 
                "minecraft.cactus": "Cactus", 
                "minecraft.cake": "Cake", 
                "minecraft.carrots": "Carrots", 
                "minecraft.carved_pumpkin": "Carved Pumpkin", 
                "minecraft.cauldron": "Cauldron", 
                "minecraft.cave_air": "Cave Air", 
                "minecraft.chain_command_block": "Chain Command Block", 
                "minecraft.chest": "Chest", 
                "minecraft.chipped_anvil": "Chipped Anvil", 
                "minecraft.chiseled_quartz_block": "Chiseled Quartz Block", 
                "minecraft.chiseled_red_sandstone": "Chiseled Red Sandstone", 
                "minecraft.chiseled_sandstone": "Chiseled Sandstone", 
                "minecraft.chiseled_stone_bricks": "Chiseled Stone Bricks", 
                "minecraft.chorus_flower": "Chorus Flower", 
                "minecraft.chorus_plant": "Chorus Plant", 
                "minecraft.clay": "Clay", 
                "minecraft.coal_block": "Block of Coal", 
                "minecraft.coal_ore": "Coal Ore", 
                "minecraft.coarse_dirt": "Coarse Dirt", 
                "minecraft.cobblestone": "Cobblestone", 
                "minecraft.cobblestone_slab": "Cobblestone Slab", 
                "minecraft.cobblestone_stairs": "Cobblestone Stairs", 
                "minecraft.cobblestone_wall": "Cobblestone Wall", 
                "minecraft.cobweb": "Cobweb", 
                "minecraft.cocoa": "Cocoa", 
                "minecraft.command_block": "Command Block", 
                "minecraft.comparator": "Redstone Comparator", 
                "minecraft.cracked_stone_bricks": "Cracked Stone Bricks", 
                "minecraft.crafting_table": "Crafting Table", 
                "minecraft.creeper_head": "Creeper Head", 
                "minecraft.creeper_wall_head": "Creeper Wall Head", 
                "minecraft.cut_red_sandstone": "Cut Red Sandstone", 
                "minecraft.cut_sandstone": "Cut Sandstone", 
                "minecraft.cyan_banner": "Cyan Banner", 
                "minecraft.cyan_bed": "Cyan Bed", 
                "minecraft.cyan_carpet": "Cyan Carpet", 
                "minecraft.cyan_concrete": "Cyan Concrete", 
                "minecraft.cyan_concrete_powder": "Cyan Concrete Powder", 
                "minecraft.cyan_glazed_terracotta": "Cyan Glazed Terracotta", 
                "minecraft.cyan_shulker_box": "Cyan Shulker Box", 
                "minecraft.cyan_stained_glass": "Cyan Stained Glass", 
                "minecraft.cyan_stained_glass_pane": "Cyan Stained Glass Pane", 
                "minecraft.cyan_terracotta": "Cyan Terracotta", 
                "minecraft.cyan_wool": "Cyan Wool", 
                "minecraft.damaged_anvil": "Damaged Anvil", 
                "minecraft.dandelion": "Dandelion", 
                "minecraft.dark_oak_bark": "Dark Oak Bark", 
                "minecraft.dark_oak_button": "Dark Oak Button", 
                "minecraft.dark_oak_door": "Dark Oak Door", 
                "minecraft.dark_oak_fence": "Dark Oak Fence", 
                "minecraft.dark_oak_fence_gate": "Dark Oak Fence Gate", 
                "minecraft.dark_oak_leaves": "Dark Oak Leaves", 
                "minecraft.dark_oak_log": "Dark Oak Log", 
                "minecraft.dark_oak_planks": "Dark Oak Planks", 
                "minecraft.dark_oak_pressure_plate": "Dark Oak Pressure Plate", 
                "minecraft.dark_oak_sapling": "Dark Oak Sapling", 
                "minecraft.dark_oak_slab": "Dark Oak Slab", 
                "minecraft.dark_oak_stairs": "Dark Oak Stairs", 
                "minecraft.dark_oak_trapdoor": "Dark Oak Trapdoor", 
                "minecraft.dark_prismarine": "Dark Prismarine", 
                "minecraft.dark_prismarine_slab": "Dark Prismarine Slab", 
                "minecraft.dark_prismarine_stairs": "Dark Prismarine Stairs", 
                "minecraft.daylight_detector": "Daylight Detector", 
                "minecraft.dead_bush": "Dead Bush", 
                "minecraft.detector_rail": "Detector Rail", 
                "minecraft.diamond_block": "Block of Diamond", 
                "minecraft.diamond_ore": "Diamond Ore", 
                "minecraft.diorite": "Diorite", 
                "minecraft.dirt": "Dirt", 
                "minecraft.dispenser": "Dispenser", 
                "minecraft.dragon_egg": "Dragon Egg", 
                "minecraft.dragon_head": "Dragon Head", 
                "minecraft.dragon_wall_head": "Dragon Wall Head", 
                "minecraft.dried_kelp_block": "Dried Kelp Block", 
                "minecraft.dropper": "Dropper", 
                "minecraft.emerald_block": "Block of Emerald", 
                "minecraft.emerald_ore": "Emerald Ore", 
                "minecraft.enchanting_table": "Enchanting Table", 
                "minecraft.end_gateway": "End Gateway", 
                "minecraft.end_portal": "End Portal", 
                "minecraft.end_portal_frame": "End Portal Frame", 
                "minecraft.end_rod": "End Rod", 
                "minecraft.end_stone": "End Stone", 
                "minecraft.end_stone_bricks": "End Stone Bricks", 
                "minecraft.ender_chest": "Ender Chest", 
                "minecraft.farmland": "Farmland", 
                "minecraft.fern": "Fern", 
                "minecraft.fire": "Fire", 
                "minecraft.flower_pot": "Flower Pot", 
                "minecraft.flowing_lava": "Flowing Lava", 
                "minecraft.flowing_water": "Flowing Water", 
                "minecraft.four_turtle_eggs": "Four Turtle Eggs", 
                "minecraft.frosted_ice": "Frosted Ice", 
                "minecraft.furnace": "Furnace", 
                "minecraft.glass": "Glass", 
                "minecraft.glass_pane": "Glass Pane", 
                "minecraft.glowstone": "Glowstone", 
                "minecraft.gold_block": "Block of Gold", 
                "minecraft.gold_ore": "Gold Ore", 
                "minecraft.granite": "Granite", 
                "minecraft.grass": "Grass", 
                "minecraft.grass_block": "Grass Block", 
                "minecraft.grass_path": "Grass Path", 
                "minecraft.gravel": "Gravel", 
                "minecraft.gray_banner": "Gray Banner", 
                "minecraft.gray_bed": "Gray Bed", 
                "minecraft.gray_carpet": "Gray Carpet", 
                "minecraft.gray_concrete": "Gray Concrete", 
                "minecraft.gray_concrete_powder": "Gray Concrete Powder", 
                "minecraft.gray_glazed_terracotta": "Gray Glazed Terracotta", 
                "minecraft.gray_shulker_box": "Gray Shulker Box", 
                "minecraft.gray_stained_glass": "Gray Stained Glass", 
                "minecraft.gray_stained_glass_pane": "Gray Stained Glass Pane", 
                "minecraft.gray_terracotta": "Gray Terracotta", 
                "minecraft.gray_wool": "Gray Wool", 
                "minecraft.green_banner": "Green Banner", 
                "minecraft.green_bed": "Green Bed", 
                "minecraft.green_carpet": "Green Carpet", 
                "minecraft.green_concrete": "Green Concrete", 
                "minecraft.green_concrete_powder": "Green Concrete Powder", 
                "minecraft.green_glazed_terracotta": "Green Glazed Terracotta", 
                "minecraft.green_shulker_box": "Green Shulker Box", 
                "minecraft.green_stained_glass": "Green Stained Glass", 
                "minecraft.green_stained_glass_pane": "Green Stained Glass Pane", 
                "minecraft.green_terracotta": "Green Terracotta", 
                "minecraft.green_wool": "Green Wool", 
                "minecraft.hay_block": "Hay Bale", 
                "minecraft.heavy_weighted_pressure_plate": "Weighted Pressure Plate (Heavy)", 
                "minecraft.hopper": "Hopper", 
                "minecraft.ice": "Ice", 
                "minecraft.infested_chiseled_stone_bricks": "Infested Chiseled Stone Bricks", 
                "minecraft.infested_cobblestone": "Infested Cobblestone", 
                "minecraft.infested_cracked_stone_bricks": "Infested Cracked Stone Bricks", 
                "minecraft.infested_mossy_stone_bricks": "Infested Mossy Stone Bricks", 
                "minecraft.infested_stone": "Infested Stone", 
                "minecraft.infested_stone_bricks": "Infested Stone Bricks", 
                "minecraft.iron_bars": "Iron Bars", 
                "minecraft.iron_block": "Block of Iron", 
                "minecraft.iron_door": "Iron Door", 
                "minecraft.iron_ore": "Iron Ore", 
                "minecraft.iron_trapdoor": "Iron Trapdoor", 
                "minecraft.jack_o_lantern": "Jack o'Lantern", 
                "minecraft.jukebox": "Jukebox", 
                "minecraft.jungle_bark": "Jungle Bark", 
                "minecraft.jungle_button": "Jungle Button", 
                "minecraft.jungle_door": "Jungle Door", 
                "minecraft.jungle_fence": "Jungle Fence", 
                "minecraft.jungle_fence_gate": "Jungle Fence Gate", 
                "minecraft.jungle_leaves": "Jungle Leaves", 
                "minecraft.jungle_log": "Jungle Log", 
                "minecraft.jungle_planks": "Jungle Planks", 
                "minecraft.jungle_pressure_plate": "Jungle Pressure Plate", 
                "minecraft.jungle_sapling": "Jungle Sapling", 
                "minecraft.jungle_slab": "Jungle Slab", 
                "minecraft.jungle_stairs": "Jungle Stairs", 
                "minecraft.jungle_trapdoor": "Jungle Trapdoor", 
                "minecraft.kelp_top": "Kelp", 
                "minecraft.ladder": "Ladder", 
                "minecraft.lapis_block": "Lapis Lazuli Block", 
                "minecraft.lapis_ore": "Lapis Lazuli Ore", 
                "minecraft.large_fern": "Large Fern", 
                "minecraft.lava": "Lava", 
                "minecraft.lever": "Lever", 
                "minecraft.light_blue_banner": "Light Blue Banner", 
                "minecraft.light_blue_bed": "Light Blue Bed", 
                "minecraft.light_blue_carpet": "Light Blue Carpet", 
                "minecraft.light_blue_concrete": "Light Blue Concrete", 
                "minecraft.light_blue_concrete_powder": "Light Blue Concrete Powder", 
                "minecraft.light_blue_glazed_terracotta": "Light Blue Glazed Terracotta", 
                "minecraft.light_blue_shulker_box": "Light Blue Shulker Box", 
                "minecraft.light_blue_stained_glass": "Light Blue Stained Glass", 
                "minecraft.light_blue_stained_glass_pane": "Light Blue Stained Glass Pane", 
                "minecraft.light_blue_terracotta": "Light Blue Terracotta", 
                "minecraft.light_blue_wool": "Light Blue Wool", 
                "minecraft.light_gray_banner": "Light Gray Banner", 
                "minecraft.light_gray_bed": "Light Gray Bed", 
                "minecraft.light_gray_carpet": "Light Gray Carpet", 
                "minecraft.light_gray_concrete": "Light Gray Concrete", 
                "minecraft.light_gray_concrete_powder": "Light Gray Concrete Powder", 
                "minecraft.light_gray_glazed_terracotta": "Light Gray Glazed Terracotta", 
                "minecraft.light_gray_shulker_box": "Light Gray Shulker Box", 
                "minecraft.light_gray_stained_glass": "Light Gray Stained Glass", 
                "minecraft.light_gray_stained_glass_pane": "Light Gray Stained Glass Pane", 
                "minecraft.light_gray_terracotta": "Light Gray Terracotta", 
                "minecraft.light_gray_wool": "Light Gray Wool", 
                "minecraft.light_weighted_pressure_plate": "Weighted Pressure Plate (Light)", 
                "minecraft.lilac": "Lilac", 
                "minecraft.lily_pad": "Lily Pad", 
                "minecraft.lime_banner": "Lime Banner", 
                "minecraft.lime_bed": "Lime Bed", 
                "minecraft.lime_carpet": "Lime Carpet", 
                "minecraft.lime_concrete": "Lime Concrete", 
                "minecraft.lime_concrete_powder": "Lime Concrete Powder", 
                "minecraft.lime_glazed_terracotta": "Lime Glazed Terracotta", 
                "minecraft.lime_shulker_box": "Lime Shulker Box", 
                "minecraft.lime_stained_glass": "Lime Stained Glass", 
                "minecraft.lime_stained_glass_pane": "Lime Stained Glass Pane", 
                "minecraft.lime_terracotta": "Lime Terracotta", 
                "minecraft.lime_wool": "Lime Wool", 
                "minecraft.magenta_banner": "Magenta Banner", 
                "minecraft.magenta_bed": "Magenta Bed", 
                "minecraft.magenta_carpet": "Magenta Carpet", 
                "minecraft.magenta_concrete": "Magenta Concrete", 
                "minecraft.magenta_concrete_powder": "Magenta Concrete Powder", 
                "minecraft.magenta_glazed_terracotta": "Magenta Glazed Terracotta", 
                "minecraft.magenta_shulker_box": "Magenta Shulker Box", 
                "minecraft.magenta_stained_glass": "Magenta Stained Glass", 
                "minecraft.magenta_stained_glass_pane": "Magenta Stained Glass Pane", 
                "minecraft.magenta_terracotta": "Magenta Terracotta", 
                "minecraft.magenta_wool": "Magenta Wool", 
                "minecraft.magma_block": "Magma Block", 
                "minecraft.melon_block": "Melon", 
                "minecraft.melon_stem": "Melon Stem", 
                "minecraft.mob_spawner": "Spawner", 
                "minecraft.mossy_cobblestone": "Mossy Cobblestone", 
                "minecraft.mossy_cobblestone_wall": "Mossy Cobblestone Wall", 
                "minecraft.mossy_stone_bricks": "Mossy Stone Bricks", 
                "minecraft.moving_piston": "Moving Piston", 
                "minecraft.mushroom_stem": "Mushroom Stem", 
                "minecraft.mycelium": "Mycelium", 
                "minecraft.nether_brick_fence": "Nether Brick Fence", 
                "minecraft.nether_brick_slab": "Nether Brick Slab", 
                "minecraft.nether_brick_stairs": "Nether Brick Stairs", 
                "minecraft.nether_bricks": "Nether Bricks", 
                "minecraft.nether_quartz_ore": "Nether Quartz Ore", 
                "minecraft.nether_wart": "Nether Wart", 
                "minecraft.nether_wart_block": "Nether Wart Block", 
                "minecraft.netherrack": "Netherrack", 
                "minecraft.note_block": "Note Block", 
                "minecraft.oak_bark": "Oak Bark", 
                "minecraft.oak_button": "Oak Button", 
                "minecraft.oak_door": "Oak Door", 
                "minecraft.oak_fence": "Oak Fence", 
                "minecraft.oak_fence_gate": "Oak Fence Gate", 
                "minecraft.oak_leaves": "Oak Leaves", 
                "minecraft.oak_log": "Oak Log", 
                "minecraft.oak_planks": "Oak Planks", 
                "minecraft.oak_pressure_plate": "Oak Pressure Plate", 
                "minecraft.oak_sapling": "Oak Sapling", 
                "minecraft.oak_slab": "Oak Slab", 
                "minecraft.oak_stairs": "Oak Stairs", 
                "minecraft.oak_trapdoor": "Oak Trapdoor", 
                "minecraft.observer": "Observer", 
                "minecraft.obsidian": "Obsidian", 
                "minecraft.orange_banner": "Orange Banner", 
                "minecraft.orange_bed": "Orange Bed", 
                "minecraft.orange_carpet": "Orange Carpet", 
                "minecraft.orange_concrete": "Orange Concrete", 
                "minecraft.orange_concrete_powder": "Orange Concrete Powder", 
                "minecraft.orange_glazed_terracotta": "Orange Glazed Terracotta", 
                "minecraft.orange_shulker_box": "Orange Shulker Box", 
                "minecraft.orange_stained_glass": "Orange Stained Glass", 
                "minecraft.orange_stained_glass_pane": "Orange Stained Glass Pane", 
                "minecraft.orange_terracotta": "Orange Terracotta", 
                "minecraft.orange_tulip": "Orange Tulip", 
                "minecraft.orange_wool": "Orange Wool", 
                "minecraft.oxeye_daisy": "Oxeye Daisy", 
                "minecraft.packed_ice": "Packed Ice", 
                "minecraft.peony": "Peony", 
                "minecraft.petrified_oak_slab": "Petrified Oak Slab", 
                "minecraft.pink_banner": "Pink Banner", 
                "minecraft.pink_bed": "Pink Bed", 
                "minecraft.pink_carpet": "Pink Carpet", 
                "minecraft.pink_concrete": "Pink Concrete", 
                "minecraft.pink_concrete_powder": "Pink Concrete Powder", 
                "minecraft.pink_glazed_terracotta": "Pink Glazed Terracotta", 
                "minecraft.pink_shulker_box": "Pink Shulker Box", 
                "minecraft.pink_stained_glass": "Pink Stained Glass", 
                "minecraft.pink_stained_glass_pane": "Pink Stained Glass Pane", 
                "minecraft.pink_terracotta": "Pink Terracotta", 
                "minecraft.pink_tulip": "Pink Tulip", 
                "minecraft.pink_wool": "Pink Wool", 
                "minecraft.piston": "Piston", 
                "minecraft.piston_head": "Piston Head", 
                "minecraft.player_head": "Player Head", 
                "minecraft.player_head.named": "%s's Head", 
                "minecraft.player_wall_head": "Player Wall Head", 
                "minecraft.podzol": "Podzol", 
                "minecraft.polished_andesite": "Polished Andesite", 
                "minecraft.polished_diorite": "Polished Diorite", 
                "minecraft.polished_granite": "Polished Granite", 
                "minecraft.poppy": "Poppy", 
                "minecraft.portal": "Portal", 
                "minecraft.potatoes": "Potatoes", 
                "minecraft.powered_rail": "Powered Rail", 
                "minecraft.prismarine": "Prismarine", 
                "minecraft.prismarine_bricks": "Prismarine Bricks", 
                "minecraft.prismarine_bricks_slab": "Prismarine Bricks Slab", 
                "minecraft.prismarine_bricks_stairs": "Prismarine Bricks Stairs", 
                "minecraft.prismarine_slab": "Prismarine Slab", 
                "minecraft.prismarine_stairs": "Prismarine Stairs", 
                "minecraft.pumpkin": "Pumpkin", 
                "minecraft.pumpkin_stem": "Pumpkin Stem", 
                "minecraft.purple_banner": "Purple Banner", 
                "minecraft.purple_bed": "Purple Bed", 
                "minecraft.purple_carpet": "Purple Carpet", 
                "minecraft.purple_concrete": "Purple Concrete", 
                "minecraft.purple_concrete_powder": "Purple Concrete Powder", 
                "minecraft.purple_glazed_terracotta": "Purple Glazed Terracotta", 
                "minecraft.purple_shulker_box": "Purple Shulker Box", 
                "minecraft.purple_stained_glass": "Purple Stained Glass", 
                "minecraft.purple_stained_glass_pane": "Purple Stained Glass Pane", 
                "minecraft.purple_terracotta": "Purple Terracotta", 
                "minecraft.purple_wool": "Purple Wool", 
                "minecraft.purpur_block": "Purpur Block", 
                "minecraft.purpur_pillar": "Purpur Pillar", 
                "minecraft.purpur_slab": "Purpur Slab", 
                "minecraft.purpur_stairs": "Purpur Stairs", 
                "minecraft.quartz_block": "Block of Quartz", 
                "minecraft.quartz_pillar": "Quartz Pillar", 
                "minecraft.quartz_slab": "Quartz Slab", 
                "minecraft.quartz_stairs": "Quartz Stairs", 
                "minecraft.rail": "Rail", 
                "minecraft.red_banner": "Red Banner", 
                "minecraft.red_bed": "Red Bed", 
                "minecraft.red_carpet": "Red Carpet", 
                "minecraft.red_concrete": "Red Concrete", 
                "minecraft.red_concrete_powder": "Red Concrete Powder", 
                "minecraft.red_glazed_terracotta": "Red Glazed Terracotta", 
                "minecraft.red_mushroom": "Red Mushroom", 
                "minecraft.red_mushroom_block": "Red Mushroom Block", 
                "minecraft.red_nether_bricks": "Red Nether Bricks", 
                "minecraft.red_sand": "Red Sand", 
                "minecraft.red_sandstone": "Red Sandstone", 
                "minecraft.red_sandstone_slab": "Red Sandstone Slab", 
                "minecraft.red_sandstone_stairs": "Red Sandstone Stairs", 
                "minecraft.red_shulker_box": "Red Shulker Box", 
                "minecraft.red_stained_glass": "Red Stained Glass", 
                "minecraft.red_stained_glass_pane": "Red Stained Glass Pane", 
                "minecraft.red_terracotta": "Red Terracotta", 
                "minecraft.red_tulip": "Red Tulip", 
                "minecraft.red_wool": "Red Wool", 
                "minecraft.redstone_block": "Block of Redstone", 
                "minecraft.redstone_lamp": "Redstone Lamp", 
                "minecraft.redstone_ore": "Redstone Ore", 
                "minecraft.redstone_torch": "Redstone Torch", 
                "minecraft.redstone_wall_torch": "Redstone Wall Torch", 
                "minecraft.redstone_wire": "Redstone Dust", 
                "minecraft.repeater": "Redstone Repeater", 
                "minecraft.repeating_command_block": "Repeating Command Block", 
                "minecraft.rose_bush": "Rose Bush", 
                "minecraft.sand": "Sand", 
                "minecraft.sandstone": "Sandstone", 
                "minecraft.sandstone_slab": "Sandstone Slab", 
                "minecraft.sandstone_stairs": "Sandstone Stairs", 
                "minecraft.sea_grass": "Sea Grass", 
                "minecraft.sea_lantern": "Sea Lantern", 
                "minecraft.sign": "Sign", 
                "minecraft.skeleton_skull": "Skeleton Skull", 
                "minecraft.skeleton_wall_skull": "Skeleton Wall Skull", 
                "minecraft.slime_block": "Slime Block", 
                "minecraft.smooth_quartz": "Smooth Quartz", 
                "minecraft.smooth_red_sandstone": "Smooth Red Sandstone", 
                "minecraft.smooth_sandstone": "Smooth Sandstone", 
                "minecraft.smooth_stone": "Smooth Stone", 
                "minecraft.snow": "Snow", 
                "minecraft.snow_block": "Snow Block", 
                "minecraft.soul_sand": "Soul Sand", 
                "minecraft.sponge": "Sponge", 
                "minecraft.spruce_bark": "Spruce Bark", 
                "minecraft.spruce_button": "Spruce Button", 
                "minecraft.spruce_door": "Spruce Door", 
                "minecraft.spruce_fence": "Spruce Fence", 
                "minecraft.spruce_fence_gate": "Spruce Fence Gate", 
                "minecraft.spruce_leaves": "Spruce Leaves", 
                "minecraft.spruce_log": "Spruce Log", 
                "minecraft.spruce_planks": "Spruce Planks", 
                "minecraft.spruce_pressure_plate": "Spruce Pressure Plate", 
                "minecraft.spruce_sapling": "Spruce Sapling", 
                "minecraft.spruce_slab": "Spruce Slab", 
                "minecraft.spruce_stairs": "Spruce Stairs", 
                "minecraft.spruce_trapdoor": "Spruce Trapdoor", 
                "minecraft.sticky_piston": "Sticky Piston", 
                "minecraft.stone": "Stone", 
                "minecraft.stone_brick_slab": "Stone Brick Slab", 
                "minecraft.stone_brick_stairs": "Stone Brick Stairs", 
                "minecraft.stone_bricks": "Stone Bricks", 
                "minecraft.stone_button": "Stone Button", 
                "minecraft.stone_pressure_plate": "Stone Pressure Plate", 
                "minecraft.stone_slab": "Stone Slab", 
                "minecraft.stripped_acacia_log": "Stripped Acacia Log", 
                "minecraft.stripped_birch_log": "Stripped Birch Log", 
                "minecraft.stripped_dark_oak_log": "Stripped Dark Oak Log", 
                "minecraft.stripped_jungle_log": "Stripped Jungle Log", 
                "minecraft.stripped_oak_log": "Stripped Oak Log", 
                "minecraft.stripped_spruce_log": "Stripped Spruce Log", 
                "minecraft.structure_block": "Structure Block", 
                "minecraft.structure_void": "Structure Void", 
                "minecraft.sugar_cane": "Sugar Cane", 
                "minecraft.sunflower": "Sunflower", 
                "minecraft.tall_grass": "Tall Grass", 
                "minecraft.terracotta": "Terracotta", 
                "minecraft.three_turtle_eggs": "Three Turtle Eggs", 
                "minecraft.tnt": "TNT", 
                "minecraft.torch": "Torch", 
                "minecraft.trapped_chest": "Trapped Chest", 
                "minecraft.tripwire": "Tripwire", 
                "minecraft.tripwire_hook": "Tripwire Hook", 
                "minecraft.turtle_egg": "Turtle Egg", 
                "minecraft.two_turtle_eggs": "Two Turtle Eggs", 
                "minecraft.vine": "Vines", 
                "minecraft.void_air": "Void Air", 
                "minecraft.wall_banner": "Wall Banner", 
                "minecraft.wall_sign": "Wall Sign", 
                "minecraft.wall_torch": "Wall Torch", 
                "minecraft.water": "Water", 
                "minecraft.wet_sponge": "Wet Sponge", 
                "minecraft.wheat": "Wheat Crops", 
                "minecraft.white_banner": "White Banner", 
                "minecraft.white_bed": "White Bed", 
                "minecraft.white_carpet": "White Carpet", 
                "minecraft.white_concrete": "White Concrete", 
                "minecraft.white_concrete_powder": "White Concrete Powder", 
                "minecraft.white_glazed_terracotta": "White Glazed Terracotta", 
                "minecraft.white_shulker_box": "White Shulker Box", 
                "minecraft.white_stained_glass": "White Stained Glass", 
                "minecraft.white_stained_glass_pane": "White Stained Glass Pane", 
                "minecraft.white_terracotta": "White Terracotta", 
                "minecraft.white_tulip": "White Tulip", 
                "minecraft.white_wool": "White Wool", 
                "minecraft.wither_skeleton_skull": "Wither Skeleton Skull", 
                "minecraft.wither_skeleton_wall_skull": "Wither Skeleton Wall Skull", 
                "minecraft.yellow_banner": "Yellow Banner", 
                "minecraft.yellow_bed": "Yellow Bed", 
                "minecraft.yellow_carpet": "Yellow Carpet", 
                "minecraft.yellow_concrete": "Yellow Concrete", 
                "minecraft.yellow_concrete_powder": "Yellow Concrete Powder", 
                "minecraft.yellow_glazed_terracotta": "Yellow Glazed Terracotta", 
                "minecraft.yellow_shulker_box": "Yellow Shulker Box", 
                "minecraft.yellow_stained_glass": "Yellow Stained Glass", 
                "minecraft.yellow_stained_glass_pane": "Yellow Stained Glass Pane", 
                "minecraft.yellow_terracotta": "Yellow Terracotta", 
                "minecraft.yellow_wool": "Yellow Wool", 
                "minecraft.zombie_head": "Zombie Head", 
                "minecraft.zombie_wall_head": "Zombie Wall Head"
            }, 
            "book": {
                "byAuthor": "by %1$s", 
                "editTitle": "Enter Book Title:", 
                "finalizeButton": "Sign and Close", 
                "finalizeWarning": "Note! When you sign the book, it will no longer be editable.", 
                "generation.0": "Original", 
                "generation.1": "Copy of original", 
                "generation.2": "Copy of a copy", 
                "generation.3": "Tattered", 
                "pageIndicator": "Page %1$s of %2$s", 
                "signButton": "Sign"
            }, 
            "build": {
                "tooHigh": "Height limit for building is %s blocks"
            }, 
            "chat": {
                "cannotSend": "Cannot send chat message", 
                "copy": "Copy to Clipboard", 
                "link.confirm": "Are you sure you want to open the following website?", 
                "link.confirmTrusted": "Do you want to open this link or copy it to your clipboard?", 
                "link.open": "Open in browser", 
                "link.warning": "Never open links from people that you don't trust!", 
                "type.admin": "[%s: %s]", 
                "type.advancement.challenge": "%s has completed the challenge %s", 
                "type.advancement.goal": "%s has reached the goal %s", 
                "type.advancement.task": "%s has made the advancement %s", 
                "type.announcement": "[%s] %s", 
                "type.emote": "* %s %s", 
                "type.text": "<%s> %s", 
                "type.text.narrate": "%s says %s"
            }, 
            "command": {
                "failed": "An unexpected error occurred trying to execute that command"
            }, 
            "commands": {
                "advancement.advancementNotFound": "No advancement was found by the name '%1$s'", 
                "advancement.criterionNotFound": "The advancement %1$s does not contain the criterion '%2$s'", 
                "advancement.grant.criterion.to.many.failure": "Couldn't grant criterion '%s' of advancement %s to %s players as they already have it", 
                "advancement.grant.criterion.to.many.success": "Granted criterion '%s' of advancement %s to %s players", 
                "advancement.grant.criterion.to.one.failure": "Couldn't grant criterion '%s' of advancement %s to %s as they already have it", 
                "advancement.grant.criterion.to.one.success": "Granted criterion '%s' of advancement %s to %s", 
                "advancement.grant.many.to.many.failure": "Couldn't grant %s advancements to %s players as they already have them", 
                "advancement.grant.many.to.many.success": "Granted %s advancements to %s players", 
                "advancement.grant.many.to.one.failure": "Couldn't grant %s advancements to %s as they already have them", 
                "advancement.grant.many.to.one.success": "Granted %s advancements to %s", 
                "advancement.grant.one.to.many.failure": "Couldn't grant advancement %s to %s players as they already have it", 
                "advancement.grant.one.to.many.success": "Granted the advancement %s to %s players", 
                "advancement.grant.one.to.one.failure": "Couldn't grant advancement %s to %s as they already have it", 
                "advancement.grant.one.to.one.success": "Granted the advancement %s to %s", 
                "advancement.revoke.criterion.to.many.failure": "Couldn't revoke criterion '%s' of advancement %s from %s players as they don't have it", 
                "advancement.revoke.criterion.to.many.success": "Revoked criterion '%s' of advancement %s from %s players", 
                "advancement.revoke.criterion.to.one.failure": "Couldn't revoke criterion '%s' of advancement %s from %s as they don't have it", 
                "advancement.revoke.criterion.to.one.success": "Revoked criterion '%s' of advancement %s from %s", 
                "advancement.revoke.many.to.many.failure": "Couldn't revoke %s advancements from %s players as they don't have them", 
                "advancement.revoke.many.to.many.success": "Revoked %s advancements from %s players", 
                "advancement.revoke.many.to.one.failure": "Couldn't revoke %s advancements from %s as they don't have them", 
                "advancement.revoke.many.to.one.success": "Revoked %s advancements from %s", 
                "advancement.revoke.one.to.many.failure": "Couldn't revoke advancement %s from %s players as they don't have it", 
                "advancement.revoke.one.to.many.success": "Revoked the advancement %s from %s players", 
                "advancement.revoke.one.to.one.failure": "Couldn't revoke advancement %s from %s as they don't have it", 
                "advancement.revoke.one.to.one.success": "Revoked the advancement %s from %s", 
                "ban.success": "Banned %s: %s", 
                "banip.info": "This ban affects %s players: %s", 
                "banip.success": "Banned IP %s: %s", 
                "banlist.entry": "%s was banned by %s: %s", 
                "banlist.list": "There are %s bans:", 
                "banlist.none": "There are no bans", 
                "bossbar.create.success": "Created custom bossbar %s", 
                "bossbar.get.max": "Custom bossbar %s has a maximum of %s", 
                "bossbar.get.players.none": "Custom bossbar %s has no players currently online", 
                "bossbar.get.players.some": "Custom bossbar %s has %s players currently online: %s", 
                "bossbar.get.value": "Custom bossbar %s has a value of %s", 
                "bossbar.get.visible.hidden": "Custom bossbar %s is currently hidden", 
                "bossbar.get.visible.visible": "Custom bossbar %s is currently shown", 
                "bossbar.list.bars.none": "There are no custom bossbars active", 
                "bossbar.list.bars.some": "There are %s custom bossbars active: %s", 
                "bossbar.remove.success": "Removed custom bossbar %s", 
                "bossbar.set.color.success": "Custom bossbar %s has changed color", 
                "bossbar.set.max.success": "Custom bossbar %s has changed maximum to %s", 
                "bossbar.set.name.success": "Custom bossbar %s has been renamed", 
                "bossbar.set.players.success.none": "Custom bossbar %s no longer has any players", 
                "bossbar.set.players.success.some": "Custom bossbar %s now has %s players: %s", 
                "bossbar.set.style.success": "Custom bossbar %s has changed style", 
                "bossbar.set.value.success": "Custom bossbar %s has changed value to %s", 
                "bossbar.set.visible.success.hidden": "Custom bossbar %s is now hidden", 
                "bossbar.set.visible.success.visible": "Custom bossbar %s is now visible", 
                "clear.success.multiple": "Removed %s items from %s players", 
                "clear.success.single": "Removed %s items from player %s", 
                "clear.test.multiple": "Found %s matching items on %s players", 
                "clear.test.single": "Found %s matching items on player %s", 
                "clone.success": "Successfully cloned %s blocks", 
                "data.block.get": "%s on block %s, %s, %s after scale factor of %s is %s", 
                "data.block.modified": "Modified block data of %s, %s, %s", 
                "data.block.query": "%s, %s, %s has the following block data: %s", 
                "data.entity.get": "%s on %s after scale factor of %s is %s", 
                "data.entity.modified": "Modified entity data of %s", 
                "data.entity.query": "%s has the following entity data: %s", 
                "datapack.disable.success": "Disabled data pack %s", 
                "datapack.enable.success": "Enabled data pack %s", 
                "datapack.list.available.none": "There are no more data packs available", 
                "datapack.list.available.success": "There are %s data packs available: %s", 
                "datapack.list.enabled.none": "There are no data packs enabled", 
                "datapack.list.enabled.success": "There are %s data packs enabled: %s", 
                "debug.started": "Started debug profiling", 
                "debug.stopped": "Stopped debug profiling after %s seconds and %s ticks (%s ticks per second)", 
                "defaultgamemode.success": "The default game mode is now %s", 
                "deop.success": "Made %s no longer a server operator", 
                "difficulty.query": "The difficulty is %s", 
                "difficulty.success": "The difficulty has been set to %s", 
                "effect.clear.everything.success.multiple": "Removed every effect from %s targets", 
                "effect.clear.everything.success.single": "Removed every effect from %s", 
                "effect.clear.specific.success.multiple": "Removed effect %s from %s targets", 
                "effect.clear.specific.success.single": "Removed effect %s from %s", 
                "effect.give.success.multiple": "Applied effect %s to %s targets", 
                "effect.give.success.single": "Applied effect %s to %s", 
                "enchant.success.multiple": "Applied enchantment %s to %s entities", 
                "enchant.success.single": "Applied enchantment %s to %s's item", 
                "experience.add.levels.success.multiple": "Gave %s experience levels to %s players", 
                "experience.add.levels.success.single": "Gave %s experience levels to %s", 
                "experience.add.points.success.multiple": "Gave %s experience points to %s players", 
                "experience.add.points.success.single": "Gave %s experience points to %s", 
                "experience.query.levels": "%s has %s experience levels", 
                "experience.query.points": "%s has %s experience points", 
                "experience.set.levels.success.multiple": "Set %s experience levels on %s players", 
                "experience.set.levels.success.single": "Set %s experience levels on %s", 
                "experience.set.points.success.multiple": "Set %s experience points on %s players", 
                "experience.set.points.success.single": "Set %s experience points on %s", 
                "fill.success": "Successfully filled %s blocks", 
                "function.success.multiple": "Executed %s commands from %s functions", 
                "function.success.single": "Executed %s commands from function '%s'", 
                "gamerule.query": "Gamerule %s is currently set to: %s", 
                "gamerule.set": "Gamerule %s is now set to: %s", 
                "give.success.multiple": "Gave %s %s to %s players", 
                "give.success.single": "Gave %s %s to %s", 
                "kick.success": "Kicked %s: %s", 
                "kill.success.multiple": "Killed %s entities", 
                "kill.success.single": "Killed %s", 
                "list.players": "There are %s of a max %s players online: %s", 
                "locate.success": "The nearest %s is at %s %s %s (%s blocks away)", 
                "message.display.incoming": "%s whispers to you: %s", 
                "message.display.outgoing": "You whisper to %s: %s", 
                "op.success": "Made %s a server operator", 
                "pardon.success": "Unbanned %s", 
                "pardonip.success": "Unbanned IP %s", 
                "particle.success": "Displaying particle %s", 
                "playsound.success.multiple": "Played sound %s to %s players", 
                "playsound.success.single": "Played sound %s to %s", 
                "publish.failed": "Unable to host local game", 
                "publish.started": "Local game hosted on port %s", 
                "publish.success": "Multiplayer game is now hosted on port %s", 
                "recipe.give.success.multiple": "Unlocked %s recipes for %s players", 
                "recipe.give.success.single": "Unlocked %s recipes for %s", 
                "recipe.take.success.multiple": "Took %s recipes from %s players", 
                "recipe.take.success.single": "Took %s recipes from %s", 
                "reload.success": "Reloading!", 
                "replaceitem.block.success": "Replaced a slot at %s, %s, %s with %s", 
                "replaceitem.entity.success.multiple": "Replaced a slot on %s entities with %s", 
                "replaceitem.entity.success.single": "Replaced a slot on %s with %s", 
                "save.disabled": "Automatic saving is now disabled", 
                "save.enabled": "Automatic saving is now enabled", 
                "save.saving": "Saving the game (this may take a moment!)", 
                "save.success": "Saved the game", 
                "scoreboard.objectives.add.success": "Created new objective %s", 
                "scoreboard.objectives.display.cleared": "Cleared any objectives in display slot %s", 
                "scoreboard.objectives.display.set": "Set display slot %s to show objective %s", 
                "scoreboard.objectives.list.empty": "There are no tracked objectives", 
                "scoreboard.objectives.list.success": "There are %s objectives: %s", 
                "scoreboard.objectives.remove.success": "Removed objective %s", 
                "scoreboard.players.add.success.multiple": "Added %s to %s for %s entities", 
                "scoreboard.players.add.success.single": "Added %s to %s for %s (now %s)", 
                "scoreboard.players.enable.success.multiple": "Enabled trigger %s for %s entities", 
                "scoreboard.players.enable.success.single": "Enabled trigger %s for %s", 
                "scoreboard.players.get.success": "%s has %s %s", 
                "scoreboard.players.list.empty": "There are no tracked entities", 
                "scoreboard.players.list.entity.empty": "%s has no scores to show", 
                "scoreboard.players.list.entity.entry": "%s: %s", 
                "scoreboard.players.list.entity.success": "%s has %s scores:", 
                "scoreboard.players.list.success": "There are %s tracked entities: %s", 
                "scoreboard.players.operation.success.multiple": "Updated %s for %s entities", 
                "scoreboard.players.operation.success.single": "Set %s for %s to %s", 
                "scoreboard.players.remove.success.multiple": "Removed %s from %s for %s entities", 
                "scoreboard.players.remove.success.single": "Removed %s from %s for %s (now %s)", 
                "scoreboard.players.reset.all.multiple": "Reset all scores for %s entities", 
                "scoreboard.players.reset.all.single": "Reset all scores for %s", 
                "scoreboard.players.reset.specific.multiple": "Reset %s for %s entities", 
                "scoreboard.players.reset.specific.single": "Reset %s for %s", 
                "scoreboard.players.set.success.multiple": "Set %s for %s entities to %s", 
                "scoreboard.players.set.success.single": "Set %s for %s to %s", 
                "seed.success": "Seed: %s", 
                "setblock.success": "Changed the block at %s, %s, %s", 
                "setidletimeout.success": "The player idle timeout is now %s minutes", 
                "setworldspawn.success": "Set the world spawn point to %s, %s, %s", 
                "spawnpoint.success.multiple": "Set spawn point to %s, %s, %s for %s players", 
                "spawnpoint.success.single": "Set spawn point to %s, %s, %s for %s", 
                "spreadplayers.success.entities": "Spread %s players around %s, %s with an average distance of %s blocks apart", 
                "spreadplayers.success.teams": "Spread %s teams around %s, %s with an average distance of %s blocks apart", 
                "stop.stopping": "Stopping the server", 
                "stopsound.success.source.any": "Stopped all '%s' sounds", 
                "stopsound.success.source.sound": "Stopped sound '%s' on source '%s'", 
                "stopsound.success.sourceless.any": "Stopped all sounds", 
                "stopsound.success.sourceless.sound": "Stopped sound '%s'", 
                "summon.success": "Summoned new %s", 
                "tag.add.success.multiple": "Added tag '%s' to %s entities", 
                "tag.add.success.single": "Added tag '%s' to %s", 
                "tag.list.multiple.empty": "There are no tags on the %s entities", 
                "tag.list.multiple.success": "The %s entities have %s total tags: %s", 
                "tag.list.single.empty": "%s has no tags", 
                "tag.list.single.success": "%s has %s tags: %s", 
                "tag.remove.success.multiple": "Removed tag '%s' from %s entities", 
                "tag.remove.success.single": "Removed tag '%s' from %s", 
                "team.add.success": "Created team %s", 
                "team.empty.success": "Removed %s members from team %s", 
                "team.join.success.multiple": "Added %s members to team %s", 
                "team.join.success.single": "Added %s to team %s", 
                "team.leave.success.multiple": "Removed %s members from any team", 
                "team.leave.success.single": "Removed %s from any team", 
                "team.list.members.empty": "There are no members on team %s", 
                "team.list.members.success": "Team %s has %s members: %s", 
                "team.list.teams.empty": "There are no teams", 
                "team.list.teams.success": "There are %s teams: %s", 
                "team.option.collisionRule.success": "Collision rule for team %s is now \"%s\"", 
                "team.option.color.success": "Updated the color for team %s to %s", 
                "team.option.deathMessageVisibility.success": "Death message visibility for team %s is now \"%s\"", 
                "team.option.friendlyfire.disabled": "Disabled friendly fire for team %s", 
                "team.option.friendlyfire.enabled": "Enabled friendly fire for team %s", 
                "team.option.nametagVisibility.success": "Nametag visibility for team %s is now \"%s\"", 
                "team.option.seeFriendlyInvisibles.disabled": "Team %s can no longer see invisible teammates", 
                "team.option.seeFriendlyInvisibles.enabled": "Team %s can now see invisible teammates", 
                "team.remove.success": "Removed team %s", 
                "teleport.success.entity.multiple": "Teleported %s entities to %s", 
                "teleport.success.entity.single": "Teleported %s to %s", 
                "teleport.success.location.multiple": "Teleported %s entities to %s, %s, %s", 
                "teleport.success.location.single": "Teleported %s to %s, %s, %s", 
                "time.query": "The time is %s", 
                "time.set": "Set the time to %s", 
                "title.cleared.multiple": "Cleared titles for %s players", 
                "title.cleared.single": "Cleared titles for %s", 
                "title.reset.multiple": "Reset title options for %s players", 
                "title.reset.single": "Reset title options for %s", 
                "title.show.actionbar.multiple": "Showing new actionbar title for %s players", 
                "title.show.actionbar.single": "Showing new actionbar title for %s", 
                "title.show.subtitle.multiple": "Showing new subtitle for %s players", 
                "title.show.subtitle.single": "Showing new subtitle for %s", 
                "title.show.title.multiple": "Showing new title for %s players", 
                "title.show.title.single": "Showing new title for %s", 
                "title.times.multiple": "Changed title display times for %s players", 
                "title.times.single": "Changed title display times for %s", 
                "trigger.add.success": "Triggered %s (added %s to value)", 
                "trigger.set.success": "Triggered %s (set value to %s)", 
                "trigger.simple.success": "Triggered %s", 
                "weather.set.clear": "Set the weather to clear", 
                "weather.set.rain": "Set the weather to rain", 
                "weather.set.thunder": "Set the weather to rain & thunder", 
                "whitelist.add.success": "Added %s to the whitelist", 
                "whitelist.disabled": "Whitelist is now turned off.", 
                "whitelist.enabled": "Whitelist is now turned on.", 
                "whitelist.list": "There are %s whitelisted players: %s", 
                "whitelist.none": "There are no whitelisted players", 
                "whitelist.reloaded": "Reloaded the whitelist", 
                "whitelist.remove.success": "Removed %s from the whitelist", 
                "worldborder.center.success": "Set the center of the world border to %s, %s", 
                "worldborder.damage.amount.success": "Set the world border damage time to %s seconds", 
                "worldborder.damage.buffer.success": "Set the world border damage buffer to %s blocks", 
                "worldborder.get": "The world border is currently %s blocks wide", 
                "worldborder.set.grow": "Growing the world border to %s blocks wide over %s seconds", 
                "worldborder.set.immediate": "Set the world border to %s blocks wide", 
                "worldborder.set.shrink": "Shrinking the world border to %s blocks wide over %s seconds", 
                "worldborder.warning.distance.success": "Set the world border warning distance to %s blocks", 
                "worldborder.warning.time.success": "Set the world border warning time to %s seconds"
            }, 
            "connect": {
                "authorizing": "Logging in...", 
                "connecting": "Connecting to the server...", 
                "failed": "Failed to connect to the server"
            }, 
            "container": {
                "beacon": "Beacon", 
                "brewing": "Brewing Stand", 
                "chest": "Chest", 
                "chestDouble": "Large Chest", 
                "crafting": "Crafting", 
                "creative": "Item Selection", 
                "dispenser": "Dispenser", 
                "dropper": "Dropper", 
                "enchant": "Enchant", 
                "enchant.clue": "%s . . . ?", 
                "enchant.lapis.many": "%s Lapis Lazuli", 
                "enchant.lapis.one": "1 Lapis Lazuli", 
                "enchant.level.many": "%s Enchantment Levels", 
                "enchant.level.one": "1 Enchantment Level", 
                "enchant.level.requirement": "Level requirement: %s", 
                "enderchest": "Ender Chest", 
                "furnace": "Furnace", 
                "hopper": "Item Hopper", 
                "inventory": "Inventory", 
                "isLocked": "%s is locked!", 
                "repair": "Repair & Name", 
                "repair.cost": "Enchantment Cost: %1$s", 
                "repair.expensive": "Too Expensive!", 
                "shulkerBox": "Shulker Box", 
                "shulkerBox.more": "and %s more...", 
                "spectatorCantOpen": "Unable to open. Loot not generated yet."
            }, 
            "controls": {
                "reset": "Reset", 
                "resetAll": "Reset Keys", 
                "title": "Controls"
            }, 
            "createWorld": {
                "customize.custom.baseSize": "Depth Base Size", 
                "customize.custom.biomeDepthOffset": "Biome Depth Offset", 
                "customize.custom.biomeDepthWeight": "Biome Depth Weight", 
                "customize.custom.biomeScaleOffset": "Biome Scale Offset", 
                "customize.custom.biomeScaleWeight": "Biome Scale Weight", 
                "customize.custom.biomeSize": "Biome Size", 
                "customize.custom.center": "Center Height", 
                "customize.custom.confirm1": "This will overwrite your current", 
                "customize.custom.confirm2": "settings and cannot be undone.", 
                "customize.custom.confirmTitle": "Warning!", 
                "customize.custom.coordinateScale": "Coordinate Scale", 
                "customize.custom.count": "Spawn Tries", 
                "customize.custom.defaults": "Defaults", 
                "customize.custom.depthNoiseScaleExponent": "Depth Noise Exponent", 
                "customize.custom.depthNoiseScaleX": "Depth Noise Scale X", 
                "customize.custom.depthNoiseScaleZ": "Depth Noise Scale Z", 
                "customize.custom.dungeonChance": "Dungeon Count", 
                "customize.custom.fixedBiome": "Biome", 
                "customize.custom.heightScale": "Height Scale", 
                "customize.custom.lavaLakeChance": "Lava Lake Rarity", 
                "customize.custom.lowerLimitScale": "Lower Limit Scale", 
                "customize.custom.mainNoiseScaleX": "Main Noise Scale X", 
                "customize.custom.mainNoiseScaleY": "Main Noise Scale Y", 
                "customize.custom.mainNoiseScaleZ": "Main Noise Scale Z", 
                "customize.custom.maxHeight": "Max. Height", 
                "customize.custom.minHeight": "Min. Height", 
                "customize.custom.next": "Next Page", 
                "customize.custom.page0": "Basic Settings", 
                "customize.custom.page1": "Ore Settings", 
                "customize.custom.page2": "Advanced Settings (Expert Users Only!)", 
                "customize.custom.page3": "Extra Advanced Settings (Expert Users Only!)", 
                "customize.custom.preset.caveChaos": "Caves of Chaos", 
                "customize.custom.preset.caveDelight": "Caver's Delight", 
                "customize.custom.preset.drought": "Drought", 
                "customize.custom.preset.goodLuck": "Good Luck", 
                "customize.custom.preset.isleLand": "Isle Land", 
                "customize.custom.preset.mountains": "Mountain Madness", 
                "customize.custom.preset.waterWorld": "Water World", 
                "customize.custom.presets": "Presets", 
                "customize.custom.presets.title": "Customize World Presets", 
                "customize.custom.prev": "Previous Page", 
                "customize.custom.randomize": "Randomize", 
                "customize.custom.riverSize": "River Size", 
                "customize.custom.seaLevel": "Sea Level", 
                "customize.custom.size": "Spawn Size", 
                "customize.custom.spread": "Spread Height", 
                "customize.custom.stretchY": "Height Stretch", 
                "customize.custom.upperLimitScale": "Upper Limit Scale", 
                "customize.custom.useCaves": "Caves", 
                "customize.custom.useDungeons": "Dungeons", 
                "customize.custom.useLavaLakes": "Lava Lakes", 
                "customize.custom.useLavaOceans": "Lava Oceans", 
                "customize.custom.useMansions": "Woodland Mansions", 
                "customize.custom.useMineShafts": "Mineshafts", 
                "customize.custom.useMonuments": "Ocean Monuments", 
                "customize.custom.useRavines": "Ravines", 
                "customize.custom.useStrongholds": "Strongholds", 
                "customize.custom.useTemples": "Temples", 
                "customize.custom.useVillages": "Villages", 
                "customize.custom.useWaterLakes": "Water Lakes", 
                "customize.custom.waterLakeChance": "Water Lake Rarity", 
                "customize.flat.addLayer": "Add Layer", 
                "customize.flat.editLayer": "Edit Layer", 
                "customize.flat.height": "Height", 
                "customize.flat.layer": "%s", 
                "customize.flat.layer.bottom": "Bottom - %s", 
                "customize.flat.layer.top": "Top - %s", 
                "customize.flat.removeLayer": "Remove Layer", 
                "customize.flat.tile": "Layer Material", 
                "customize.flat.title": "Superflat Customization", 
                "customize.preset.bottomless_pit": "Bottomless Pit", 
                "customize.preset.classic_flat": "Classic Flat", 
                "customize.preset.desert": "Desert", 
                "customize.preset.overworld": "Overworld", 
                "customize.preset.redstone_ready": "Redstone Ready", 
                "customize.preset.snowy_kingdom": "Snowy Kingdom", 
                "customize.preset.the_void": "The Void", 
                "customize.preset.tunnelers_dream": "Tunnelers' Dream", 
                "customize.preset.water_world": "Water World", 
                "customize.presets": "Presets", 
                "customize.presets.list": "Alternatively, here's some we made earlier!", 
                "customize.presets.select": "Use Preset", 
                "customize.presets.share": "Want to share your preset with someone? Use the below box!", 
                "customize.presets.title": "Select a Preset"
            }, 
            "death": {
                "attack.anvil": "%1$s was squashed by a falling anvil", 
                "attack.anvil.player": "%1$s was squashed by a falling anvil whilst fighting %2$s", 
                "attack.arrow": "%1$s was shot by %2$s", 
                "attack.arrow.item": "%1$s was shot by %2$s using %3$s", 
                "attack.cactus": "%1$s was pricked to death", 
                "attack.cactus.player": "%1$s walked into a cactus whilst trying to escape %2$s", 
                "attack.cramming": "%1$s was squished too much", 
                "attack.cramming.player": "%1$s was squashed by %2$s", 
                "attack.dragonBreath": "%1$s was roasted in dragon breath", 
                "attack.dragonBreath.player": "%1$s was roasted in dragon breath by %2$s", 
                "attack.drown": "%1$s drowned", 
                "attack.drown.player": "%1$s drowned whilst trying to escape %2$s", 
                "attack.explosion": "%1$s blew up", 
                "attack.explosion.player": "%1$s was blown up by %2$s", 
                "attack.explosion.player.item": "%1$s was blown up by %2$s using %3$s", 
                "attack.fall": "%1$s hit the ground too hard", 
                "attack.fall.player": "%1$s hit the ground too hard whilst trying to escape %2$s", 
                "attack.fallingBlock": "%1$s was squashed by a falling block", 
                "attack.fallingBlock.player": "%1$s was squashed by a falling block whilst fighting %2$s", 
                "attack.fireball": "%1$s was fireballed by %2$s", 
                "attack.fireball.item": "%1$s was fireballed by %2$s using %3$s", 
                "attack.fireworks": "%1$s went off with a bang", 
                "attack.fireworks.player": "%1$s went off with a bang whilst fighting %2$s", 
                "attack.flyIntoWall": "%1$s experienced kinetic energy", 
                "attack.flyIntoWall.player": "%1$s experienced kinetic energy whilst trying to escape %2$s", 
                "attack.generic": "%1$s died", 
                "attack.generic.player": "%1$s died because of %2$s", 
                "attack.hotFloor": "%1$s discovered floor was lava", 
                "attack.hotFloor.player": "%1$s walked into danger zone due to %2$s", 
                "attack.inFire": "%1$s went up in flames", 
                "attack.inFire.player": "%1$s walked into fire whilst fighting %2$s", 
                "attack.inWall": "%1$s suffocated in a wall", 
                "attack.inWall.player": "%1$s suffocated in a wall whilst fighting %2$s", 
                "attack.indirectMagic": "%1$s was killed by %2$s using magic", 
                "attack.indirectMagic.item": "%1$s was killed by %2$s using %3$s", 
                "attack.lava": "%1$s tried to swim in lava", 
                "attack.lava.player": "%1$s tried to swim in lava to escape %2$s", 
                "attack.lightningBolt": "%1$s was struck by lightning", 
                "attack.lightningBolt.player": "%1$s was struck by lightning whilst fighting %2$s", 
                "attack.magic": "%1$s was killed by magic", 
                "attack.mob": "%1$s was slain by %2$s", 
                "attack.mob.item": "%1$s was slaim by %2$s using %3$s", 
                "attack.netherBed.link": "Intentional Game Design", 
                "attack.netherBed.message": "%1$s was killed by %2$s", 
                "attack.onFire": "%1$s burned to death", 
                "attack.onFire.player": "%1$s was burnt to a crisp whilst fighting %2$s", 
                "attack.outOfWorld": "%1$s fell out of the world", 
                "attack.outOfWorld.player": "%1$s didn't want to live in the same world as %2$s", 
                "attack.player": "%1$s was slain by %2$s", 
                "attack.player.item": "%1$s was slain by %2$s using %3$s", 
                "attack.starve": "%1$s starved to death", 
                "attack.starve.player": "%1$s starved to death whilst fighting %2$s", 
                "attack.thorns": "%1$s was killed trying to hurt %2$s", 
                "attack.thorns.item": "%1$s was killed by %3$s trying to hurt %2$s", 
                "attack.thrown": "%1$s was pummeled by %2$s", 
                "attack.thrown.item": "%1$s was pummeled by %2$s using %3$s", 
                "attack.trident": "%1$s was impaled by %2$s", 
                "attack.trident.item": "%1$s was impaled by %2$s with %3$s", 
                "attack.wither": "%1$s withered away", 
                "attack.wither.player": "%1$s withered away whilst fighting %2$s", 
                "fell.accident.generic": "%1$s fell from a high place", 
                "fell.accident.ladder": "%1$s fell off a ladder", 
                "fell.accident.vines": "%1$s fell off some vines", 
                "fell.accident.water": "%1$s fell out of the water", 
                "fell.assist": "%1$s was doomed to fall by %2$s", 
                "fell.assist.item": "%1$s was doomed to fall by %2$s using %3$s", 
                "fell.finish": "%1$s fell too far and was finished by %2$s", 
                "fell.finish.item": "%1$s fell too far and was finished by %2$s using %3$s", 
                "fell.killer": "%1$s was doomed to fall"
            }, 
            "deathScreen": {
                "deleteWorld": "Delete world", 
                "leaveServer": "Leave server", 
                "quit.confirm": "Are you sure you want to quit?", 
                "respawn": "Respawn", 
                "score": "Score", 
                "spectate": "Spectate world", 
                "title": "You died!", 
                "title.hardcore": "Game over!", 
                "titleScreen": "Title screen"
            }, 
            "debug": {
                "advanced_tooltips.help": "F3 + H = Advanced tooltips", 
                "advanced_tooltips.off": "Advanced tooltips: hidden", 
                "advanced_tooltips.on": "Advanced tooltips: shown", 
                "chunk_boundaries.help": "F3 + G = Show chunk boundaries", 
                "chunk_boundaries.off": "Chunk borders: hidden", 
                "chunk_boundaries.on": "Chunk borders: shown", 
                "clear_chat.help": "F3 + D = Clear chat", 
                "creative_spectator.error": "Unable to switch gamemode, no permission", 
                "creative_spectator.help": "F3 + N = Cycle creative <-> spectator", 
                "cycle_renderdistance.help": "F3 + F = Cycle render distance (Shift to invert)", 
                "cycle_renderdistance.message": "Render Distance: %s", 
                "help.help": "F3 + Q = Show this list", 
                "help.message": "Key bindings:", 
                "pause_focus.help": "F3 + P = Pause on lost focus", 
                "pause_focus.off": "Pause on lost focus: disabled", 
                "pause_focus.on": "Pause on lost focus: enabled", 
                "prefix": "[Debug]:", 
                "reload_chunks.help": "F3 + A = Reload chunks", 
                "reload_chunks.message": "Reloading all chunks", 
                "reload_resourcepacks.help": "F3 + T = Reload resource packs", 
                "reload_resourcepacks.message": "Reloaded resource packs", 
                "show_hitboxes.help": "F3 + B = Show hitboxes", 
                "show_hitboxes.off": "Hitboxes: hidden", 
                "show_hitboxes.on": "Hitboxes: shown"
            }, 
            "demo": {
                "day.1": "This demo will last five game days, do your best!", 
                "day.2": "Day Two", 
                "day.3": "Day Three", 
                "day.4": "Day Four", 
                "day.5": "This is your last day!", 
                "day.6": "You have passed your fifth day, use F2 to save a screenshot of your creation", 
                "day.warning": "Your time is almost up!", 
                "demoExpired": "Demo time's up!", 
                "help.buy": "Purchase Now!", 
                "help.fullWrapped": "This demo will last 5 ingame days (about 1 hour and 40 minutes of real time). Check the advancements for hints! Have fun!", 
                "help.inventory": "Use the %1$s key to open your inventory", 
                "help.jump": "Jump by pressing the %1$s key", 
                "help.later": "Continue Playing!", 
                "help.movement": "Use the %1$s, %2$s, %3$s, %4$s keys and the mouse to move around", 
                "help.movementMouse": "Look around using the mouse", 
                "help.movementShort": "Move by pressing the %1$s, %2$s, %3$s, %4$s keys", 
                "help.title": "Minecraft Demo Mode", 
                "remainingTime": "Remaining time: %s", 
                "reminder": "The demo time has expired, buy the game to continue or start a new world!"
            }, 
            "difficulty": {
                "lock.question": "Are you sure you want to lock the difficulty of this world? This will set this world to always be %1$s, and you will never be able to change that again.", 
                "lock.title": "Lock World Difficulty"
            }, 
            "disconnect": {
                "closed": "Connection closed", 
                "disconnected": "Disconnected by Server", 
                "endOfStream": "End of stream", 
                "genericReason": "%s", 
                "kicked": "Was kicked from the game", 
                "loginFailed": "Failed to login", 
                "loginFailedInfo": "Failed to login: %s", 
                "loginFailedInfo.invalidSession": "Invalid session (Try restarting your game and the launcher)", 
                "loginFailedInfo.serversUnavailable": "The authentication servers are currently down for maintenance.", 
                "lost": "Connection Lost", 
                "overflow": "Buffer overflow", 
                "quitting": "Quitting", 
                "spam": "Kicked for spamming", 
                "timeout": "Timed out"
            }, 
            "effect": {
                "absorption": "Absorption", 
                "blindness": "Blindness", 
                "confusion": "Nausea", 
                "damageBoost": "Strength", 
                "digSlowDown": "Mining Fatigue", 
                "digSpeed": "Haste", 
                "fireResistance": "Fire Resistance", 
                "glowing": "Glowing", 
                "harm": "Instant Damage", 
                "heal": "Instant Health", 
                "healthBoost": "Health Boost", 
                "hunger": "Hunger", 
                "invisibility": "Invisibility", 
                "jump": "Jump Boost", 
                "levitation": "Levitation", 
                "luck": "Luck", 
                "moveSlowdown": "Slowness", 
                "moveSpeed": "Speed", 
                "nightVision": "Night Vision", 
                "none": "No Effects", 
                "poison": "Poison", 
                "regeneration": "Regeneration", 
                "resistance": "Resistance", 
                "saturation": "Saturation", 
                "unluck": "Bad Luck", 
                "waterBreathing": "Water Breathing", 
                "weakness": "Weakness", 
                "wither": "Wither"
            }, 
            "enchantment": {
                "arrowDamage": "Power", 
                "arrowFire": "Flame", 
                "arrowInfinite": "Infinity", 
                "arrowKnockback": "Punch", 
                "binding_curse": "Curse of Binding", 
                "damage.all": "Sharpness", 
                "damage.arthropods": "Bane of Arthropods", 
                "damage.undead": "Smite", 
                "digging": "Efficiency", 
                "durability": "Unbreaking", 
                "fire": "Fire Aspect", 
                "fishingSpeed": "Lure", 
                "frostWalker": "Frost Walker", 
                "knockback": "Knockback", 
                "level.1": "I", 
                "level.10": "X", 
                "level.2": "II", 
                "level.3": "III", 
                "level.4": "IV", 
                "level.5": "V", 
                "level.6": "VI", 
                "level.7": "VII", 
                "level.8": "VIII", 
                "level.9": "IX", 
                "lootBonus": "Looting", 
                "lootBonusDigger": "Fortune", 
                "lootBonusFishing": "Luck of the Sea", 
                "mending": "Mending", 
                "oxygen": "Respiration", 
                "protect.all": "Protection", 
                "protect.explosion": "Blast Protection", 
                "protect.fall": "Feather Falling", 
                "protect.fire": "Fire Protection", 
                "protect.projectile": "Projectile Protection", 
                "sweeping": "Sweeping Edge", 
                "thorns": "Thorns", 
                "trident_channeling": "Channeling", 
                "trident_impaling": "Impaling", 
                "trident_loyalty": "Loyalty", 
                "trident_riptide": "Riptide", 
                "untouching": "Silk Touch", 
                "vanishing_curse": "Curse of Vanishing", 
                "waterWalker": "Depth Strider", 
                "waterWorker": "Aqua Affinity"
            }, 
            "entity": {
                "minecraft.area_effect_cloud": "Area Effect Cloud", 
                "minecraft.armor_stand": "Armor Stand", 
                "minecraft.arrow": "Arrow", 
                "minecraft.bat": "Bat", 
                "minecraft.blaze": "Blaze", 
                "minecraft.boat": "Boat", 
                "minecraft.cat": "Cat", 
                "minecraft.cave_spider": "Cave Spider", 
                "minecraft.chest_minecart": "Minecart with Chest", 
                "minecraft.chicken": "Chicken", 
                "minecraft.commandblock_minecart": "Minecart with Command Block", 
                "minecraft.cow": "Cow", 
                "minecraft.creeper": "Creeper", 
                "minecraft.donkey": "Donkey", 
                "minecraft.dragon_fireball": "Dragon Fireball", 
                "minecraft.egg": "Thrown Egg", 
                "minecraft.elder_guardian": "Elder Guardian", 
                "minecraft.ender_crystal": "Ender Crystal", 
                "minecraft.ender_dragon": "Ender Dragon", 
                "minecraft.ender_pearl": "Thrown Ender Pearl", 
                "minecraft.enderman": "Enderman", 
                "minecraft.endermite": "Endermite", 
                "minecraft.evocation_fangs": "Evocation Fangs", 
                "minecraft.evocation_illager": "Evoker", 
                "minecraft.eye_of_ender_signal": "Eye of Ender Signal", 
                "minecraft.falling_block": "Falling Block", 
                "minecraft.fireball": "Fireball", 
                "minecraft.fireworks_rocket": "Firework Rocket", 
                "minecraft.fishing_bobber": "Fishing Bobber", 
                "minecraft.furnace_minecart": "Minecart with Furnace", 
                "minecraft.ghast": "Ghast", 
                "minecraft.giant": "Giant", 
                "minecraft.guardian": "Guardian", 
                "minecraft.hopper_minecart": "Minecart with Hopper", 
                "minecraft.horse": "Horse", 
                "minecraft.husk": "Husk", 
                "minecraft.illusion_illager": "Illusioner", 
                "minecraft.item": "Item", 
                "minecraft.item_frame": "Item Frame", 
                "minecraft.killer_bunny": "The Killer Bunny", 
                "minecraft.leash_knot": "Leash Knot", 
                "minecraft.lightning_bolt": "Bolt of Lightning", 
                "minecraft.llama": "Llama", 
                "minecraft.llama_spit": "Llama Spit", 
                "minecraft.magma_cube": "Magma Cube", 
                "minecraft.minecart": "Minecart", 
                "minecraft.mooshroom": "Mooshroom", 
                "minecraft.mule": "Mule", 
                "minecraft.ocelot": "Ocelot", 
                "minecraft.painting": "Painting", 
                "minecraft.parrot": "Parrot", 
                "minecraft.phantom": "Phantom", 
                "minecraft.pig": "Pig", 
                "minecraft.player": "Player", 
                "minecraft.polar_bear": "Polar Bear", 
                "minecraft.potion": "Potion", 
                "minecraft.rabbit": "Rabbit", 
                "minecraft.sheep": "Sheep", 
                "minecraft.shulker": "Shulker", 
                "minecraft.shulker_bullet": "Shulker Bullet", 
                "minecraft.silverfish": "Silverfish", 
                "minecraft.skeleton": "Skeleton", 
                "minecraft.skeleton_horse": "Skeleton Horse", 
                "minecraft.slime": "Slime", 
                "minecraft.small_fireball": "Small Fireball", 
                "minecraft.snowball": "Snowball", 
                "minecraft.snowman": "Snow Golem", 
                "minecraft.spawner_minecart": "Minecart with Spawner", 
                "minecraft.spectral_arrow": "Spectral Arrow", 
                "minecraft.spider": "Spider", 
                "minecraft.squid": "Squid", 
                "minecraft.stray": "Stray", 
                "minecraft.tnt": "Block of TNT", 
                "minecraft.tnt_minecart": "Minecart with TNT", 
                "minecraft.trident": "Trident", 
                "minecraft.turtle": "Turtle", 
                "minecraft.vex": "Vex", 
                "minecraft.villager": "Villager", 
                "minecraft.villager.armorer": "Armorer", 
                "minecraft.villager.butcher": "Butcher", 
                "minecraft.villager.cartographer": "Cartographer", 
                "minecraft.villager.cleric": "Cleric", 
                "minecraft.villager.farmer": "Farmer", 
                "minecraft.villager.fisherman": "Fisherman", 
                "minecraft.villager.fletcher": "Fletcher", 
                "minecraft.villager.leatherworker": "Leatherworker", 
                "minecraft.villager.librarian": "Librarian", 
                "minecraft.villager.nitwit": "Nitwit", 
                "minecraft.villager.shepherd": "Shepherd", 
                "minecraft.villager.tool_smith": "Tool Smith", 
                "minecraft.villager.weapon_smith": "Weapon Smith", 
                "minecraft.villager_golem": "Iron Golem", 
                "minecraft.vindication_illager": "Vindicator", 
                "minecraft.witch": "Witch", 
                "minecraft.wither": "Wither", 
                "minecraft.wither_skeleton": "Wither Skeleton", 
                "minecraft.wither_skull": "Wither Skull", 
                "minecraft.wolf": "Wolf", 
                "minecraft.xp_bottle": "Thrown Bottle o' Enchanting", 
                "minecraft.xp_orb": "Experience Orb", 
                "minecraft.zombie": "Zombie", 
                "minecraft.zombie_horse": "Zombie Horse", 
                "minecraft.zombie_pigman": "Zombie Pigman", 
                "minecraft.zombie_villager": "Zombie Villager"
            }, 
            "filled_map": {
                "id": "Id #%s", 
                "level": "(Level %s/%s)", 
                "mansion": "Woodland Explorer Map", 
                "monument": "Ocean Explorer Map", 
                "scale": "Scaling at 1:%s", 
                "unknown": "Unknown Map"
            }, 
            "gameMode": {
                "adventure": "Adventure Mode", 
                "changed": "Your game mode has been updated to %s", 
                "creative": "Creative Mode", 
                "hardcore": "Hardcore Mode!", 
                "spectator": "Spectator Mode", 
                "survival": "Survival Mode"
            }, 
            "generator": {
                "amplified": "AMPLIFIED", 
                "amplified.info": "Notice: Just for fun, requires beefy computer", 
                "customized": "Customized", 
                "debug_all_block_states": "Debug Mode", 
                "default": "Default", 
                "flat": "Superflat", 
                "largeBiomes": "Large Biomes"
            }, 
            "gui": {
                "advancements": "Advancements", 
                "all": "All", 
                "back": "Back", 
                "cancel": "Cancel", 
                "done": "Done", 
                "down": "Down", 
                "no": "No", 
                "none": "None", 
                "recipebook.moreRecipes": "Right Click for more", 
                "recipebook.toggleRecipes.all": "Showing all", 
                "recipebook.toggleRecipes.craftable": "Showing craftable", 
                "stats": "Statistics", 
                "toMenu": "Back to server list", 
                "toTitle": "Back to title screen", 
                "up": "Up", 
                "yes": "Yes"
            }, 
            "inventory": {
                "binSlot": "Destroy Item", 
                "hotbarInfo": "Save toolbar with %1$s+%2$s", 
                "hotbarSaved": "Item toolbar saved (restore with %1$s+%2$s)"
            }, 
            "item": {
                "canBreak": "Can break:", 
                "canPlace": "Can be placed on:", 
                "color": "Color: %s", 
                "durability": "Durability: %s / %s", 
                "dyed": "Dyed", 
                "leaves.name": "Leaves", 
                "minecraft.acacia_boat": "Acacia Boat", 
                "minecraft.apple": "Apple", 
                "minecraft.armor_stand": "Armor Stand", 
                "minecraft.arrow": "Arrow", 
                "minecraft.baked_potato": "Baked Potato", 
                "minecraft.bat_spawn_egg": "Spawn Bat", 
                "minecraft.beef": "Raw Beef", 
                "minecraft.beetroot": "Beetroot", 
                "minecraft.beetroot_seeds": "Beetroot Seeds", 
                "minecraft.beetroot_soup": "Beetroot Soup", 
                "minecraft.birch_boat": "Birch Boat", 
                "minecraft.blaze_powder": "Blaze Powder", 
                "minecraft.blaze_rod": "Blaze Rod", 
                "minecraft.blaze_spawn_egg": "Spawn Blaze", 
                "minecraft.bone": "Bone", 
                "minecraft.bone_meal": "Bone Meal", 
                "minecraft.book": "Book", 
                "minecraft.bow": "Bow", 
                "minecraft.bowl": "Bowl", 
                "minecraft.bread": "Bread", 
                "minecraft.brewing_stand": "Brewing Stand", 
                "minecraft.brick": "Brick", 
                "minecraft.bucket": "Bucket", 
                "minecraft.cactus_green": "Cactus Green", 
                "minecraft.carrot": "Carrot", 
                "minecraft.carrot_on_a_stick": "Carrot on a Stick", 
                "minecraft.cauldron": "Cauldron", 
                "minecraft.cave_spider_spawn_egg": "Spawn Cave Spider", 
                "minecraft.chainmail_boots": "Chain Boots", 
                "minecraft.chainmail_chestplate": "Chain Chestplate", 
                "minecraft.chainmail_helmet": "Chain Helmet", 
                "minecraft.chainmail_leggings": "Chain Leggings", 
                "minecraft.charcoal": "Charcoal", 
                "minecraft.chest_minecart": "Minecart with Chest", 
                "minecraft.chicken": "Raw Chicken", 
                "minecraft.chicken_spawn_egg": "Spawn Chicken", 
                "minecraft.chorus_fruit": "Chorus Fruit", 
                "minecraft.chorus_fruit_popped": "Popped Chorus Fruit", 
                "minecraft.clay_ball": "Clay", 
                "minecraft.clock": "Clock", 
                "minecraft.clownfish": "Clownfish", 
                "minecraft.coal": "Coal", 
                "minecraft.cocoa_beans": "Cocoa Beans", 
                "minecraft.cod": "Raw Cod", 
                "minecraft.command_block_minecart": "Minecart with Command Block", 
                "minecraft.compass": "Compass", 
                "minecraft.cooked_beef": "Steak", 
                "minecraft.cooked_chicken": "Cooked Chicken", 
                "minecraft.cooked_cod": "Cooked Cod", 
                "minecraft.cooked_mutton": "Cooked Mutton", 
                "minecraft.cooked_porkchop": "Cooked Porkchop", 
                "minecraft.cooked_rabbit": "Cooked Rabbit", 
                "minecraft.cooked_salmon": "Cooked Salmon", 
                "minecraft.cookie": "Cookie", 
                "minecraft.cow_spawn_egg": "Spawn Cow", 
                "minecraft.creeper_head": "Creeper Head", 
                "minecraft.creeper_spawn_egg": "Spawn Creeper", 
                "minecraft.cyan_dye": "Cyan Dye", 
                "minecraft.dandelion_yellow": "Dandelion Yellow", 
                "minecraft.dark_oak_boat": "Dark Oak Boat", 
                "minecraft.debug_stick": "Debug Stick", 
                "minecraft.diamond": "Diamond", 
                "minecraft.diamond_axe": "Diamond Axe", 
                "minecraft.diamond_boots": "Diamond Boots", 
                "minecraft.diamond_chestplate": "Diamond Chestplate", 
                "minecraft.diamond_helmet": "Diamond Helmet", 
                "minecraft.diamond_hoe": "Diamond Hoe", 
                "minecraft.diamond_horse_armor": "Diamond Horse Armor", 
                "minecraft.diamond_leggings": "Diamond Leggings", 
                "minecraft.diamond_pickaxe": "Diamond Pickaxe", 
                "minecraft.diamond_shovel": "Diamond Shovel", 
                "minecraft.diamond_sword": "Diamond Sword", 
                "minecraft.donkey_spawn_egg": "Spawn Donkey", 
                "minecraft.dragon_breath": "Dragon's Breath", 
                "minecraft.dragon_head": "Dragon Head", 
                "minecraft.dried_kelp": "Dried Kelp", 
                "minecraft.egg": "Egg", 
                "minecraft.elder_guardian_spawn_egg": "Spawn Elder Guardian", 
                "minecraft.elytra": "Elytra", 
                "minecraft.emerald": "Emerald", 
                "minecraft.enchanted_book": "Enchanted Book", 
                "minecraft.enchanted_golden_apple": "Enchanted Golden Apple", 
                "minecraft.end_crystal": "End Crystal", 
                "minecraft.ender_eye": "Eye of Ender", 
                "minecraft.ender_pearl": "Ender Pearl", 
                "minecraft.enderman_spawn_egg": "Spawn Enderman", 
                "minecraft.endermite_spawn_egg": "Spawn Endermite", 
                "minecraft.evocation_illager_spawn_egg": "Spawn Evoker", 
                "minecraft.experience_bottle": "Bottle o' Enchanting", 
                "minecraft.feather": "Feather", 
                "minecraft.fermented_spider_eye": "Fermented Spider Eye", 
                "minecraft.filled_map": "Map", 
                "minecraft.fire_charge": "Fire Charge", 
                "minecraft.firework_rocket": "Firework Rocket", 
                "minecraft.firework_rocket.flight": "Flight Duration:", 
                "minecraft.firework_star": "Firework Star", 
                "minecraft.firework_star.black": "Black", 
                "minecraft.firework_star.blue": "Blue", 
                "minecraft.firework_star.brown": "Brown", 
                "minecraft.firework_star.custom_color": "Custom", 
                "minecraft.firework_star.cyan": "Cyan", 
                "minecraft.firework_star.fade_to": "Fade to", 
                "minecraft.firework_star.flicker": "Twinkle", 
                "minecraft.firework_star.gray": "Gray", 
                "minecraft.firework_star.green": "Green", 
                "minecraft.firework_star.light_blue": "Light Blue", 
                "minecraft.firework_star.light_gray": "Light Gray", 
                "minecraft.firework_star.lime": "Lime", 
                "minecraft.firework_star.magenta": "Magenta", 
                "minecraft.firework_star.orange": "Orange", 
                "minecraft.firework_star.pink": "Pink", 
                "minecraft.firework_star.purple": "Purple", 
                "minecraft.firework_star.red": "Red", 
                "minecraft.firework_star.shape": "Unknown Shape", 
                "minecraft.firework_star.shape.burst": "Burst", 
                "minecraft.firework_star.shape.creeper": "Creeper-shaped", 
                "minecraft.firework_star.shape.large_ball": "Large Ball", 
                "minecraft.firework_star.shape.small_ball": "Small Ball", 
                "minecraft.firework_star.shape.star": "Star-shaped", 
                "minecraft.firework_star.trail": "Trail", 
                "minecraft.firework_star.white": "White", 
                "minecraft.firework_star.yellow": "Yellow", 
                "minecraft.fishing_rod": "Fishing Rod", 
                "minecraft.flint": "Flint", 
                "minecraft.flint_and_steel": "Flint and Steel", 
                "minecraft.flower_pot": "Flower Pot", 
                "minecraft.furnace_minecart": "Minecart with Furnace", 
                "minecraft.ghast_spawn_egg": "Spawn Ghast", 
                "minecraft.ghast_tear": "Ghast Tear", 
                "minecraft.glass_bottle": "Glass Bottle", 
                "minecraft.glowstone_dust": "Glowstone Dust", 
                "minecraft.gold_ingot": "Gold Ingot", 
                "minecraft.gold_nugget": "Gold Nugget", 
                "minecraft.golden_apple": "Golden Apple", 
                "minecraft.golden_axe": "Golden Axe", 
                "minecraft.golden_boots": "Golden Boots", 
                "minecraft.golden_carrot": "Golden Carrot", 
                "minecraft.golden_chestplate": "Golden Chestplate", 
                "minecraft.golden_helmet": "Golden Helmet", 
                "minecraft.golden_hoe": "Golden Hoe", 
                "minecraft.golden_horse_armor": "Gold Horse Armor", 
                "minecraft.golden_leggings": "Golden Leggings", 
                "minecraft.golden_pickaxe": "Golden Pickaxe", 
                "minecraft.golden_shovel": "Golden Shovel", 
                "minecraft.golden_sword": "Golden Sword", 
                "minecraft.gray_dye": "Gray Dye", 
                "minecraft.guardian_spawn_egg": "Spawn Guardian", 
                "minecraft.gunpowder": "Gunpowder", 
                "minecraft.hopper_minecart": "Minecart with Hopper", 
                "minecraft.horse_spawn_egg": "Spawn Horse", 
                "minecraft.husk_spawn_egg": "Spawn Husk", 
                "minecraft.ink_sac": "Ink Sac", 
                "minecraft.iron_axe": "Iron Axe", 
                "minecraft.iron_boots": "Iron Boots", 
                "minecraft.iron_chestplate": "Iron Chestplate", 
                "minecraft.iron_helmet": "Iron Helmet", 
                "minecraft.iron_hoe": "Iron Hoe", 
                "minecraft.iron_horse_armor": "Iron Horse Armor", 
                "minecraft.iron_ingot": "Iron Ingot", 
                "minecraft.iron_leggings": "Iron Leggings", 
                "minecraft.iron_nugget": "Iron Nugget", 
                "minecraft.iron_pickaxe": "Iron Pickaxe", 
                "minecraft.iron_shovel": "Iron Shovel", 
                "minecraft.iron_sword": "Iron Sword", 
                "minecraft.item_frame": "Item Frame", 
                "minecraft.jungle_boat": "Jungle Boat", 
                "minecraft.knowledge_book": "Knowledge Book", 
                "minecraft.lapis_lazuli": "Lapis Lazuli", 
                "minecraft.lava_bucket": "Lava Bucket", 
                "minecraft.lead": "Lead", 
                "minecraft.leather": "Leather", 
                "minecraft.leather_boots": "Leather Boots", 
                "minecraft.leather_chestplate": "Leather Tunic", 
                "minecraft.leather_helmet": "Leather Cap", 
                "minecraft.leather_leggings": "Leather Pants", 
                "minecraft.light_blue_dye": "Light Blue Dye", 
                "minecraft.light_gray_dye": "Light Gray Dye", 
                "minecraft.lime_dye": "Lime Dye", 
                "minecraft.lingering_potion": "Lingering Potion", 
                "minecraft.lingering_potion.effect.awkward": "Awkward Lingering Potion", 
                "minecraft.lingering_potion.effect.empty": "Lingering Uncraftable Potion", 
                "minecraft.lingering_potion.effect.fire_resistance": "Lingering Potion of Fire Resistance", 
                "minecraft.lingering_potion.effect.harming": "Lingering Potion of Harming", 
                "minecraft.lingering_potion.effect.healing": "Lingering Potion of Healing", 
                "minecraft.lingering_potion.effect.invisibility": "Lingering Potion of Invisibility", 
                "minecraft.lingering_potion.effect.leaping": "Lingering Potion of Leaping", 
                "minecraft.lingering_potion.effect.levitation": "Lingering Potion of Levitation", 
                "minecraft.lingering_potion.effect.luck": "Lingering Potion of Luck", 
                "minecraft.lingering_potion.effect.mundane": "Mundane Lingering Potion", 
                "minecraft.lingering_potion.effect.night_vision": "Lingering Potion of Night Vision", 
                "minecraft.lingering_potion.effect.poison": "Lingering Potion of Poison", 
                "minecraft.lingering_potion.effect.regeneration": "Lingering Potion of Regeneration", 
                "minecraft.lingering_potion.effect.slowness": "Lingering Potion of Slowness", 
                "minecraft.lingering_potion.effect.strength": "Lingering Potion of Strength", 
                "minecraft.lingering_potion.effect.swiftness": "Lingering Potion of Swiftness", 
                "minecraft.lingering_potion.effect.thick": "Thick Lingering Potion", 
                "minecraft.lingering_potion.effect.turtle_master": "Potion of the Turtle Master", 
                "minecraft.lingering_potion.effect.water": "Lingering Water Bottle", 
                "minecraft.lingering_potion.effect.water_breathing": "Lingering Potion of Water Breathing", 
                "minecraft.lingering_potion.effect.weakness": "Lingering Potion of Weakness", 
                "minecraft.llama_spawn_egg": "Spawn Llama", 
                "minecraft.magenta_dye": "Magenta Dye", 
                "minecraft.magma_cream": "Magma Cream", 
                "minecraft.magma_cube_spawn_egg": "Spawn Magma Cube", 
                "minecraft.map": "Empty Map", 
                "minecraft.melon": "Melon Slice", 
                "minecraft.melon_seeds": "Melon Seeds", 
                "minecraft.milk_bucket": "Milk", 
                "minecraft.minecart": "Minecart", 
                "minecraft.mooshroom_spawn_egg": "Spawn Mooshroom", 
                "minecraft.mule_spawn_egg": "Spawn Mule", 
                "minecraft.mushroom_stew": "Mushroom Stew", 
                "minecraft.music_disc_11": "Music Disc", 
                "minecraft.music_disc_11.desc": "C418 - 11", 
                "minecraft.music_disc_13": "Music Disc", 
                "minecraft.music_disc_13.desc": "C418 - 13", 
                "minecraft.music_disc_blocks": "Music Disc", 
                "minecraft.music_disc_blocks.desc": "C418 - blocks", 
                "minecraft.music_disc_cat": "Music Disc", 
                "minecraft.music_disc_cat.desc": "C418 - cat", 
                "minecraft.music_disc_chirp": "Music Disc", 
                "minecraft.music_disc_chirp.desc": "C418 - chirp", 
                "minecraft.music_disc_far": "Music Disc", 
                "minecraft.music_disc_far.desc": "C418 - far", 
                "minecraft.music_disc_mall": "Music Disc", 
                "minecraft.music_disc_mall.desc": "C418 - mall", 
                "minecraft.music_disc_mellohi": "Music Disc", 
                "minecraft.music_disc_mellohi.desc": "C418 - mellohi", 
                "minecraft.music_disc_stal": "Music Disc", 
                "minecraft.music_disc_stal.desc": "C418 - stal", 
                "minecraft.music_disc_strad": "Music Disc", 
                "minecraft.music_disc_strad.desc": "C418 - strad", 
                "minecraft.music_disc_wait": "Music Disc", 
                "minecraft.music_disc_wait.desc": "C418 - wait", 
                "minecraft.music_disc_ward": "Music Disc", 
                "minecraft.music_disc_ward.desc": "C418 - ward", 
                "minecraft.mutton": "Raw Mutton", 
                "minecraft.name_tag": "Name Tag", 
                "minecraft.nether_brick": "Nether Brick", 
                "minecraft.nether_star": "Nether Star", 
                "minecraft.nether_wart": "Nether Wart", 
                "minecraft.oak_boat": "Oak Boat", 
                "minecraft.ocelot_spawn_egg": "Spawn Ocelot", 
                "minecraft.orange_dye": "Orange Dye", 
                "minecraft.painting": "Painting", 
                "minecraft.paper": "Paper", 
                "minecraft.parrot_spawn_egg": "Spawn Parrot", 
                "minecraft.phantom_spawn_egg": "Spawn Phantom", 
                "minecraft.pig_spawn_egg": "Spawn Pig", 
                "minecraft.pink_dye": "Pink Dye", 
                "minecraft.poisonous_potato": "Poisonous Potato", 
                "minecraft.polar_bear_spawn_egg": "Spawn Polar Bear", 
                "minecraft.porkchop": "Raw Porkchop", 
                "minecraft.potato": "Potato", 
                "minecraft.potion": "Potion", 
                "minecraft.potion.effect.awkward": "Awkward Potion", 
                "minecraft.potion.effect.empty": "Uncraftable Potion", 
                "minecraft.potion.effect.fire_resistance": "Potion of Fire Resistance", 
                "minecraft.potion.effect.harming": "Potion of Harming", 
                "minecraft.potion.effect.healing": "Potion of Healing", 
                "minecraft.potion.effect.invisibility": "Potion of Invisibility", 
                "minecraft.potion.effect.leaping": "Potion of Leaping", 
                "minecraft.potion.effect.levitation": "Potion of Levitation", 
                "minecraft.potion.effect.luck": "Potion of Luck", 
                "minecraft.potion.effect.mundane": "Mundane Potion", 
                "minecraft.potion.effect.night_vision": "Potion of Night Vision", 
                "minecraft.potion.effect.poison": "Potion of Poison", 
                "minecraft.potion.effect.regeneration": "Potion of Regeneration", 
                "minecraft.potion.effect.slowness": "Potion of Slowness", 
                "minecraft.potion.effect.strength": "Potion of Strength", 
                "minecraft.potion.effect.swiftness": "Potion of Swiftness", 
                "minecraft.potion.effect.thick": "Thick Potion", 
                "minecraft.potion.effect.turtle_master": "Potion of the Turtle Master", 
                "minecraft.potion.effect.water": "Water Bottle", 
                "minecraft.potion.effect.water_breathing": "Potion of Water Breathing", 
                "minecraft.potion.effect.weakness": "Potion of Weakness", 
                "minecraft.prismarine_crystals": "Prismarine Crystals", 
                "minecraft.prismarine_shard": "Prismarine Shard", 
                "minecraft.pufferfish": "Pufferfish", 
                "minecraft.pumpkin_pie": "Pumpkin Pie", 
                "minecraft.pumpkin_seeds": "Pumpkin Seeds", 
                "minecraft.purple_dye": "Purple Dye", 
                "minecraft.quartz": "Nether Quartz", 
                "minecraft.rabbit": "Raw Rabbit", 
                "minecraft.rabbit_foot": "Rabbit's Foot", 
                "minecraft.rabbit_hide": "Rabbit Hide", 
                "minecraft.rabbit_spawn_egg": "Spawn Rabbit", 
                "minecraft.rabbit_stew": "Rabbit Stew", 
                "minecraft.redstone": "Redstone", 
                "minecraft.rose_red": "Rose Red", 
                "minecraft.rotten_flesh": "Rotten Flesh", 
                "minecraft.saddle": "Saddle", 
                "minecraft.salmon": "Raw Salmon", 
                "minecraft.shears": "Shears", 
                "minecraft.sheep_spawn_egg": "Spawn Sheep", 
                "minecraft.shield": "Shield", 
                "minecraft.shield.black": "Black Shield", 
                "minecraft.shield.blue": "Blue Shield", 
                "minecraft.shield.brown": "Brown Shield", 
                "minecraft.shield.cyan": "Cyan Shield", 
                "minecraft.shield.gray": "Gray Shield", 
                "minecraft.shield.green": "Green Shield", 
                "minecraft.shield.light_blue": "Light Blue Shield", 
                "minecraft.shield.light_gray": "Light Gray Shield", 
                "minecraft.shield.lime": "Lime Shield", 
                "minecraft.shield.magenta": "Magenta Shield", 
                "minecraft.shield.orange": "Orange Shield", 
                "minecraft.shield.pink": "Pink Shield", 
                "minecraft.shield.purple": "Purple Shield", 
                "minecraft.shield.red": "Red Shield", 
                "minecraft.shield.white": "White Shield", 
                "minecraft.shield.yellow": "Yellow Shield", 
                "minecraft.shulker_shell": "Shulker Shell", 
                "minecraft.shulker_spawn_egg": "Spawn Shulker", 
                "minecraft.sign": "Sign", 
                "minecraft.silverfish_spawn_egg": "Spawn Silverfish", 
                "minecraft.skeleton_horse_spawn_egg": "Spawn Skeleton Horse", 
                "minecraft.skeleton_skull": "Skeleton Skull", 
                "minecraft.skeleton_spawn_egg": "Spawn Skeleton", 
                "minecraft.slime_ball": "Slimeball", 
                "minecraft.slime_spawn_egg": "Spawn Slime", 
                "minecraft.snowball": "Snowball", 
                "minecraft.speckled_melon": "Glistering Melon", 
                "minecraft.spectral_arrow": "Spectral Arrow", 
                "minecraft.spider_eye": "Spider Eye", 
                "minecraft.spider_spawn_egg": "Spawn Spider", 
                "minecraft.splash_potion": "Splash Potion", 
                "minecraft.splash_potion.effect.awkward": "Awkward Splash Potion", 
                "minecraft.splash_potion.effect.empty": "Splash Uncraftable Potion", 
                "minecraft.splash_potion.effect.fire_resistance": "Splash Potion of Fire Resistance", 
                "minecraft.splash_potion.effect.harming": "Splash Potion of Harming", 
                "minecraft.splash_potion.effect.healing": "Splash Potion of Healing", 
                "minecraft.splash_potion.effect.invisibility": "Splash Potion of Invisibility", 
                "minecraft.splash_potion.effect.leaping": "Splash Potion of Leaping", 
                "minecraft.splash_potion.effect.levitation": "Splash Potion of Levitation", 
                "minecraft.splash_potion.effect.luck": "Splash Potion of Luck", 
                "minecraft.splash_potion.effect.mundane": "Mundane Splash Potion", 
                "minecraft.splash_potion.effect.night_vision": "Splash Potion of Night Vision", 
                "minecraft.splash_potion.effect.poison": "Splash Potion of Poison", 
                "minecraft.splash_potion.effect.regeneration": "Splash Potion of Regeneration", 
                "minecraft.splash_potion.effect.slowness": "Splash Potion of Slowness", 
                "minecraft.splash_potion.effect.strength": "Splash Potion of Strength", 
                "minecraft.splash_potion.effect.swiftness": "Splash Potion of Swiftness", 
                "minecraft.splash_potion.effect.thick": "Thick Splash Potion", 
                "minecraft.splash_potion.effect.turtle_master": "Potion of the Turtle Master", 
                "minecraft.splash_potion.effect.water": "Splash Water Bottle", 
                "minecraft.splash_potion.effect.water_breathing": "Splash Potion of Water Breathing", 
                "minecraft.splash_potion.effect.weakness": "Splash Potion of Weakness", 
                "minecraft.spruce_boat": "Spruce Boat", 
                "minecraft.squid_spawn_egg": "Spawn Squid", 
                "minecraft.stick": "Stick", 
                "minecraft.stone_axe": "Stone Axe", 
                "minecraft.stone_hoe": "Stone Hoe", 
                "minecraft.stone_pickaxe": "Stone Pickaxe", 
                "minecraft.stone_shovel": "Stone Shovel", 
                "minecraft.stone_sword": "Stone Sword", 
                "minecraft.stray_spawn_egg": "Spawn Stray", 
                "minecraft.string": "String", 
                "minecraft.sugar": "Sugar", 
                "minecraft.tipped_arrow": "Tipped Arrow", 
                "minecraft.tipped_arrow.effect.awkward": "Tipped Arrow", 
                "minecraft.tipped_arrow.effect.empty": "Uncraftable Tipped Arrow", 
                "minecraft.tipped_arrow.effect.fire_resistance": "Arrow of Fire Resistance", 
                "minecraft.tipped_arrow.effect.harming": "Arrow of Harming", 
                "minecraft.tipped_arrow.effect.healing": "Arrow of Healing", 
                "minecraft.tipped_arrow.effect.invisibility": "Arrow of Invisibility", 
                "minecraft.tipped_arrow.effect.leaping": "Arrow of Leaping", 
                "minecraft.tipped_arrow.effect.levitation": "Arrow of Levitation", 
                "minecraft.tipped_arrow.effect.luck": "Arrow of Luck", 
                "minecraft.tipped_arrow.effect.mundane": "Tipped Arrow", 
                "minecraft.tipped_arrow.effect.night_vision": "Arrow of Night Vision", 
                "minecraft.tipped_arrow.effect.poison": "Arrow of Poison", 
                "minecraft.tipped_arrow.effect.regeneration": "Arrow of Regeneration", 
                "minecraft.tipped_arrow.effect.slowness": "Arrow of Slowness", 
                "minecraft.tipped_arrow.effect.strength": "Arrow of Strength", 
                "minecraft.tipped_arrow.effect.swiftness": "Arrow of Swiftness", 
                "minecraft.tipped_arrow.effect.thick": "Tipped Arrow", 
                "minecraft.tipped_arrow.effect.turtle_master": "Arrow of The Turtle Master", 
                "minecraft.tipped_arrow.effect.water": "Arrow of Splashing", 
                "minecraft.tipped_arrow.effect.water_breathing": "Arrow of Water Breathing", 
                "minecraft.tipped_arrow.effect.weakness": "Arrow of Weakness", 
                "minecraft.tnt_minecart": "Minecart with TNT", 
                "minecraft.totem_of_undying": "Totem of Undying", 
                "minecraft.trident": "Trident", 
                "minecraft.turtle_helmet": "Turtle Shell", 
                "minecraft.turtle_shell_piece": "Turtle Shell Piece", 
                "minecraft.turtle_spawn_egg": "Spawn Turtle", 
                "minecraft.vex_spawn_egg": "Spawn Vex", 
                "minecraft.villager_spawn_egg": "Spawn Villager", 
                "minecraft.vindication_illager_spawn_egg": "Spawn Vindicator", 
                "minecraft.water_bucket": "Water Bucket", 
                "minecraft.wheat": "Wheat", 
                "minecraft.wheat_seeds": "Seeds", 
                "minecraft.witch_spawn_egg": "Spawn Witch", 
                "minecraft.wither_skeleton_skull": "Wither Skeleton Skull", 
                "minecraft.wither_skeleton_spawn_egg": "Spawn Wither Skeleton", 
                "minecraft.wolf_spawn_egg": "Spawn Wolf", 
                "minecraft.wooden_axe": "Wooden Axe", 
                "minecraft.wooden_hoe": "Wooden Hoe", 
                "minecraft.wooden_pickaxe": "Wooden Pickaxe", 
                "minecraft.wooden_shovel": "Wooden Shovel", 
                "minecraft.wooden_sword": "Wooden Sword", 
                "minecraft.writable_book": "Book and Quill", 
                "minecraft.written_book": "Written Book", 
                "minecraft.zombie_head": "Zombie Head", 
                "minecraft.zombie_horse_spawn_egg": "Spawn Zombie Horse", 
                "minecraft.zombie_pigman_spawn_egg": "Spawn Zombie Pigman", 
                "minecraft.zombie_spawn_egg": "Spawn Zombie", 
                "minecraft.zombie_villager_spawn_egg": "Spawn Zombie Villager", 
                "modifiers.chest": "When on body:", 
                "modifiers.feet": "When on feet:", 
                "modifiers.head": "When on head:", 
                "modifiers.legs": "When on legs:", 
                "modifiers.mainhand": "When in main hand:", 
                "modifiers.offhand": "When in off hand:", 
                "nbt_tags": "NBT: %s tag(s)", 
                "unbreakable": "Unbreakable"
            }, 
            "itemGroup": {
                "brewing": "Brewing", 
                "buildingBlocks": "Building Blocks", 
                "combat": "Combat", 
                "decorations": "Decoration Blocks", 
                "food": "Foodstuffs", 
                "hotbar": "Saved Toolbars", 
                "inventory": "Survival Inventory", 
                "materials": "Materials", 
                "misc": "Miscellaneous", 
                "redstone": "Redstone", 
                "search": "Search Items", 
                "tools": "Tools", 
                "transportation": "Transportation"
            }, 
            "key": {
                "advancements": "Advancements", 
                "attack": "Attack/Destroy", 
                "back": "Walk Backwards", 
                "categories.creative": "Creative Mode", 
                "categories.gameplay": "Gameplay", 
                "categories.inventory": "Inventory", 
                "categories.misc": "Miscellaneous", 
                "categories.movement": "Movement", 
                "categories.multiplayer": "Multiplayer", 
                "categories.ui": "Game Interface", 
                "chat": "Open Chat", 
                "command": "Open Command", 
                "drop": "Drop Selected Item", 
                "forward": "Walk Forwards", 
                "fullscreen": "Toggle Fullscreen", 
                "hotbar.1": "Hotbar Slot 1", 
                "hotbar.2": "Hotbar Slot 2", 
                "hotbar.3": "Hotbar Slot 3", 
                "hotbar.4": "Hotbar Slot 4", 
                "hotbar.5": "Hotbar Slot 5", 
                "hotbar.6": "Hotbar Slot 6", 
                "hotbar.7": "Hotbar Slot 7", 
                "hotbar.8": "Hotbar Slot 8", 
                "hotbar.9": "Hotbar Slot 9", 
                "inventory": "Open/Close Inventory", 
                "jump": "Jump", 
                "keyboard.apostrophe": "'", 
                "keyboard.backslash": "\\", 
                "keyboard.backspace": "Backspace", 
                "keyboard.caps.lock": "Caps Lock", 
                "keyboard.comma": ",", 
                "keyboard.delete": "Delete", 
                "keyboard.down": "Down Arrow", 
                "keyboard.end": "End", 
                "keyboard.enter": "Enter", 
                "keyboard.equal": "=", 
                "keyboard.escape": "Escape", 
                "keyboard.f1": "F1", 
                "keyboard.f10": "F10", 
                "keyboard.f11": "F11", 
                "keyboard.f12": "F12", 
                "keyboard.f13": "F13", 
                "keyboard.f14": "F14", 
                "keyboard.f15": "F15", 
                "keyboard.f16": "F16", 
                "keyboard.f17": "F17", 
                "keyboard.f18": "F18", 
                "keyboard.f19": "F19", 
                "keyboard.f2": "F2", 
                "keyboard.f20": "F20", 
                "keyboard.f21": "F21", 
                "keyboard.f22": "F22", 
                "keyboard.f23": "F23", 
                "keyboard.f24": "F24", 
                "keyboard.f25": "F25", 
                "keyboard.f3": "F3", 
                "keyboard.f4": "F4", 
                "keyboard.f5": "F5", 
                "keyboard.f6": "F6", 
                "keyboard.f7": "F7", 
                "keyboard.f8": "F8", 
                "keyboard.f9": "F9", 
                "keyboard.grave.accent": "`", 
                "keyboard.home": "Home", 
                "keyboard.insert": "Insert", 
                "keyboard.keypad.0": "Keypad 0", 
                "keyboard.keypad.1": "Keypad 1", 
                "keyboard.keypad.2": "Keypad 2", 
                "keyboard.keypad.3": "Keypad 3", 
                "keyboard.keypad.4": "Keypad 4", 
                "keyboard.keypad.5": "Keypad 5", 
                "keyboard.keypad.6": "Keypad 6", 
                "keyboard.keypad.7": "Keypad 7", 
                "keyboard.keypad.8": "Keypad 8", 
                "keyboard.keypad.9": "Keypad 9", 
                "keyboard.keypad.add": "Keypad +", 
                "keyboard.keypad.decimal": "Keypad Decimal", 
                "keyboard.keypad.divide": "Keypad /", 
                "keyboard.keypad.enter": "Keypad Enter", 
                "keyboard.keypad.equal": "Keypad =", 
                "keyboard.keypad.multiply": "Keypad *", 
                "keyboard.keypad.subtract": "Keypad -", 
                "keyboard.left": "Left Arrow", 
                "keyboard.left.alt": "Left Alt", 
                "keyboard.left.bracket": "[", 
                "keyboard.left.control": "Left Control", 
                "keyboard.left.shift": "Left Shift", 
                "keyboard.left.win": "Left Win", 
                "keyboard.menu": "Menu", 
                "keyboard.minus": "-", 
                "keyboard.num.lock": "Num Lock", 
                "keyboard.page.down": "Page Down", 
                "keyboard.page.up": "Page Up", 
                "keyboard.pause": "Pause", 
                "keyboard.period": ".", 
                "keyboard.print.screen": "Print Screen", 
                "keyboard.right": "Right Arrow", 
                "keyboard.right.alt": "Right Alt", 
                "keyboard.right.bracket": "]", 
                "keyboard.right.control": "Right Control", 
                "keyboard.right.shift": "Right Shift", 
                "keyboard.right.win": "Right Win", 
                "keyboard.scroll.lock": "Scroll Lock", 
                "keyboard.semicolon": ";", 
                "keyboard.slash": "/", 
                "keyboard.space": "Space", 
                "keyboard.tab": "Tab", 
                "keyboard.unknown": "Not bound", 
                "keyboard.up": "Up Arrow", 
                "keyboard.world.1": "World 1", 
                "keyboard.world.2": "World 2", 
                "left": "Strafe Left", 
                "loadToolbarActivator": "Load Toolbar Activator", 
                "mouse": "Button %1$s", 
                "mouse.left": "Left Button", 
                "mouse.middle": "Middle Button", 
                "mouse.right": "Right Button", 
                "pickItem": "Pick Block", 
                "playerlist": "List Players", 
                "right": "Strafe Right", 
                "saveToolbarActivator": "Save Toolbar Activator", 
                "screenshot": "Take Screenshot", 
                "smoothCamera": "Toggle Cinematic Camera", 
                "sneak": "Sneak", 
                "spectatorOutlines": "Highlight Players (Spectators)", 
                "sprint": "Sprint", 
                "swapHands": "Swap Item In Hands", 
                "togglePerspective": "Toggle Perspective", 
                "use": "Use Item/Place Block"
            }, 
            "lanServer": {
                "otherPlayers": "Settings for Other Players", 
                "scanning": "Scanning for games on your local network", 
                "start": "Start LAN World", 
                "title": "LAN World"
            }, 
            "language": {
                "code": "en_us", 
                "name": "English", 
                "region": "United States"
            }, 
            "mcoServer": {
                "title": "Minecraft Online World"
            }, 
            "menu": {
                "convertingLevel": "Converting world", 
                "disconnect": "Disconnect", 
                "game": "Game Menu", 
                "generatingLevel": "Generating world", 
                "generatingTerrain": "Building terrain", 
                "loadingLevel": "Loading world", 
                "multiplayer": "Multiplayer", 
                "online": "Minecraft Realms", 
                "options": "Options...", 
                "playdemo": "Play Demo World", 
                "quit": "Quit Game", 
                "resetdemo": "Reset Demo World", 
                "respawning": "Respawning", 
                "returnToGame": "Back to Game", 
                "returnToMenu": "Save and Quit to Title", 
                "shareToLan": "Open to LAN", 
                "singleplayer": "Singleplayer"
            }, 
            "merchant": {
                "deprecated": "Trade something else to unlock!"
            }, 
            "mount": {
                "onboard": "Press %1$s to dismount"
            }, 
            "multiplayer": {
                "connect": "Connect", 
                "disconnect.authservers_down": "Authentication servers are down. Please try again later, sorry!", 
                "disconnect.banned": "You are banned from this server.", 
                "disconnect.duplicate_login": "You logged in from another location", 
                "disconnect.flying": "Flying is not enabled on this server", 
                "disconnect.generic": "Disconnected", 
                "disconnect.idling": "You have been idle for too long!", 
                "disconnect.illegal_characters": "Illegal characters in chat", 
                "disconnect.invalid_entity_attacked": "Attempting to attack an invalid entity", 
                "disconnect.invalid_player_movement": "Invalid move player packet received", 
                "disconnect.invalid_vehicle_movement": "Invalid move vehicle packet received", 
                "disconnect.ip_banned": "You have been IP banned.", 
                "disconnect.kicked": "Kicked by an operator.", 
                "disconnect.outdated_client": "Outdated client! Please use %s", 
                "disconnect.outdated_server": "Outdated server! I'm still on %s", 
                "disconnect.server_shutdown": "Server closed", 
                "disconnect.slow_login": "Took too long to log in", 
                "disconnect.unverified_username": "Failed to verify username!", 
                "downloadingStats": "Downloading statistics...", 
                "downloadingTerrain": "Loading terrain", 
                "ipinfo": "Enter the IP of a server to connect to it:", 
                "player.joined": "%s joined the game", 
                "player.joined.renamed": "%s (formerly known as %s) joined the game", 
                "player.left": "%s left the game", 
                "status.and_more": "... and %s more ...", 
                "status.cancelled": "Cancelled", 
                "status.cannot_connect": "Can't connect to server", 
                "status.cannot_resolve": "Can't resolve hostname", 
                "status.client_out_of_date": "Client out of date!", 
                "status.no_connection": "(no connection)", 
                "status.old": "Old", 
                "status.pinging": "Pinging...", 
                "status.server_out_of_date": "Server out of date!", 
                "status.unknown": "???", 
                "status.unrequested": "Received unrequested status", 
                "stopSleeping": "Leave Bed", 
                "texturePrompt.line1": "This server recommends the use of a custom resource pack.", 
                "texturePrompt.line2": "Would you like to download and install it automagically?", 
                "title": "Play Multiplayer"
            }, 
            "narrator": {
                "toast.disabled": "Narrator Disabled", 
                "toast.enabled": "Narrator Enabled"
            }, 
            "options": {
                "anaglyph": "3D Anaglyph", 
                "ao": "Smooth Lighting", 
                "ao.max": "Maximum", 
                "ao.min": "Minimum", 
                "ao.off": "OFF", 
                "attack.crosshair": "Crosshair", 
                "attack.hotbar": "Hotbar", 
                "attackIndicator": "Attack Indicator", 
                "autoJump": "Auto-Jump", 
                "autoSuggestCommands": "Command Suggestions", 
                "chat.color": "Colors", 
                "chat.height.focused": "Focused Height", 
                "chat.height.unfocused": "Unfocused Height", 
                "chat.links": "Web Links", 
                "chat.links.prompt": "Prompt on Links", 
                "chat.opacity": "Opacity", 
                "chat.scale": "Scale", 
                "chat.title": "Chat Settings...", 
                "chat.visibility": "Chat", 
                "chat.visibility.full": "Shown", 
                "chat.visibility.hidden": "Hidden", 
                "chat.visibility.system": "Commands Only", 
                "chat.width": "Width", 
                "chunks": "%s chunks", 
                "clouds.fancy": "Fancy", 
                "clouds.fast": "Fast", 
                "controls": "Controls...", 
                "customizeTitle": "Customize World Settings", 
                "difficulty": "Difficulty", 
                "difficulty.easy": "Easy", 
                "difficulty.hard": "Hard", 
                "difficulty.hardcore": "Hardcore", 
                "difficulty.normal": "Normal", 
                "difficulty.peaceful": "Peaceful", 
                "entityShadows": "Entity Shadows", 
                "forceUnicodeFont": "Force Unicode Font", 
                "fov": "FOV", 
                "fov.max": "Quake Pro", 
                "fov.min": "Normal", 
                "framerate": "%s fps", 
                "framerateLimit": "Max Framerate", 
                "framerateLimit.max": "Unlimited", 
                "fullscreen": "Fullscreen", 
                "fullscreen.current": "Current", 
                "fullscreen.resolution": "FS Resolution", 
                "gamma": "Brightness", 
                "gamma.max": "Bright", 
                "gamma.min": "Moody", 
                "graphics": "Graphics", 
                "graphics.fancy": "Fancy", 
                "graphics.fast": "Fast", 
                "guiScale": "GUI Scale", 
                "guiScale.auto": "Auto", 
                "hidden": "Hidden", 
                "invertMouse": "Invert Mouse", 
                "language": "Language...", 
                "languageWarning": "Language translations may not be 100%% accurate", 
                "mainHand": "Main Hand", 
                "mainHand.left": "Left", 
                "mainHand.right": "Right", 
                "mipmapLevels": "Mipmap Levels", 
                "modelPart.cape": "Cape", 
                "modelPart.hat": "Hat", 
                "modelPart.jacket": "Jacket", 
                "modelPart.left_pants_leg": "Left Pants Leg", 
                "modelPart.left_sleeve": "Left Sleeve", 
                "modelPart.right_pants_leg": "Right Pants Leg", 
                "modelPart.right_sleeve": "Right Sleeve", 
                "multiplayer.title": "Multiplayer Settings...", 
                "music": "Music", 
                "narrator": "Narrator", 
                "narrator.all": "Narrates all", 
                "narrator.chat": "Narrates chat", 
                "narrator.notavailable": "Not available", 
                "narrator.off": "Off", 
                "narrator.system": "Narrates system", 
                "off": "OFF", 
                "on": "ON", 
                "particles": "Particles", 
                "particles.all": "All", 
                "particles.decreased": "Decreased", 
                "particles.minimal": "Minimal", 
                "realmsNotifications": "Realms Notifications", 
                "reducedDebugInfo": "Reduced Debug Info", 
                "renderClouds": "Clouds", 
                "renderDistance": "Render Distance", 
                "resourcepack": "Resource Packs...", 
                "saturation": "Saturation", 
                "sensitivity": "Sensitivity", 
                "sensitivity.max": "HYPERSPEED!!!", 
                "sensitivity.min": "*yawn*", 
                "showSubtitles": "Show Subtitles", 
                "skinCustomisation": "Skin Customization...", 
                "skinCustomisation.title": "Skin Customization", 
                "snooper": "Allow Snooper", 
                "snooper.desc": "We always want to improve Minecraft and, to help us do that, we'd like to collect some information. This lets us know what hardware to support and where the big problems are. It also gives us a sense of the size of our active player base, so we know if we're doing a good job. You can view all the information we collect below. If you want to opt out then you can simply toggle it off!", 
                "snooper.title": "Feed us data!", 
                "snooper.view": "Snooper Settings...", 
                "sound": "Sound", 
                "sounds": "Music & Sounds...", 
                "sounds.title": "Music & Sound Options", 
                "title": "Options", 
                "touchscreen": "Touchscreen Mode", 
                "vbo": "Use VBOs", 
                "video": "Video Settings...", 
                "videoTitle": "Video Settings", 
                "viewBobbing": "View Bobbing", 
                "visible": "Shown", 
                "vsync": "Use VSync"
            }, 
            "potion": {
                "potency.0": "", 
                "potency.1": "II", 
                "potency.2": "III", 
                "potency.3": "IV", 
                "potency.4": "V", 
                "potency.5": "VI", 
                "whenDrank": "When Applied:"
            }, 
            "recipe": {
                "toast.description": "Check your recipe book", 
                "toast.title": "New Recipes Unlocked!"
            }, 
            "record": {
                "nowPlaying": "Now playing: %s"
            }, 
            "resourcePack": {
                "available.title": "Available Resource Packs", 
                "folderInfo": "(Place resource pack files here)", 
                "incompatible": "Incompatible", 
                "incompatible.confirm.new": "This resource pack was made for a newer version of Minecraft and may no longer work correctly.", 
                "incompatible.confirm.old": "This resource pack was made for an older version of Minecraft and may no longer work correctly.", 
                "incompatible.confirm.title": "Are you sure you want to load this resource pack?", 
                "incompatible.new": "(Made for a newer version of Minecraft)", 
                "incompatible.old": "(Made for an older version of Minecraft)", 
                "openFolder": "Open Resource Pack Folder", 
                "selected.title": "Selected Resource Packs", 
                "server.name": "World Specific Resources", 
                "title": "Select Resource Packs"
            }, 
            "resourcepack": {
                "downloading": "Downloading Resource Pack", 
                "progress": "Downloading file (%s MB)...", 
                "requesting": "Making Request..."
            }, 
            "screenshot": {
                "failure": "Couldn't save screenshot: %s", 
                "success": "Saved screenshot as %s"
            }, 
            "selectServer": {
                "add": "Add Server", 
                "defaultName": "Minecraft Server", 
                "delete": "Delete", 
                "deleteButton": "Delete", 
                "deleteQuestion": "Are you sure you want to remove this server?", 
                "deleteWarning": "will be lost forever! (A long time!)", 
                "direct": "Direct Connect", 
                "edit": "Edit", 
                "empty": "empty", 
                "hiddenAddress": "(Hidden)", 
                "refresh": "Refresh", 
                "select": "Join Server", 
                "title": "Select Server"
            }, 
            "selectWorld": {
                "allowCommands": "Allow Cheats:", 
                "allowCommands.info": "Commands like /gamemode, /xp", 
                "backupJoinConfirmButton": "Backup and load", 
                "backupJoinSkipButton": "I know what I'm doing!", 
                "backupQuestion": "Do you really want to load this world?", 
                "backupWarning": "This world was last played in version %s, you are on snapshot %s. Please make a backup in case you experience world corruptions!", 
                "bonusItems": "Bonus Chest:", 
                "cheats": "Cheats", 
                "conversion": "Must be converted!", 
                "create": "Create New World", 
                "createDemo": "Play New Demo World", 
                "customizeType": "Customize", 
                "delete": "Delete", 
                "deleteButton": "Delete", 
                "deleteQuestion": "Are you sure you want to delete this world?", 
                "deleteWarning": "will be lost forever! (A long time!)", 
                "edit": "Edit", 
                "edit.backup": "Make Backup", 
                "edit.backupCreated": "Backed up: %s", 
                "edit.backupFolder": "Open Backups Folder", 
                "edit.backupSize": "size: %s MB", 
                "edit.openFolder": "Open World Folder", 
                "edit.resetIcon": "Reset Icon", 
                "edit.save": "Save", 
                "edit.title": "Edit World", 
                "empty": "empty", 
                "enterName": "World Name", 
                "enterSeed": "Seed for the world generator", 
                "gameMode": "Game Mode", 
                "gameMode.adventure": "Adventure", 
                "gameMode.adventure.line1": "Same as survival mode, but blocks can't", 
                "gameMode.adventure.line2": "be added or removed", 
                "gameMode.creative": "Creative", 
                "gameMode.creative.line1": "Unlimited resources, free flying and", 
                "gameMode.creative.line2": "destroy blocks instantly", 
                "gameMode.hardcore": "Hardcore", 
                "gameMode.hardcore.line1": "Same as survival mode, locked at hardest", 
                "gameMode.hardcore.line2": "difficulty, and one life only", 
                "gameMode.spectator": "Spectator", 
                "gameMode.spectator.line1": "You can look but don't touch", 
                "gameMode.spectator.line2": "", 
                "gameMode.survival": "Survival", 
                "gameMode.survival.line1": "Search for resources, crafting, gain", 
                "gameMode.survival.line2": "levels, health and hunger", 
                "hardcoreMode": "Hardcore:", 
                "hardcoreMode.info": "World is deleted upon death", 
                "load_folder_access": "Unable to read or access folder where game worlds are saved!", 
                "mapFeatures": "Generate Structures:", 
                "mapFeatures.info": "Villages, dungeons etc", 
                "mapType": "World Type:", 
                "mapType.normal": "Normal", 
                "moreWorldOptions": "More World Options...", 
                "newWorld": "New World", 
                "newWorld.copyOf": "Copy of %s", 
                "recreate": "Re-Create", 
                "resultFolder": "Will be saved in:", 
                "seedInfo": "Leave blank for a random seed", 
                "select": "Play Selected World", 
                "title": "Select World", 
                "tooltip.fromNewerVersion1": "World was saved in a newer version,", 
                "tooltip.fromNewerVersion2": "loading this world could cause problems!", 
                "tooltip.snapshot1": "Don't forget to backup this world", 
                "tooltip.snapshot2": "before you load it in this snapshot.", 
                "tooltip.unsupported": "This world is no longer supported and can only be played in %s", 
                "unable_to_load": "Unable to load worlds", 
                "unsupported.customized.text": "Unfortunately, we cannot support Customized Worlds in this version of Minecraft. Please downgrade to %s to play this world. We are sorry for the inconvenience.", 
                "unsupported.customized.title": "Unsupported world!", 
                "version": "Version:", 
                "versionJoinButton": "Use Anyway", 
                "versionQuestion": "Do you really want to load this world?", 
                "versionUnknown": "unknown", 
                "versionWarning": "This world was last played in version %s and loading it in this version could cause corruption!", 
                "world": "World"
            }, 
            "sign": {
                "edit": "Edit sign message"
            }, 
            "soundCategory": {
                "ambient": "Ambient/Environment", 
                "block": "Blocks", 
                "hostile": "Hostile Creatures", 
                "master": "Master Volume", 
                "music": "Music", 
                "neutral": "Friendly Creatures", 
                "player": "Players", 
                "record": "Jukebox/Note Blocks", 
                "voice": "Voice/Speech", 
                "weather": "Weather"
            }, 
            "spectatorMenu": {
                "close": "Close Menu", 
                "next_page": "Next Page", 
                "previous_page": "Previous Page", 
                "root.prompt": "Press a key to select a command, and again to use it.", 
                "team_teleport": "Teleport to Team Member", 
                "team_teleport.prompt": "Select a team to teleport to", 
                "teleport": "Teleport to Player", 
                "teleport.prompt": "Select a player to teleport to"
            }, 
            "stat": {
                "blocksButton": "Blocks", 
                "generalButton": "General", 
                "itemsButton": "Items", 
                "minecraft.animals_bred": "Animals Bred", 
                "minecraft.aviate_one_cm": "Distance by Elytra", 
                "minecraft.boat_one_cm": "Distance by Boat", 
                "minecraft.clean_armor": "Armor Pieces Cleaned", 
                "minecraft.clean_banner": "Banners Cleaned", 
                "minecraft.climb_one_cm": "Distance Climbed", 
                "minecraft.crouch_one_cm": "Distance Crouched", 
                "minecraft.damage_dealt": "Damage Dealt", 
                "minecraft.damage_taken": "Damage Taken", 
                "minecraft.deaths": "Number of Deaths", 
                "minecraft.dive_one_cm": "Distance Dove", 
                "minecraft.drop": "Items Dropped", 
                "minecraft.eat_cake_slice": "Cake Slices Eaten", 
                "minecraft.enchant_item": "Items Enchanted", 
                "minecraft.fall_one_cm": "Distance Fallen", 
                "minecraft.fill_cauldron": "Cauldrons Filled", 
                "minecraft.fish_caught": "Fish Caught", 
                "minecraft.fly_one_cm": "Distance Flown", 
                "minecraft.horse_one_cm": "Distance by Horse", 
                "minecraft.inspect_dispenser": "Dispensers Searched", 
                "minecraft.inspect_dropper": "Droppers Searched", 
                "minecraft.inspect_hopper": "Hoppers Searched", 
                "minecraft.interact_with_beacon": "Interactions with Beacon", 
                "minecraft.interact_with_brewingstand": "Interactions with Brewing Stand", 
                "minecraft.interact_with_crafting_table": "Interactions with Crafting Table", 
                "minecraft.interact_with_furnace": "Interactions with Furnace", 
                "minecraft.jump": "Jumps", 
                "minecraft.junk_fished": "Junk Fished", 
                "minecraft.leave_game": "Games Quit", 
                "minecraft.minecart_one_cm": "Distance by Minecart", 
                "minecraft.mob_kills": "Mob Kills", 
                "minecraft.open_chest": "Chests Opened", 
                "minecraft.open_enderchest": "Ender Chests Opened", 
                "minecraft.open_shulker_box": "Shulker Boxes Opened", 
                "minecraft.pig_one_cm": "Distance by Pig", 
                "minecraft.play_noteblock": "Note Blocks Played", 
                "minecraft.play_one_minute": "Time Played", 
                "minecraft.play_record": "Records Played", 
                "minecraft.player_kills": "Player Kills", 
                "minecraft.pot_flower": "Plants Potted", 
                "minecraft.sleep_in_bed": "Times Slept in a Bed", 
                "minecraft.sneak_time": "Sneak Time", 
                "minecraft.sprint_one_cm": "Distance Sprinted", 
                "minecraft.swim_one_cm": "Distance Swum", 
                "minecraft.talked_to_villager": "Talked to Villagers", 
                "minecraft.time_since_death": "Since Last Death", 
                "minecraft.time_since_sleep": "Since Last Rest", 
                "minecraft.traded_with_villager": "Traded with Villagers", 
                "minecraft.treasure_fished": "Treasure Fished", 
                "minecraft.trigger_trapped_chest": "Trapped Chests Triggered", 
                "minecraft.tune_noteblock": "Note Blocks Tuned", 
                "minecraft.use_cauldron": "Water Taken from Cauldron", 
                "minecraft.walk_one_cm": "Distance Walked", 
                "mobsButton": "Mobs"
            }, 
            "stat_type": {
                "minecraft.broken": "Times Broken", 
                "minecraft.crafted": "Times Crafted", 
                "minecraft.dropped": "Dropped", 
                "minecraft.killed": "You killed %s %s", 
                "minecraft.killed.none": "You have never killed %s", 
                "minecraft.killed_by": "%s killed you %s time(s)", 
                "minecraft.killed_by.none": "You have never been killed by %s", 
                "minecraft.mined": "Times Mined", 
                "minecraft.picked_up": "Picked Up", 
                "minecraft.used": "Times Used"
            }, 
            "stats": {
                "tooltip.type.statistic": "Statistic"
            }, 
            "structure_block": {
                "button.detect_size": "DETECT", 
                "button.load": "LOAD", 
                "button.save": "SAVE", 
                "custom_data": "Custom Data Tag Name", 
                "detect_size": "Detect structure size and position:", 
                "hover.corner": "Corner: %s", 
                "hover.data": "Data: %s", 
                "hover.load": "Load: %s", 
                "hover.save": "Save: %s", 
                "include_entities": "Include entities:", 
                "integrity": "Structure Integrity and Seed", 
                "load_not_found": "Structure '%s' is not available", 
                "load_prepare": "Structure '%s' position prepared", 
                "load_success": "Structure loaded from '%s'", 
                "mode.corner": "Corner", 
                "mode.data": "Data", 
                "mode.load": "Load", 
                "mode.save": "Save", 
                "mode_info.corner": "Corner mode - placement and size marker", 
                "mode_info.data": "Data mode - game logic marker", 
                "mode_info.load": "Load mode - load from file", 
                "mode_info.save": "Save mode - write to file", 
                "position": "Relative Position", 
                "save_failure": "Unable to save structure '%s'", 
                "save_success": "Structure saved as '%s'", 
                "show_air": "Show invisible blocks:", 
                "show_boundingbox": "Show bounding box:", 
                "size": "Structure Size", 
                "size_failure": "Unable to detect structure size, add corners with matching structure names", 
                "size_success": "Size successfully detected for '%s'", 
                "structure_name": "Structure Name"
            }, 
            "subtitles": {
                "ambient.cave": "Eerie noise", 
                "block.anvil.destroy": "Anvil destroyed", 
                "block.anvil.land": "Anvil landed", 
                "block.anvil.use": "Anvil used", 
                "block.brewing_stand.brew": "Brewing Stand bubbles", 
                "block.button.click": "Button clicks", 
                "block.chest.close": "Chest closes", 
                "block.chest.locked": "Chest locked", 
                "block.chest.open": "Chest opens", 
                "block.chorus_flower.death": "Chorus Flower withers", 
                "block.chorus_flower.grow": "Chorus Flower grows", 
                "block.comparator.click": "Comparator clicks", 
                "block.dispenser.dispense": "Dispensed item", 
                "block.dispenser.fail": "Dispenser failed", 
                "block.door.toggle": "Door creaks", 
                "block.fence_gate.toggle": "Fence Gate creaks", 
                "block.fire.ambient": "Fire crackles", 
                "block.fire.extinguish": "Fire extinguished", 
                "block.furnace.fire_crackle": "Furnace crackles", 
                "block.generic.break": "Block broken", 
                "block.generic.footsteps": "Footsteps", 
                "block.generic.hit": "Block breaking", 
                "block.generic.place": "Block placed", 
                "block.iron_trapdoor.close": "Trapdoor opens", 
                "block.iron_trapdoor.open": "Trapdoor closes", 
                "block.lava.ambient": "Lava pops", 
                "block.lava.extinguish": "Lava hisses", 
                "block.lever.click": "Lever clicks", 
                "block.note.note": "Note Block plays", 
                "block.piston.move": "Piston moves", 
                "block.portal.ambient": "Portal whooshes", 
                "block.pressure_plate.click": "Pressure Plate clicks", 
                "block.redstone_torch.burnout": "Torch fizzes", 
                "block.shulker_box.close": "Shulker closes", 
                "block.shulker_box.open": "Shulker opens", 
                "block.trapdoor.toggle": "Trapdoor creaks", 
                "block.tripwire.attach": "Tripwire attaches", 
                "block.tripwire.click": "Tripwire clicks", 
                "block.tripwire.detach": "Tripwire detaches", 
                "block.water.ambient": "Water flows", 
                "enchant.thorns.hit": "Thorns prick", 
                "entity.armorstand.fall": "Something fell", 
                "entity.arrow.hit": "Arrow hits", 
                "entity.arrow.hit_player": "Player hit", 
                "entity.arrow.shoot": "Arrow fired", 
                "entity.bat.ambient": "Bat screeches", 
                "entity.bat.death": "Bat dies", 
                "entity.bat.hurt": "Bat hurts", 
                "entity.bat.takeoff": "Bat takes off", 
                "entity.blaze.ambient": "Blaze breathes", 
                "entity.blaze.burn": "Blaze crackles", 
                "entity.blaze.death": "Blaze dies", 
                "entity.blaze.hurt": "Blaze hurts", 
                "entity.blaze.shoot": "Blaze shoots", 
                "entity.bobber.splash": "Fishing hook splashes", 
                "entity.bobber.throw": "Bobber thrown", 
                "entity.cat.ambient": "Cat meows", 
                "entity.cat.death": "Cat dies", 
                "entity.cat.hurt": "Cat hurts", 
                "entity.chicken.ambient": "Chicken clucks", 
                "entity.chicken.death": "Chicken dies", 
                "entity.chicken.egg": "Chicken plops", 
                "entity.chicken.hurt": "Chicken hurts", 
                "entity.cow.ambient": "Cow moos", 
                "entity.cow.death": "Cow dies", 
                "entity.cow.hurt": "Cow hurts", 
                "entity.cow.milk": "Cow gets milked", 
                "entity.creeper.death": "Creeper dies", 
                "entity.creeper.hurt": "Creeper hurts", 
                "entity.creeper.primed": "Creeper hisses", 
                "entity.donkey.ambient": "Donkey hee-haws", 
                "entity.donkey.angry": "Donkey neighs", 
                "entity.donkey.chest": "Donkey Chest equips", 
                "entity.donkey.death": "Donkey dies", 
                "entity.donkey.hurt": "Donkey hurts", 
                "entity.egg.throw": "Egg flies", 
                "entity.elder_guardian.ambient": "Elder Guardian moans", 
                "entity.elder_guardian.ambient.land": "Elder Guardian flaps", 
                "entity.elder_guardian.attack": "Elder Guardian shoots", 
                "entity.elder_guardian.curse": "Elder Guardian curses", 
                "entity.elder_guardian.death": "Elder Guardian dies", 
                "entity.elder_guardian.flop": "Elder Guardian flops", 
                "entity.elder_guardian.hurt": "Elder Guardian hurts", 
                "entity.enderdragon.ambient": "Dragon roars", 
                "entity.enderdragon.death": "Dragon dies", 
                "entity.enderdragon.flap": "Dragon flaps", 
                "entity.enderdragon.growl": "Dragon growls", 
                "entity.enderdragon.hurt": "Dragon hurts", 
                "entity.enderdragon.shoot": "Dragon shoots", 
                "entity.endereye.launch": "Eye of Ender shoots", 
                "entity.enderman.ambient": "Enderman vwoops", 
                "entity.enderman.death": "Enderman dies", 
                "entity.enderman.hurt": "Enderman hurts", 
                "entity.enderman.stare": "Enderman cries out", 
                "entity.enderman.teleport": "Enderman teleports", 
                "entity.endermite.ambient": "Endermite scuttles", 
                "entity.endermite.death": "Endermite dies", 
                "entity.endermite.hurt": "Endermite hurts", 
                "entity.enderpearl.throw": "Ender Pearl flies", 
                "entity.evocation_fangs.attack": "Fangs snap", 
                "entity.evocation_illager.ambient": "Evoker murmurs", 
                "entity.evocation_illager.cast_spell": "Evoker casts spell", 
                "entity.evocation_illager.death": "Evoker dies", 
                "entity.evocation_illager.hurt": "Evoker hurts", 
                "entity.evocation_illager.prepare_attack": "Evoker prepares attack", 
                "entity.evocation_illager.prepare_summon": "Evoker prepares summoning", 
                "entity.evocation_illager.prepare_wololo": "Evoker prepares charming", 
                "entity.experience_orb.pickup": "Experience gained", 
                "entity.firework.blast": "Firework blasts", 
                "entity.firework.launch": "Firework launches", 
                "entity.firework.twinkle": "Firework twinkles", 
                "entity.generic.big_fall": "Something fell", 
                "entity.generic.burn": "Burning", 
                "entity.generic.death": "Dying", 
                "entity.generic.drink": "Sipping", 
                "entity.generic.eat": "Eating", 
                "entity.generic.explode": "Explosion", 
                "entity.generic.extinguish_fire": "Fire extinguishes", 
                "entity.generic.hurt": "Something hurts", 
                "entity.generic.small_fall": "Something tripped", 
                "entity.generic.splash": "Splashing", 
                "entity.generic.swim": "Swimming", 
                "entity.ghast.ambient": "Ghast cries", 
                "entity.ghast.death": "Ghast dies", 
                "entity.ghast.hurt": "Ghast hurts", 
                "entity.ghast.shoot": "Ghast shoots", 
                "entity.guardian.ambient": "Guardian moans", 
                "entity.guardian.ambient.land": "Guardian flaps", 
                "entity.guardian.attack": "Guardian shoots", 
                "entity.guardian.curse": "Guardian curses", 
                "entity.guardian.death": "Guardian dies", 
                "entity.guardian.flop": "Guardian flops", 
                "entity.guardian.hurt": "Guardian hurts", 
                "entity.horse.ambient": "Horse neighs", 
                "entity.horse.angry": "Horse neighs", 
                "entity.horse.armor": "Horse armor equips", 
                "entity.horse.breathe": "Horse breathes", 
                "entity.horse.death": "Horse dies", 
                "entity.horse.eat": "Horse eats", 
                "entity.horse.gallop": "Horse gallops", 
                "entity.horse.hurt": "Horse hurts", 
                "entity.horse.jump": "Horse jumps", 
                "entity.horse.saddle": "Saddle equips", 
                "entity.husk.ambient": "Husk groans", 
                "entity.husk.death": "Husk dies", 
                "entity.husk.hurt": "Husk hurts", 
                "entity.illusion_illager.ambient": "Illusioner murmurs", 
                "entity.illusion_illager.cast_spell": "Illusioner casts spell", 
                "entity.illusion_illager.death": "Illusioner dies", 
                "entity.illusion_illager.hurt": "Illusioner hurts", 
                "entity.illusion_illager.mirror_move": "Illusioner displaces", 
                "entity.illusion_illager.prepare_blindness": "Illusioner prepares blindness", 
                "entity.illusion_illager.prepare_mirror": "Illusioner prepares mirror image", 
                "entity.iron_golem.attack": "Iron Golem attacks", 
                "entity.iron_golem.death": "Iron Golem dies", 
                "entity.iron_golem.hurt": "Iron Golem hurts", 
                "entity.item.break": "Item breaks", 
                "entity.item.pickup": "Item plops", 
                "entity.itemframe.add_item": "Item Frame fills", 
                "entity.itemframe.break": "Item Frame breaks", 
                "entity.itemframe.place": "Item Frame placed", 
                "entity.itemframe.remove_item": "Item Frame empties", 
                "entity.itemframe.rotate_item": "Item Frame clicks", 
                "entity.leashknot.break": "Leash knot breaks", 
                "entity.leashknot.place": "Leash knot tied", 
                "entity.lightning.impact": "Lightning strikes", 
                "entity.lightning.thunder": "Thunder roars", 
                "entity.llama.ambient": "Llama bleats", 
                "entity.llama.angry": "Llama bleats angry", 
                "entity.llama.chest": "Llama Chest equips", 
                "entity.llama.death": "Llama dies", 
                "entity.llama.eat": "Llama eats", 
                "entity.llama.hurt": "Llama hurts", 
                "entity.llama.spit": "Llama spits", 
                "entity.llama.step": "Llama steps", 
                "entity.llama.swag": "Llama is decorated", 
                "entity.magmacube.death": "Magma Cube dies", 
                "entity.magmacube.hurt": "Magma Cube hurts", 
                "entity.magmacube.squish": "Magma Cube squishes", 
                "entity.minecart.riding": "Minecart rolls", 
                "entity.mule.ambient": "Mule hee-haws", 
                "entity.mule.chest": "Mule Chest equips", 
                "entity.mule.death": "Mule dies", 
                "entity.mule.hurt": "Mule hurts", 
                "entity.painting.break": "Painting breaks", 
                "entity.painting.place": "Painting placed", 
                "entity.parrot.ambient": "Parrot talks", 
                "entity.parrot.death": "Parrot dies", 
                "entity.parrot.eats": "Parrot eats", 
                "entity.parrot.hurts": "Parrot hurts", 
                "entity.parrot.imitate.blaze": "Parrot breathes", 
                "entity.parrot.imitate.cave_spider": "Parrot hisses", 
                "entity.parrot.imitate.creeper": "Parrot hisses", 
                "entity.parrot.imitate.elder_guardian": "Parrot flaps", 
                "entity.parrot.imitate.enderdragon": "Parrot roars", 
                "entity.parrot.imitate.enderman": "Parrot vwoops", 
                "entity.parrot.imitate.endermite": "Parrot scuttles", 
                "entity.parrot.imitate.evocation_illager": "Parrot murmurs", 
                "entity.parrot.imitate.ghast": "Parrot cries", 
                "entity.parrot.imitate.husk": "Parrot groans", 
                "entity.parrot.imitate.illusion_illager": "Parrot murmurs", 
                "entity.parrot.imitate.magmacube": "Parrot squishes", 
                "entity.parrot.imitate.polar_bear": "Parrot groans", 
                "entity.parrot.imitate.shulker": "Parrot lurks", 
                "entity.parrot.imitate.silverfish": "Parrot hisses", 
                "entity.parrot.imitate.skeleton": "Parrot rattles", 
                "entity.parrot.imitate.slime": "Parrot squishes", 
                "entity.parrot.imitate.spider": "Parrot hisses", 
                "entity.parrot.imitate.stray": "Parrot rattles", 
                "entity.parrot.imitate.vex": "Parrot vexes", 
                "entity.parrot.imitate.vindication_illager": "Parrot mutters", 
                "entity.parrot.imitate.witch": "Parrot giggles", 
                "entity.parrot.imitate.wither": "Parrot angers", 
                "entity.parrot.imitate.wither_skeleton": "Parrot rattles", 
                "entity.parrot.imitate.wolf": "Parrot pants", 
                "entity.parrot.imitate.zombie": "Parrot groans", 
                "entity.parrot.imitate.zombie_pigman": "Parrot grunts", 
                "entity.parrot.imitate.zombie_villager": "Parrot groans", 
                "entity.pig.ambient": "Pig oinks", 
                "entity.pig.death": "Pig dies", 
                "entity.pig.hurt": "Pig hurts", 
                "entity.pig.saddle": "Saddle equips", 
                "entity.player.burp": "Burp", 
                "entity.player.death": "Player dies", 
                "entity.player.hurt": "Player hurts", 
                "entity.player.levelup": "Player dings", 
                "entity.polar_bear.ambient": "Polar Bear groans", 
                "entity.polar_bear.baby_ambient": "Polar Bear hums", 
                "entity.polar_bear.death": "Polar Bear dies", 
                "entity.polar_bear.hurt": "Polar Bear hurts", 
                "entity.polar_bear.warning": "Polar Bear roars", 
                "entity.potion.splash": "Bottle smashes", 
                "entity.potion.throw": "Bottle thrown", 
                "entity.rabbit.ambient": "Rabbit squeaks", 
                "entity.rabbit.attack": "Rabbit attacks", 
                "entity.rabbit.death": "Rabbit dies", 
                "entity.rabbit.hurt": "Rabbit hurts", 
                "entity.rabbit.jump": "Rabbit hops", 
                "entity.sheep.ambient": "Sheep baahs", 
                "entity.sheep.death": "Sheep dies", 
                "entity.sheep.hurt": "Sheep hurts", 
                "entity.shulker.ambient": "Shulker lurks", 
                "entity.shulker.close": "Shulker closes", 
                "entity.shulker.death": "Shulker dies", 
                "entity.shulker.hurt": "Shulker hurts", 
                "entity.shulker.open": "Shulker opens", 
                "entity.shulker.shoot": "Shulker shoots", 
                "entity.shulker.teleport": "Shulker teleports", 
                "entity.shulker_bullet.hit": "Shulker bullet explodes", 
                "entity.shulker_bullet.hurt": "Shulker bullet breaks", 
                "entity.silverfish.ambient": "Silverfish hisses", 
                "entity.silverfish.death": "Silverfish dies", 
                "entity.silverfish.hurt": "Silverfish hurts", 
                "entity.skeleton.ambient": "Skeleton rattles", 
                "entity.skeleton.death": "Skeleton dies", 
                "entity.skeleton.hurt": "Skeleton hurts", 
                "entity.skeleton.shoot": "Skeleton shoots", 
                "entity.skeleton_horse.ambient": "Skeleton Horse cries", 
                "entity.skeleton_horse.death": "Skeleton Horse dies", 
                "entity.skeleton_horse.hurt": "Skeleton Horse hurts", 
                "entity.slime.attack": "Slime attacks", 
                "entity.slime.death": "Slime dies", 
                "entity.slime.hurt": "Slime hurts", 
                "entity.slime.squish": "Slime squishes", 
                "entity.snowball.throw": "Snowball flies", 
                "entity.snowman.death": "Snow Golem dies", 
                "entity.snowman.hurt": "Snow Golem hurts", 
                "entity.spider.ambient": "Spider hisses", 
                "entity.spider.death": "Spider dies", 
                "entity.spider.hurt": "Spider hurts", 
                "entity.squid.ambient": "Squid swims", 
                "entity.squid.death": "Squid dies", 
                "entity.squid.hurt": "Squid hurts", 
                "entity.stray.ambient": "Stray rattles", 
                "entity.stray.death": "Stray dies", 
                "entity.stray.hurt": "Stray hurts", 
                "entity.tnt.primed": "TNT fizzes", 
                "entity.vex.ambient": "Vex vexes", 
                "entity.vex.charge": "Vex shrieks", 
                "entity.vex.death": "Vex dies", 
                "entity.vex.hurt": "Vex hurts", 
                "entity.villager.ambient": "Villager mumbles", 
                "entity.villager.death": "Villager dies", 
                "entity.villager.hurt": "Villager hurts", 
                "entity.villager.no": "Villager disagrees", 
                "entity.villager.trading": "Villager trades", 
                "entity.villager.yes": "Villager agrees", 
                "entity.vindication_illager.ambient": "Vindicator mutters", 
                "entity.vindication_illager.death": "Vindicator dies", 
                "entity.vindication_illager.hurt": "Vindicator hurts", 
                "entity.witch.ambient": "Witch giggles", 
                "entity.witch.death": "Witch dies", 
                "entity.witch.drink": "Witch drinks", 
                "entity.witch.hurt": "Witch hurts", 
                "entity.witch.throw": "Witch throws", 
                "entity.wither.ambient": "Wither angers", 
                "entity.wither.death": "Wither dies", 
                "entity.wither.hurt": "Wither hurts", 
                "entity.wither.shoot": "Wither attacks", 
                "entity.wither.spawn": "Wither released", 
                "entity.wither_skeleton.ambient": "Wither Skeleton rattles", 
                "entity.wither_skeleton.death": "Wither Skeleton dies", 
                "entity.wither_skeleton.hurt": "Wither Skeleton hurts", 
                "entity.wolf.ambient": "Wolf pants", 
                "entity.wolf.death": "Wolf dies", 
                "entity.wolf.growl": "Wolf growls", 
                "entity.wolf.hurt": "Wolf hurts", 
                "entity.wolf.shake": "Wolf shakes", 
                "entity.zombie.ambient": "Zombie groans", 
                "entity.zombie.death": "Zombie dies", 
                "entity.zombie.hurt": "Zombie hurts", 
                "entity.zombie.infect": "Zombie infects", 
                "entity.zombie_horse.ambient": "Zombie Horse cries", 
                "entity.zombie_horse.death": "Zombie Horse dies", 
                "entity.zombie_horse.hurt": "Zombie Horse hurts", 
                "entity.zombie_pigman.ambient": "Zombie Pigman grunts", 
                "entity.zombie_pigman.angry": "Zombie Pigman angers", 
                "entity.zombie_pigman.death": "Zombie Pigman dies", 
                "entity.zombie_pigman.hurt": "Zombie Pigman hurts", 
                "entity.zombie_villager.ambient": "Zombie Villager groans", 
                "entity.zombie_villager.converted": "Zombie vociferates", 
                "entity.zombie_villager.cure": "Zombie snuffles", 
                "entity.zombie_villager.death": "Zombie Villager dies", 
                "entity.zombie_villager.hurt": "Zombie Villager hurts", 
                "item.armor.equip": "Gear equipped", 
                "item.armor.equip_chain": "Chain armor jingles", 
                "item.armor.equip_diamond": "Diamond armor clangs", 
                "item.armor.equip_elytra": "Elytra rustles", 
                "item.armor.equip_gold": "Gold armor clinks", 
                "item.armor.equip_iron": "Iron armor clanks", 
                "item.armor.equip_leather": "Leather armor rustles", 
                "item.axe.strip": "Debarking log", 
                "item.bottle.fill": "Bottle fills", 
                "item.bucket.empty": "Bucket empties", 
                "item.bucket.fill": "Bucket fills", 
                "item.chorus_fruit.teleport": "Player teleports", 
                "item.firecharge.use": "Fireball whooshes", 
                "item.flintandsteel.use": "Flint and Steel click", 
                "item.hoe.till": "Hoe tills", 
                "item.shear": "Shears click", 
                "item.shield.block": "Shield blocks", 
                "item.shovel.flatten": "Shovel flattens", 
                "item.totem.use": "Totem activates", 
                "turtle.ambient_land": "Turtle chirp", 
                "turtle.death": "Turtle dies", 
                "turtle.death_baby": "Turtle baby dies", 
                "turtle.egg_break": "Turtle egg breaks", 
                "turtle.egg_crack": "Turtle egg cracks", 
                "turtle.egg_hatch": "Turtle egg hatches", 
                "turtle.hurt": "Turtle hurts", 
                "turtle.hurt_baby": "Turtle baby hurts", 
                "turtle.lay_egg": "Turtle lays egg", 
                "turtle.shamble": "Turtle shambles", 
                "turtle.shamble_baby": "Turtle baby shambles", 
                "turtle.swim": "Turtle swims", 
                "weather.rain": "Rain falls"
            }, 
            "team": {
                "collision.always": "Always", 
                "collision.never": "Never", 
                "collision.pushOtherTeams": "Push other teams", 
                "collision.pushOwnTeam": "Push own team", 
                "visibility.always": "Always", 
                "visibility.hideForOtherTeams": "Hide for other teams", 
                "visibility.hideForOwnTeam": "Hide for own team", 
                "visibility.never": "Never"
            }, 
            "title": {
                "oldgl1": "Old graphics card detected; this may prevent you from", 
                "oldgl2": "playing in the future as OpenGL 2.0 will be required."
            }, 
            "translation": {
                "test.args": "%s %s", 
                "test.complex": "Prefix, %s%2$s again %s and %1$s lastly %s and also %1$s again!", 
                "test.escape": "%%s %%%s %%%%s %%%%%s", 
                "test.invalid": "hi %", 
                "test.invalid2": "hi %  s", 
                "test.none": "Hello, world!", 
                "test.world": "world"
            }, 
            "tutorial": {
                "craft_planks.description": "The recipe book can help", 
                "craft_planks.title": "Craft wooden planks", 
                "find_tree.description": "Punch it to collect wood", 
                "find_tree.title": "Find a tree", 
                "look.description": "Use your mouse to turn", 
                "look.title": "Look around", 
                "move.description": "Jump with %s", 
                "move.title": "Move with %s, %s, %s and %s", 
                "open_inventory.description": "Press %s", 
                "open_inventory.title": "Open your inventory", 
                "punch_tree.description": "Hold down %s", 
                "punch_tree.title": "Destroy the tree"
            }
        }, 
        "packets": {
            "directions": {
                "CLIENTBOUND": {
                    "class": "ie", 
                    "field": "b", 
                    "name": "CLIENTBOUND"
                }, 
                "SERVERBOUND": {
                    "class": "ie", 
                    "field": "a", 
                    "name": "SERVERBOUND"
                }
            }, 
            "info": {
                "count": 129
            }, 
            "packet": {
                "HANDSHAKING_SERVERBOUND_00": {
                    "class": "ms.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 0, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "d.a()", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "HANDSHAKING"
                }, 
                "LOGIN_CLIENTBOUND_00": {
                    "class": "mz.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 0, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "chatcomponent"
                        }
                    ], 
                    "state": "LOGIN"
                }, 
                "LOGIN_CLIENTBOUND_01": {
                    "class": "mx.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 1, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "b.getEncoded().length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b.getEncoded()", 
                            "operation": "write", 
                            "type": "byte[]"
                        }, 
                        {
                            "field": "c.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "byte[]"
                        }
                    ], 
                    "state": "LOGIN"
                }, 
                "LOGIN_CLIENTBOUND_02": {
                    "class": "mw.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 2, 
                    "instructions": [
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.a.getId()", 
                            "var": "var2"
                        }, 
                        {
                            "field": "(var2 == null) ? \"\" : var2.toString()", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "a.getName()", 
                            "operation": "write", 
                            "type": "string"
                        }
                    ], 
                    "state": "LOGIN"
                }, 
                "LOGIN_CLIENTBOUND_03": {
                    "class": "my.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 3, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "LOGIN"
                }, 
                "LOGIN_SERVERBOUND_00": {
                    "class": "nb.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 0, 
                    "instructions": [
                        {
                            "field": "a.getName()", 
                            "operation": "write", 
                            "type": "string"
                        }
                    ], 
                    "state": "LOGIN"
                }, 
                "LOGIN_SERVERBOUND_01": {
                    "class": "nc.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 1, 
                    "instructions": [
                        {
                            "field": "a.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte[]"
                        }, 
                        {
                            "field": "b.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte[]"
                        }
                    ], 
                    "state": "LOGIN"
                }, 
                "PLAY_CLIENTBOUND_00": {
                    "class": "ii.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 0, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "uuid"
                        }, 
                        {
                            "field": "k", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "i", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "j", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "l", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "h", 
                            "operation": "write", 
                            "type": "short"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_01": {
                    "class": "ij.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 1, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "short"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_02": {
                    "class": "ik.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 2, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "double"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_03": {
                    "class": "il.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 3, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "uuid"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "j", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "k", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "l", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "h", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "i", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "m", 
                            "operation": "write", 
                            "type": "metadata"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_04": {
                    "class": "im.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 4, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "uuid"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "field": "d.b()", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_05": {
                    "class": "in.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 5, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "uuid"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "h", 
                            "operation": "write", 
                            "type": "metadata"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_06": {
                    "class": "io.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 6, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_07": {
                    "class": "ip.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 7, 
                    "instructions": [
                        {
                            "field": "a.size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.a.object2IntEntrySet().iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((it.unimi.dsi.fastutil.objects.Object2IntMap$Entry)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((vk)var3.getKey())", 
                                    "var": "var4"
                                }, 
                                {
                                    "field": "vn.a.a(var4.a())", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "field": "a(var4)", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "field": "var3.getIntValue()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_08": {
                    "class": "iq.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 8, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_09": {
                    "class": "ir.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 9, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "field": "(byte)b", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "nbtcompound"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_0A": {
                    "class": "is.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 10, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "axw.e.a(d)", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_0B": {
                    "class": "it.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 11, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "field": "axw.j(b)", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_0C": {
                    "class": "iu.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 12, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "uuid"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "iu$1.a[this.b.ordinal()]", 
                            "instructions": [
                                {
                                    "operation": "case", 
                                    "value": "1"
                                }, 
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "chatcomponent"
                                }, 
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "float"
                                }, 
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "enum"
                                }, 
                                {
                                    "field": "f", 
                                    "operation": "write", 
                                    "type": "enum"
                                }, 
                                {
                                    "field": "j()", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "2"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "3"
                                }, 
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "float"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "4"
                                }, 
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "chatcomponent"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "5"
                                }, 
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "enum"
                                }, 
                                {
                                    "field": "f", 
                                    "operation": "write", 
                                    "type": "enum"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "6"
                                }, 
                                {
                                    "field": "j()", 
                                    "operation": "write", 
                                    "type": "byte"
                                }
                            ], 
                            "operation": "switch"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_0D": {
                    "class": "iv.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 13, 
                    "instructions": [
                        {
                            "field": "a.a()", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_0E": {
                    "class": "iw.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 14, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "chatcomponent"
                        }, 
                        {
                            "field": "b.a()", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_0F": {
                    "class": "ix.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 15, 
                    "instructions": [
                        {
                            "field": "a.a", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "a.b", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "b.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.b", 
                            "var": "var2"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "var2.length", 
                            "var": "var3"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "0", 
                            "var": "var4"
                        }, 
                        {
                            "condition": "var4 < var3", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "var2[var4]", 
                                    "var": "var5"
                                }, 
                                {
                                    "field": "var5.b()", 
                                    "operation": "write", 
                                    "type": "short"
                                }, 
                                {
                                    "field": "axw.j(var5.c())", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "amount": "1", 
                                    "field": "var4", 
                                    "operation": "increment"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_10": {
                    "class": "iy.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 16, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b.getRange().getStart()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b.getRange().getLength()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b.getList().size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.b.getList().iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((com.mojang.brigadier.suggestion.Suggestion)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "var3.getText()", 
                                    "operation": "write", 
                                    "type": "string"
                                }, 
                                {
                                    "field": "(var3.getTooltip() != null) ? 1 : 0", 
                                    "operation": "write", 
                                    "type": "boolean"
                                }, 
                                {
                                    "condition": "var3.getTooltip() != null", 
                                    "instructions": [
                                        {
                                            "field": "hs.a(var3.getTooltip())", 
                                            "operation": "write", 
                                            "type": "chatcomponent"
                                        }
                                    ], 
                                    "operation": "if"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_11": {
                    "class": "iz.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 17, 
                    "instructions": [
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "com.google.common.collect.Maps.newHashMap()", 
                            "var": "var2"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "new ArrayDeque()", 
                            "var": "var3"
                        }, 
                        {
                            "condition": "var3.isEmpty() == 0", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((com.mojang.brigadier.tree.CommandNode)var3.pollFirst())", 
                                    "var": "var4"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "var2.size()", 
                                    "var": "var5"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "((com.mojang.brigadier.tree.CommandNode[])new com.mojang.brigadier.tree.CommandNode[var2.size()])", 
                            "var": "var4"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "var2.entrySet().iterator()", 
                            "var": "var5"
                        }, 
                        {
                            "condition": "var5.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((Map$Entry)var5.next())", 
                                    "var": "var6"
                                }, 
                                {
                                    "index": "((Integer)var6.getValue()).intValue()", 
                                    "operation": "arraystore", 
                                    "type": "Object", 
                                    "value": "((com.mojang.brigadier.tree.CommandNode)var6.getKey())", 
                                    "var": "var4"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "field": "var4.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "var4", 
                            "var": "var5"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "var5.length", 
                            "var": "var6"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "0", 
                            "var": "var7"
                        }, 
                        {
                            "condition": "var7 < var6", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "var5[var7]", 
                                    "var": "var8"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "0", 
                                    "var": "var4"
                                }, 
                                {
                                    "condition": "var8.getRedirect() != null", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "int", 
                                            "value": "((byte)(var4 | 0x8))", 
                                            "var": "var4"
                                        }
                                    ], 
                                    "operation": "if"
                                }, 
                                {
                                    "condition": "var8.getCommand() != null", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "int", 
                                            "value": "((byte)(var4 | 4))", 
                                            "var": "var4"
                                        }
                                    ], 
                                    "operation": "if"
                                }, 
                                {
                                    "condition": "var8 instanceof com.mojang.brigadier.tree.RootCommandNode", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "int", 
                                            "value": "((byte)(var4 | 0))", 
                                            "var": "var4"
                                        }
                                    ], 
                                    "operation": "if"
                                }, 
                                {
                                    "instructions": [
                                        {
                                            "condition": "var8 instanceof com.mojang.brigadier.tree.ArgumentCommandNode", 
                                            "instructions": [
                                                {
                                                    "operation": "store", 
                                                    "type": "int", 
                                                    "value": "((byte)(var4 | 2))", 
                                                    "var": "var4"
                                                }, 
                                                {
                                                    "condition": "((com.mojang.brigadier.tree.ArgumentCommandNode)var8).getCustomSuggestions() != null", 
                                                    "instructions": [
                                                        {
                                                            "operation": "store", 
                                                            "type": "int", 
                                                            "value": "((byte)(var4 | 0x10))", 
                                                            "var": "var4"
                                                        }
                                                    ], 
                                                    "operation": "if"
                                                }, 
                                                {
                                                    "instructions": [
                                                        {
                                                            "condition": "var8 instanceof com.mojang.brigadier.tree.LiteralCommandNode", 
                                                            "instructions": [
                                                                {
                                                                    "operation": "store", 
                                                                    "type": "int", 
                                                                    "value": "((byte)(var4 | 1))", 
                                                                    "var": "var4"
                                                                }
                                                            ], 
                                                            "operation": "if"
                                                        }
                                                    ], 
                                                    "operation": "else"
                                                }
                                            ], 
                                            "operation": "if"
                                        }
                                    ], 
                                    "operation": "else"
                                }, 
                                {
                                    "field": "var4", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "var8.getChildren().size()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "var8.getChildren().iterator()", 
                                    "var": "var5"
                                }, 
                                {
                                    "condition": "var5.hasNext()", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "((com.mojang.brigadier.tree.CommandNode)var5.next())", 
                                            "var": "var6"
                                        }, 
                                        {
                                            "field": "((Integer)var2.get(var6)).intValue()", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }
                                    ], 
                                    "operation": "loop"
                                }, 
                                {
                                    "condition": "var8.getRedirect() != null", 
                                    "instructions": [
                                        {
                                            "field": "((Integer)var2.get(var8.getRedirect())).intValue()", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }
                                    ], 
                                    "operation": "if"
                                }, 
                                {
                                    "condition": "var8 instanceof com.mojang.brigadier.tree.ArgumentCommandNode", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "((com.mojang.brigadier.tree.ArgumentCommandNode)var8)", 
                                            "var": "var5"
                                        }, 
                                        {
                                            "field": "var5.getName()", 
                                            "operation": "write", 
                                            "type": "string"
                                        }, 
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "dq.a(var5.getType())", 
                                            "var": "var2"
                                        }, 
                                        {
                                            "condition": "var2 == null", 
                                            "instructions": [
                                                {
                                                    "field": "new nx(\"\")", 
                                                    "operation": "write", 
                                                    "type": "identifier"
                                                }
                                            ], 
                                            "operation": "if"
                                        }, 
                                        {
                                            "field": "var2.c", 
                                            "operation": "write", 
                                            "type": "identifier"
                                        }, 
                                        {
                                            "args": "var5.getType(), packetbuffer", 
                                            "field": "var2.b", 
                                            "method": "a(Lcom/mojang/brigadier/arguments/ArgumentType;Lhi;)V", 
                                            "name": "a", 
                                            "operation": "interfacecall", 
                                            "target": "dp", 
                                            "type": "interface"
                                        }, 
                                        {
                                            "condition": "var5.getCustomSuggestions() != null", 
                                            "instructions": [
                                                {
                                                    "field": "ds.a(var5.getCustomSuggestions())", 
                                                    "operation": "write", 
                                                    "type": "identifier"
                                                }
                                            ], 
                                            "operation": "if"
                                        }
                                    ], 
                                    "operation": "if"
                                }, 
                                {
                                    "instructions": [
                                        {
                                            "condition": "var8 instanceof com.mojang.brigadier.tree.LiteralCommandNode", 
                                            "instructions": [
                                                {
                                                    "field": "((com.mojang.brigadier.tree.LiteralCommandNode)var8).getLiteral()", 
                                                    "operation": "write", 
                                                    "type": "string"
                                                }
                                            ], 
                                            "operation": "if"
                                        }
                                    ], 
                                    "operation": "else"
                                }, 
                                {
                                    "amount": "1", 
                                    "field": "var7", 
                                    "operation": "increment"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "field": "((Integer)var2.get(a)).intValue()", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_12": {
                    "class": "ja.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 18, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_13": {
                    "class": "jb.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 19, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_14": {
                    "class": "jc.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 20, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "chatcomponent"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "condition": "b.equals(\"EntityHorse\")", 
                            "instructions": [
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "int"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_15": {
                    "class": "jd.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 21, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b.size()", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.b.iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((ape)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "var3", 
                                    "operation": "write", 
                                    "type": "itemstack"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_16": {
                    "class": "je.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 22, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "short"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_17": {
                    "class": "jf.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 23, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "itemstack"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_18": {
                    "class": "jg.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 24, 
                    "instructions": [
                        {
                            "field": "apa.a(a)", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_19": {
                    "class": "jh.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 25, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "b.copy()", 
                            "operation": "write", 
                            "type": "byte[]"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_1A": {
                    "class": "ji.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 26, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "identifier"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_1B": {
                    "class": "jj.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 27, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "chatcomponent"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_1C": {
                    "class": "jk.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 28, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_1D": {
                    "class": "jl.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 29, 
                    "instructions": [
                        {
                            "field": "(float)a", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "(float)b", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "(float)c", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "e.size()", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "((int)this.a)", 
                            "var": "var2"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "((int)this.b)", 
                            "var": "var3"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "((int)this.c)", 
                            "var": "var4"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.e.iterator()", 
                            "var": "var5"
                        }, 
                        {
                            "condition": "var5.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((ec)var5.next())", 
                                    "var": "var6"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "(var6.p() - var2)", 
                                    "var": "var7"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "(var6.q() - var3)", 
                                    "var": "var8"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "(var6.r() - var4)", 
                                    "var": "var9"
                                }, 
                                {
                                    "field": "var7", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "var8", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "var9", 
                                    "operation": "write", 
                                    "type": "byte"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "h", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_1E": {
                    "class": "jm.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 30, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "int"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_1F": {
                    "class": "jn.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 31, 
                    "instructions": [
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_20": {
                    "class": "jo.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 32, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "long"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_21": {
                    "class": "jp.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 33, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "d.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "byte[]"
                        }, 
                        {
                            "field": "e.size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.e.iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((gj)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "var3", 
                                    "operation": "write", 
                                    "type": "nbtcompound"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_22": {
                    "class": "jq.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 34, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_23": {
                    "class": "jr.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 35, 
                    "instructions": [
                        {
                            "field": "j.b().e()", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "i", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "h", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "args": "packetbuffer", 
                            "field": "j", 
                            "method": "a(Lhi;)V", 
                            "name": "a", 
                            "operation": "interfacecall", 
                            "target": "fd", 
                            "type": "interface"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_24": {
                    "class": "js.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 36, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "this.c.a()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "b", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "(var2 | 0x8)", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "field": "var2", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "e.a()", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "g.a()", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "h", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_25": {
                    "class": "jt.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 37, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "d.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.d", 
                            "var": "var2"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "var2.length", 
                            "var": "var3"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "0", 
                            "var": "var4"
                        }, 
                        {
                            "condition": "var4 < var3", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "var2[var4]", 
                                    "var": "var5"
                                }, 
                                {
                                    "field": "((var5.a() & 0xf) << 4) | (var5.e() & 0xf)", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "var5.c()", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "var5.d()", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "amount": "1", 
                                    "field": "var4", 
                                    "operation": "increment"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "condition": "g > 0", 
                            "instructions": [
                                {
                                    "field": "h", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "f", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "i.length", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "field": "i", 
                                    "operation": "write", 
                                    "type": "byte[]"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_26": {
                    "class": "ju.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 38, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_27": {
                    "class": "ju$a.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 39, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_28": {
                    "class": "ju$b.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 40, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_29": {
                    "class": "ju$c.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 41, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_2A": {
                    "class": "jv.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 42, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_2B": {
                    "class": "jw.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 43, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "position"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_2C": {
                    "class": "jx.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 44, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "identifier"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_2D": {
                    "class": "jy.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 45, 
                    "instructions": [
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "0", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "a()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 1))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "b()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 2))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "c()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 4))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "d()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 0x8))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "field": "var2", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_2E": {
                    "class": "jz.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 46, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "condition": "a == jz$a.b", 
                            "instructions": [
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "int"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "instructions": [
                                {
                                    "condition": "a == jz$a.c", 
                                    "instructions": [
                                        {
                                            "field": "b", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }, 
                                        {
                                            "field": "c", 
                                            "operation": "write", 
                                            "type": "int"
                                        }, 
                                        {
                                            "field": "e", 
                                            "operation": "write", 
                                            "type": "chatcomponent"
                                        }
                                    ], 
                                    "operation": "if"
                                }
                            ], 
                            "operation": "else"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_2F": {
                    "class": "ka.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 47, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "b.size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.b.iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((ka$b)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "ka$1.a[this.a.ordinal()]", 
                                    "instructions": [
                                        {
                                            "operation": "case", 
                                            "value": "1"
                                        }, 
                                        {
                                            "field": "var3.a().getId()", 
                                            "operation": "write", 
                                            "type": "uuid"
                                        }, 
                                        {
                                            "field": "var3.a().getName()", 
                                            "operation": "write", 
                                            "type": "string"
                                        }, 
                                        {
                                            "field": "var3.a().getProperties().size()", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }, 
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "var3.a().getProperties().values().iterator()", 
                                            "var": "var4"
                                        }, 
                                        {
                                            "condition": "var4.hasNext()", 
                                            "instructions": [
                                                {
                                                    "operation": "store", 
                                                    "type": "Object", 
                                                    "value": "((com.mojang.authlib.properties.Property)var4.next())", 
                                                    "var": "var5"
                                                }, 
                                                {
                                                    "field": "var5.getName()", 
                                                    "operation": "write", 
                                                    "type": "string"
                                                }, 
                                                {
                                                    "field": "var5.getValue()", 
                                                    "operation": "write", 
                                                    "type": "string"
                                                }, 
                                                {
                                                    "condition": "var5.hasSignature()", 
                                                    "instructions": [
                                                        {
                                                            "field": "1", 
                                                            "operation": "write", 
                                                            "type": "boolean"
                                                        }, 
                                                        {
                                                            "field": "var5.getSignature()", 
                                                            "operation": "write", 
                                                            "type": "string"
                                                        }
                                                    ], 
                                                    "operation": "if"
                                                }, 
                                                {
                                                    "instructions": [
                                                        {
                                                            "field": "0", 
                                                            "operation": "write", 
                                                            "type": "boolean"
                                                        }
                                                    ], 
                                                    "operation": "else"
                                                }
                                            ], 
                                            "operation": "loop"
                                        }, 
                                        {
                                            "field": "var3.c().a()", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }, 
                                        {
                                            "field": "var3.b()", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }, 
                                        {
                                            "condition": "var3.d() == null", 
                                            "instructions": [
                                                {
                                                    "field": "0", 
                                                    "operation": "write", 
                                                    "type": "boolean"
                                                }, 
                                                {
                                                    "operation": "break"
                                                }
                                            ], 
                                            "operation": "if"
                                        }, 
                                        {
                                            "field": "1", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }, 
                                        {
                                            "field": "var3.d()", 
                                            "operation": "write", 
                                            "type": "chatcomponent"
                                        }, 
                                        {
                                            "operation": "break"
                                        }, 
                                        {
                                            "operation": "case", 
                                            "value": "2"
                                        }, 
                                        {
                                            "field": "var3.a().getId()", 
                                            "operation": "write", 
                                            "type": "uuid"
                                        }, 
                                        {
                                            "field": "var3.c().a()", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }, 
                                        {
                                            "operation": "break"
                                        }, 
                                        {
                                            "operation": "case", 
                                            "value": "3"
                                        }, 
                                        {
                                            "field": "var3.a().getId()", 
                                            "operation": "write", 
                                            "type": "uuid"
                                        }, 
                                        {
                                            "field": "var3.b()", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }, 
                                        {
                                            "operation": "break"
                                        }, 
                                        {
                                            "operation": "case", 
                                            "value": "4"
                                        }, 
                                        {
                                            "field": "var3.a().getId()", 
                                            "operation": "write", 
                                            "type": "uuid"
                                        }, 
                                        {
                                            "condition": "var3.d() == null", 
                                            "instructions": [
                                                {
                                                    "field": "0", 
                                                    "operation": "write", 
                                                    "type": "boolean"
                                                }, 
                                                {
                                                    "operation": "break"
                                                }
                                            ], 
                                            "operation": "if"
                                        }, 
                                        {
                                            "field": "1", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }, 
                                        {
                                            "field": "var3.d()", 
                                            "operation": "write", 
                                            "type": "chatcomponent"
                                        }, 
                                        {
                                            "operation": "break"
                                        }, 
                                        {
                                            "operation": "case", 
                                            "value": "5"
                                        }, 
                                        {
                                            "field": "var3.a().getId()", 
                                            "operation": "write", 
                                            "type": "uuid"
                                        }
                                    ], 
                                    "operation": "switch"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_30": {
                    "class": "kb.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 48, 
                    "instructions": [
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "condition": "g", 
                            "instructions": [
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "field": "f", 
                                    "operation": "write", 
                                    "type": "enum"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_31": {
                    "class": "kc.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 49, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "kc$a.a(f)", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_32": {
                    "class": "kd.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 50, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "position"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_33": {
                    "class": "ke.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 51, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "b.size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.b.iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((nx)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "var3", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "condition": "a == ke$a.a", 
                            "instructions": [
                                {
                                    "field": "c.size()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "this.c.iterator()", 
                                    "var": "var2"
                                }, 
                                {
                                    "condition": "var2.hasNext()", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "((nx)var2.next())", 
                                            "var": "var3"
                                        }, 
                                        {
                                            "field": "var3", 
                                            "operation": "write", 
                                            "type": "identifier"
                                        }
                                    ], 
                                    "operation": "loop"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_34": {
                    "class": "kf.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 52, 
                    "instructions": [
                        {
                            "field": "a.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.a", 
                            "var": "var2"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "var2.length", 
                            "var": "var3"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "0", 
                            "var": "var4"
                        }, 
                        {
                            "condition": "var4 < var3", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "var2[var4]", 
                                    "var": "var5"
                                }, 
                                {
                                    "field": "var5", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "amount": "1", 
                                    "field": "var4", 
                                    "operation": "increment"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_35": {
                    "class": "kg.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 53, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "aba.a(b)", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_36": {
                    "class": "kh.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 54, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "string"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_37": {
                    "class": "ki.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 55, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "b.a()", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "c.a()", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "d.a()", 
                            "operation": "write", 
                            "type": "string"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_38": {
                    "class": "kj.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 56, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_39": {
                    "class": "kk.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 57, 
                    "instructions": [
                        {
                            "field": "(a != null) ? 1 : 0", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "condition": "a != null", 
                            "instructions": [
                                {
                                    "field": "a", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_3A": {
                    "class": "kl.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 58, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "kl$1.a[this.a.ordinal()]", 
                            "instructions": [
                                {
                                    "operation": "case", 
                                    "value": "1"
                                }, 
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "2"
                                }, 
                                {
                                    "field": "f", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "field": "g", 
                                    "operation": "write", 
                                    "type": "varlong"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "3"
                                }, 
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "5"
                                }, 
                                {
                                    "field": "h", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "4"
                                }, 
                                {
                                    "field": "i", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "break"
                                }, 
                                {
                                    "operation": "case", 
                                    "value": "6"
                                }, 
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "field": "f", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "field": "g", 
                                    "operation": "write", 
                                    "type": "varlong"
                                }, 
                                {
                                    "field": "b", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "field": "i", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "field": "h", 
                                    "operation": "write", 
                                    "type": "varint"
                                }
                            ], 
                            "operation": "switch"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_3B": {
                    "class": "km.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 59, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_3C": {
                    "class": "kn.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 60, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_3D": {
                    "class": "ko.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 61, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "string"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_3E": {
                    "class": "kp.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 62, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "metadata"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_3F": {
                    "class": "kq.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 63, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "int"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_40": {
                    "class": "kr.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 64, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "short"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_41": {
                    "class": "ks.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 65, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "itemstack"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_42": {
                    "class": "kt.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 66, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_43": {
                    "class": "ku.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 67, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_44": {
                    "class": "kv.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 68, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "condition": "d", 
                            "instructions": [
                                {
                                    "field": "b", 
                                    "operation": "write", 
                                    "type": "string"
                                }, 
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "enum"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_45": {
                    "class": "kw.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 69, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b.length", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "varint[]"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_46": {
                    "class": "kx.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 70, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "condition": "g", 
                            "instructions": [
                                {
                                    "field": "b", 
                                    "operation": "write", 
                                    "type": "string"
                                }, 
                                {
                                    "field": "h", 
                                    "operation": "write", 
                                    "type": "byte"
                                }, 
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "string"
                                }, 
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "string"
                                }, 
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "enum"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "g", 
                            "instructions": [
                                {
                                    "field": "f.size()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "this.f.iterator()", 
                                    "var": "var2"
                                }, 
                                {
                                    "condition": "var2.hasNext()", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "((String)var2.next())", 
                                            "var": "var3"
                                        }, 
                                        {
                                            "field": "var3", 
                                            "operation": "write", 
                                            "type": "string"
                                        }
                                    ], 
                                    "operation": "loop"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_47": {
                    "class": "ky.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 71, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "(b == null) ? \"\" : b", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "condition": "d != on$a.b", 
                            "instructions": [
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "varint"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_48": {
                    "class": "kz.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 72, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "position"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_49": {
                    "class": "la.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 73, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "long"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "long"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_4A": {
                    "class": "lb.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 74, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "condition": "a != lb$a.a", 
                            "instructions": [
                                {
                                    "field": "b", 
                                    "operation": "write", 
                                    "type": "chatcomponent"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "a == lb$a.d", 
                            "instructions": [
                                {
                                    "field": "c", 
                                    "operation": "write", 
                                    "type": "int"
                                }, 
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "int"
                                }, 
                                {
                                    "field": "e", 
                                    "operation": "write", 
                                    "type": "int"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_4B": {
                    "class": "ld.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 75, 
                    "instructions": [
                        {
                            "condition": "b != null", 
                            "instructions": [
                                {
                                    "condition": "a != null", 
                                    "instructions": [
                                        {
                                            "field": "3", 
                                            "operation": "write", 
                                            "type": "byte"
                                        }, 
                                        {
                                            "field": "b", 
                                            "operation": "write", 
                                            "type": "enum"
                                        }, 
                                        {
                                            "field": "a", 
                                            "operation": "write", 
                                            "type": "identifier"
                                        }
                                    ], 
                                    "operation": "if"
                                }, 
                                {
                                    "instructions": [
                                        {
                                            "field": "1", 
                                            "operation": "write", 
                                            "type": "byte"
                                        }, 
                                        {
                                            "field": "b", 
                                            "operation": "write", 
                                            "type": "enum"
                                        }
                                    ], 
                                    "operation": "else"
                                }, 
                                {
                                    "instructions": [
                                        {
                                            "condition": "a != null", 
                                            "instructions": [
                                                {
                                                    "field": "2", 
                                                    "operation": "write", 
                                                    "type": "byte"
                                                }, 
                                                {
                                                    "field": "a", 
                                                    "operation": "write", 
                                                    "type": "identifier"
                                                }
                                            ], 
                                            "operation": "if"
                                        }, 
                                        {
                                            "instructions": [
                                                {
                                                    "field": "0", 
                                                    "operation": "write", 
                                                    "type": "byte"
                                                }
                                            ], 
                                            "operation": "else"
                                        }
                                    ], 
                                    "operation": "else"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_4C": {
                    "class": "lc.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 76, 
                    "instructions": [
                        {
                            "field": "vd.a.a(a)", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_4D": {
                    "class": "le.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 77, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "chatcomponent"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "chatcomponent"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_4E": {
                    "class": "lf.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 78, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_4F": {
                    "class": "lg.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 79, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "g", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_50": {
                    "class": "lh.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 80, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "b.size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.b.entrySet().iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((Map$Entry)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((nx)var3.getKey())", 
                                    "var": "var4"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((l$a)var3.getValue())", 
                                    "var": "var5"
                                }, 
                                {
                                    "field": "var4", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }, 
                                {
                                    "condition": "var5.a == null", 
                                    "instructions": [
                                        {
                                            "field": "0", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }
                                    ], 
                                    "operation": "if"
                                }, 
                                {
                                    "instructions": [
                                        {
                                            "field": "1", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }, 
                                        {
                                            "field": "var5.a", 
                                            "operation": "write", 
                                            "type": "identifier"
                                        }
                                    ], 
                                    "operation": "else"
                                }, 
                                {
                                    "condition": "var5.c == null", 
                                    "instructions": [
                                        {
                                            "field": "0", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }
                                    ], 
                                    "operation": "if"
                                }, 
                                {
                                    "instructions": [
                                        {
                                            "field": "1", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }, 
                                        {
                                            "field": "var5.c.a", 
                                            "operation": "write", 
                                            "type": "chatcomponent"
                                        }, 
                                        {
                                            "field": "var5.c.b", 
                                            "operation": "write", 
                                            "type": "chatcomponent"
                                        }, 
                                        {
                                            "field": "var5.c.c", 
                                            "operation": "write", 
                                            "type": "itemstack"
                                        }, 
                                        {
                                            "field": "var5.c.e", 
                                            "operation": "write", 
                                            "type": "enum"
                                        }, 
                                        {
                                            "operation": "store", 
                                            "type": "int", 
                                            "value": "0", 
                                            "var": "var2"
                                        }, 
                                        {
                                            "condition": "var5.c.d != null", 
                                            "instructions": [
                                                {
                                                    "operation": "store", 
                                                    "type": "int", 
                                                    "value": "(var2 | 1)", 
                                                    "var": "var2"
                                                }
                                            ], 
                                            "operation": "if"
                                        }, 
                                        {
                                            "condition": "var5.c.f", 
                                            "instructions": [
                                                {
                                                    "operation": "store", 
                                                    "type": "int", 
                                                    "value": "(var2 | 2)", 
                                                    "var": "var2"
                                                }
                                            ], 
                                            "operation": "if"
                                        }, 
                                        {
                                            "condition": "var5.c.h", 
                                            "instructions": [
                                                {
                                                    "operation": "store", 
                                                    "type": "int", 
                                                    "value": "(var2 | 4)", 
                                                    "var": "var2"
                                                }
                                            ], 
                                            "operation": "if"
                                        }, 
                                        {
                                            "field": "var2", 
                                            "operation": "write", 
                                            "type": "int"
                                        }, 
                                        {
                                            "condition": "var5.c.d != null", 
                                            "instructions": [
                                                {
                                                    "field": "var5.c.d", 
                                                    "operation": "write", 
                                                    "type": "identifier"
                                                }
                                            ], 
                                            "operation": "if"
                                        }, 
                                        {
                                            "field": "var5.c.i", 
                                            "operation": "write", 
                                            "type": "float"
                                        }, 
                                        {
                                            "field": "var5.c.j", 
                                            "operation": "write", 
                                            "type": "float"
                                        }
                                    ], 
                                    "operation": "else"
                                }, 
                                {
                                    "field": "var5.e.size()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "var5.e.entrySet().iterator()", 
                                    "var": "var2"
                                }, 
                                {
                                    "condition": "var2.hasNext()", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "((Map$Entry)var2.next())", 
                                            "var": "var3"
                                        }, 
                                        {
                                            "field": "(String)var3.getKey()", 
                                            "operation": "write", 
                                            "type": "string"
                                        }
                                    ], 
                                    "operation": "loop"
                                }, 
                                {
                                    "field": "var5.f.length", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "var5.f", 
                                    "var": "var2"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "var2.length", 
                                    "var": "var3"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "0", 
                                    "var": "var4"
                                }, 
                                {
                                    "condition": "var4 < var3", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "var2[var4]", 
                                            "var": "var5"
                                        }, 
                                        {
                                            "field": "var5.length", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }, 
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "var5", 
                                            "var": "var6"
                                        }, 
                                        {
                                            "operation": "store", 
                                            "type": "int", 
                                            "value": "var6.length", 
                                            "var": "var7"
                                        }, 
                                        {
                                            "operation": "store", 
                                            "type": "int", 
                                            "value": "0", 
                                            "var": "var8"
                                        }, 
                                        {
                                            "condition": "var8 < var7", 
                                            "instructions": [
                                                {
                                                    "operation": "store", 
                                                    "type": "Object", 
                                                    "value": "var6[var8]", 
                                                    "var": "var9"
                                                }, 
                                                {
                                                    "field": "var9", 
                                                    "operation": "write", 
                                                    "type": "string"
                                                }, 
                                                {
                                                    "amount": "1", 
                                                    "field": "var8", 
                                                    "operation": "increment"
                                                }
                                            ], 
                                            "operation": "loop"
                                        }, 
                                        {
                                            "amount": "1", 
                                            "field": "var4", 
                                            "operation": "increment"
                                        }
                                    ], 
                                    "operation": "loop"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "field": "c.size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.c.iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((nx)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "var3", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "field": "d.size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.d.entrySet().iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((Map$Entry)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "(nx)var3.getKey()", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }, 
                                {
                                    "field": "((n)var3.getValue()).a.size()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((n)var3.getValue()).a.entrySet().iterator()", 
                                    "var": "var2"
                                }, 
                                {
                                    "condition": "var2.hasNext()", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "((Map$Entry)var2.next())", 
                                            "var": "var3"
                                        }, 
                                        {
                                            "field": "(String)var3.getKey()", 
                                            "operation": "write", 
                                            "type": "string"
                                        }, 
                                        {
                                            "field": "(((r)var3.getValue()).c != null) ? 1 : 0", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }, 
                                        {
                                            "condition": "((r)var3.getValue()).c != null", 
                                            "instructions": [
                                                {
                                                    "field": "((r)var3.getValue()).c.getTime()", 
                                                    "operation": "write", 
                                                    "type": "long"
                                                }
                                            ], 
                                            "operation": "if"
                                        }
                                    ], 
                                    "operation": "loop"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_51": {
                    "class": "li.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 81, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b.size()", 
                            "operation": "write", 
                            "type": "int"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.b.iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((li$a)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "var3.a()", 
                                    "operation": "write", 
                                    "type": "string"
                                }, 
                                {
                                    "field": "var3.b()", 
                                    "operation": "write", 
                                    "type": "double"
                                }, 
                                {
                                    "field": "var3.c().size()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "var3.c().iterator()", 
                                    "var": "var4"
                                }, 
                                {
                                    "condition": "var4.hasNext()", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "((ace)var4.next())", 
                                            "var": "var5"
                                        }, 
                                        {
                                            "field": "var5.a()", 
                                            "operation": "write", 
                                            "type": "uuid"
                                        }, 
                                        {
                                            "field": "var5.d()", 
                                            "operation": "write", 
                                            "type": "double"
                                        }, 
                                        {
                                            "field": "var5.c()", 
                                            "operation": "write", 
                                            "type": "byte"
                                        }
                                    ], 
                                    "operation": "loop"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_52": {
                    "class": "lj.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 82, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_53": {
                    "class": "lk.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 83, 
                    "instructions": [
                        {
                            "field": "a.size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.a.iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((arj)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "var3.b()", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }, 
                                {
                                    "field": "var3.a().a()", 
                                    "operation": "write", 
                                    "type": "string"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "var3.a()", 
                                    "var": "var2"
                                }, 
                                {
                                    "args": "packetbuffer, var3", 
                                    "field": "var2", 
                                    "method": "a(Lhi;Larj;)V", 
                                    "name": "a", 
                                    "operation": "interfacecall", 
                                    "target": "arl", 
                                    "type": "interface"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_CLIENTBOUND_54": {
                    "class": "ll.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 84, 
                    "instructions": [
                        {
                            "field": "a.a.c().size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.a.a.c().entrySet().iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((Map$Entry)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "(nx)var3.getKey()", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }, 
                                {
                                    "field": "((vt)var3.getValue()).a().size()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((vt)var3.getValue()).a().iterator()", 
                                    "var": "var4"
                                }, 
                                {
                                    "condition": "var4.hasNext()", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "var4.next()", 
                                            "var": "var5"
                                        }, 
                                        {
                                            "field": "a.a.a.a(var5)", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }
                                    ], 
                                    "operation": "loop"
                                }
                            ], 
                            "operation": "loop"
                        }, 
                        {
                            "field": "a.b.c().size()", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "operation": "store", 
                            "type": "Object", 
                            "value": "this.a.b.c().entrySet().iterator()", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2.hasNext()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((Map$Entry)var2.next())", 
                                    "var": "var3"
                                }, 
                                {
                                    "field": "(nx)var3.getKey()", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }, 
                                {
                                    "field": "((vt)var3.getValue()).a().size()", 
                                    "operation": "write", 
                                    "type": "varint"
                                }, 
                                {
                                    "operation": "store", 
                                    "type": "Object", 
                                    "value": "((vt)var3.getValue()).a().iterator()", 
                                    "var": "var4"
                                }, 
                                {
                                    "condition": "var4.hasNext()", 
                                    "instructions": [
                                        {
                                            "operation": "store", 
                                            "type": "Object", 
                                            "value": "var4.next()", 
                                            "var": "var5"
                                        }, 
                                        {
                                            "field": "a.b.a.a(var5)", 
                                            "operation": "write", 
                                            "type": "varint"
                                        }
                                    ], 
                                    "operation": "loop"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_00": {
                    "class": "ln.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 0, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_01": {
                    "class": "lo.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 1, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_02": {
                    "class": "lp.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 2, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_03": {
                    "class": "lq.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 3, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "enum"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_04": {
                    "class": "lr.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 4, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "string"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_05": {
                    "class": "ls.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 5, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "(c) ? 1 : 0", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_06": {
                    "class": "lt.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 6, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_07": {
                    "class": "lu.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 7, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "itemstack"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_08": {
                    "class": "lv.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 8, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_09": {
                    "class": "lw.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 9, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "string"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "byte[]"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_0A": {
                    "class": "lx.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 10, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "condition": "b == lx$a.c", 
                            "instructions": [
                                {
                                    "field": "(float)c.b", 
                                    "operation": "write", 
                                    "type": "float"
                                }, 
                                {
                                    "field": "(float)c.c", 
                                    "operation": "write", 
                                    "type": "float"
                                }, 
                                {
                                    "field": "(float)c.d", 
                                    "operation": "write", 
                                    "type": "float"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "b != lx$a.a", 
                            "instructions": [
                                {
                                    "field": "d", 
                                    "operation": "write", 
                                    "type": "enum"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_0B": {
                    "class": "ly.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 11, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "long"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_0C": {
                    "class": "lz.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 12, 
                    "instructions": [
                        {
                            "field": "(f) ? 1 : 0", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_0D": {
                    "class": "lz$a.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 13, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "(f) ? 1 : 0", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_0E": {
                    "class": "lz$b.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 14, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "(f) ? 1 : 0", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_0F": {
                    "class": "lz$c.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 15, 
                    "instructions": [
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "(f) ? 1 : 0", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_10": {
                    "class": "ma.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 16, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "double"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_11": {
                    "class": "mb.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 17, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "boolean"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_12": {
                    "class": "mc.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 18, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "identifier"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "boolean"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_13": {
                    "class": "md.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 19, 
                    "instructions": [
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "0", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "a()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 1))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "b()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 2))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "c()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 4))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "d()", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 0x8))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "field": "var2", 
                            "operation": "write", 
                            "type": "byte"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_14": {
                    "class": "me.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 20, 
                    "instructions": [
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "field": "b.a()", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_15": {
                    "class": "mf.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 21, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "varint"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "varint"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_16": {
                    "class": "mg.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 22, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "0", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "c", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 1))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "condition": "d", 
                            "instructions": [
                                {
                                    "operation": "store", 
                                    "type": "int", 
                                    "value": "((byte)(var2 | 2))", 
                                    "var": "var2"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "field": "var2", 
                            "operation": "write", 
                            "type": "byte"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_17": {
                    "class": "mh.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 23, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "condition": "a == mh$a.a", 
                            "instructions": [
                                {
                                    "field": "b", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }
                            ], 
                            "operation": "if"
                        }, 
                        {
                            "instructions": [
                                {
                                    "condition": "a == mh$a.b", 
                                    "instructions": [
                                        {
                                            "field": "c", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }, 
                                        {
                                            "field": "d", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }, 
                                        {
                                            "field": "e", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }, 
                                        {
                                            "field": "f", 
                                            "operation": "write", 
                                            "type": "boolean"
                                        }
                                    ], 
                                    "operation": "if"
                                }
                            ], 
                            "operation": "else"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_18": {
                    "class": "mi.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 24, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_19": {
                    "class": "mj.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 25, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "condition": "a == mj$a.a", 
                            "instructions": [
                                {
                                    "field": "b", 
                                    "operation": "write", 
                                    "type": "identifier"
                                }
                            ], 
                            "operation": "if"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_1A": {
                    "class": "mk.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 26, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "short"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_1B": {
                    "class": "ml.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 27, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "short"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "itemstack"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_1C": {
                    "class": "mm.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 28, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "operation": "store", 
                            "type": "int", 
                            "value": "0", 
                            "var": "var2"
                        }, 
                        {
                            "condition": "var2 < 4", 
                            "instructions": [
                                {
                                    "field": "b[var2]", 
                                    "operation": "write", 
                                    "type": "string"
                                }, 
                                {
                                    "amount": "1", 
                                    "field": "var2", 
                                    "operation": "increment"
                                }
                            ], 
                            "operation": "loop"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_1D": {
                    "class": "mn.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 29, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_1E": {
                    "class": "mo.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 30, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "uuid"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_1F": {
                    "class": "mp.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 31, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "position"
                        }, 
                        {
                            "field": "b", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "c", 
                            "operation": "write", 
                            "type": "enum"
                        }, 
                        {
                            "field": "d", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "e", 
                            "operation": "write", 
                            "type": "float"
                        }, 
                        {
                            "field": "f", 
                            "operation": "write", 
                            "type": "float"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "PLAY_SERVERBOUND_20": {
                    "class": "mq.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 32, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "enum"
                        }
                    ], 
                    "state": "PLAY"
                }, 
                "STATUS_CLIENTBOUND_00": {
                    "class": "nh.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 0, 
                    "instructions": [
                        {
                            "field": "nh.a.toJson(b)", 
                            "operation": "write", 
                            "type": "string"
                        }
                    ], 
                    "state": "STATUS"
                }, 
                "STATUS_CLIENTBOUND_01": {
                    "class": "ng.class", 
                    "direction": "CLIENTBOUND", 
                    "from_client": false, 
                    "from_server": true, 
                    "id": 1, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "long"
                        }
                    ], 
                    "state": "STATUS"
                }, 
                "STATUS_SERVERBOUND_00": {
                    "class": "nl.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 0, 
                    "instructions": [], 
                    "state": "STATUS"
                }, 
                "STATUS_SERVERBOUND_01": {
                    "class": "nk.class", 
                    "direction": "SERVERBOUND", 
                    "from_client": true, 
                    "from_server": false, 
                    "id": 1, 
                    "instructions": [
                        {
                            "field": "a", 
                            "operation": "write", 
                            "type": "long"
                        }
                    ], 
                    "state": "STATUS"
                }
            }, 
            "states": {
                "HANDSHAKING": {
                    "class": "hh$1", 
                    "field": "a", 
                    "name": "HANDSHAKING"
                }, 
                "LOGIN": {
                    "class": "hh$4", 
                    "field": "d", 
                    "name": "LOGIN"
                }, 
                "PLAY": {
                    "class": "hh$2", 
                    "field": "b", 
                    "name": "PLAY"
                }, 
                "STATUS": {
                    "class": "hh$3", 
                    "field": "c", 
                    "name": "STATUS"
                }
            }
        }, 
        "source": {
            "classes": 3830, 
            "file": "18w07a.jar", 
            "other": 8987, 
            "size": 11316554
        }, 
        "version": {
            "data": 1467, 
            "is_flattened": true, 
            "name": "18w07a", 
            "protocol": 358
        }
    }
]